// Code generated by SQLBoiler 4.8.6 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"bytes"
	"context"
	"reflect"
	"testing"

	"github.com/volatiletech/randomize"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/strmangle"
)

var (
	// Relationships sometimes use the reflection helper queries.Equal/queries.Assign
	// so force a package dependency in case they don't.
	_ = queries.Equal
)

func testGraduationLevels(t *testing.T) {
	t.Parallel()

	query := GraduationLevels()

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}

func testGraduationLevelsDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &GraduationLevel{}
	if err = randomize.Struct(seed, o, graduationLevelDBTypes, true, graduationLevelColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize GraduationLevel struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := o.Delete(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := GraduationLevels().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testGraduationLevelsQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &GraduationLevel{}
	if err = randomize.Struct(seed, o, graduationLevelDBTypes, true, graduationLevelColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize GraduationLevel struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := GraduationLevels().DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := GraduationLevels().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testGraduationLevelsSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &GraduationLevel{}
	if err = randomize.Struct(seed, o, graduationLevelDBTypes, true, graduationLevelColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize GraduationLevel struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := GraduationLevelSlice{o}

	if rowsAff, err := slice.DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := GraduationLevels().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testGraduationLevelsExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &GraduationLevel{}
	if err = randomize.Struct(seed, o, graduationLevelDBTypes, true, graduationLevelColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize GraduationLevel struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	e, err := GraduationLevelExists(ctx, tx, o.ID)
	if err != nil {
		t.Errorf("Unable to check if GraduationLevel exists: %s", err)
	}
	if !e {
		t.Errorf("Expected GraduationLevelExists to return true, but got false.")
	}
}

func testGraduationLevelsFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &GraduationLevel{}
	if err = randomize.Struct(seed, o, graduationLevelDBTypes, true, graduationLevelColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize GraduationLevel struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	graduationLevelFound, err := FindGraduationLevel(ctx, tx, o.ID)
	if err != nil {
		t.Error(err)
	}

	if graduationLevelFound == nil {
		t.Error("want a record, got nil")
	}
}

func testGraduationLevelsBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &GraduationLevel{}
	if err = randomize.Struct(seed, o, graduationLevelDBTypes, true, graduationLevelColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize GraduationLevel struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = GraduationLevels().Bind(ctx, tx, o); err != nil {
		t.Error(err)
	}
}

func testGraduationLevelsOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &GraduationLevel{}
	if err = randomize.Struct(seed, o, graduationLevelDBTypes, true, graduationLevelColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize GraduationLevel struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if x, err := GraduationLevels().One(ctx, tx); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testGraduationLevelsAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	graduationLevelOne := &GraduationLevel{}
	graduationLevelTwo := &GraduationLevel{}
	if err = randomize.Struct(seed, graduationLevelOne, graduationLevelDBTypes, false, graduationLevelColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize GraduationLevel struct: %s", err)
	}
	if err = randomize.Struct(seed, graduationLevelTwo, graduationLevelDBTypes, false, graduationLevelColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize GraduationLevel struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = graduationLevelOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = graduationLevelTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := GraduationLevels().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testGraduationLevelsCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	graduationLevelOne := &GraduationLevel{}
	graduationLevelTwo := &GraduationLevel{}
	if err = randomize.Struct(seed, graduationLevelOne, graduationLevelDBTypes, false, graduationLevelColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize GraduationLevel struct: %s", err)
	}
	if err = randomize.Struct(seed, graduationLevelTwo, graduationLevelDBTypes, false, graduationLevelColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize GraduationLevel struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = graduationLevelOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = graduationLevelTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := GraduationLevels().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}

func graduationLevelBeforeInsertHook(ctx context.Context, e boil.ContextExecutor, o *GraduationLevel) error {
	*o = GraduationLevel{}
	return nil
}

func graduationLevelAfterInsertHook(ctx context.Context, e boil.ContextExecutor, o *GraduationLevel) error {
	*o = GraduationLevel{}
	return nil
}

func graduationLevelAfterSelectHook(ctx context.Context, e boil.ContextExecutor, o *GraduationLevel) error {
	*o = GraduationLevel{}
	return nil
}

func graduationLevelBeforeUpdateHook(ctx context.Context, e boil.ContextExecutor, o *GraduationLevel) error {
	*o = GraduationLevel{}
	return nil
}

func graduationLevelAfterUpdateHook(ctx context.Context, e boil.ContextExecutor, o *GraduationLevel) error {
	*o = GraduationLevel{}
	return nil
}

func graduationLevelBeforeDeleteHook(ctx context.Context, e boil.ContextExecutor, o *GraduationLevel) error {
	*o = GraduationLevel{}
	return nil
}

func graduationLevelAfterDeleteHook(ctx context.Context, e boil.ContextExecutor, o *GraduationLevel) error {
	*o = GraduationLevel{}
	return nil
}

func graduationLevelBeforeUpsertHook(ctx context.Context, e boil.ContextExecutor, o *GraduationLevel) error {
	*o = GraduationLevel{}
	return nil
}

func graduationLevelAfterUpsertHook(ctx context.Context, e boil.ContextExecutor, o *GraduationLevel) error {
	*o = GraduationLevel{}
	return nil
}

func testGraduationLevelsHooks(t *testing.T) {
	t.Parallel()

	var err error

	ctx := context.Background()
	empty := &GraduationLevel{}
	o := &GraduationLevel{}

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, o, graduationLevelDBTypes, false); err != nil {
		t.Errorf("Unable to randomize GraduationLevel object: %s", err)
	}

	AddGraduationLevelHook(boil.BeforeInsertHook, graduationLevelBeforeInsertHook)
	if err = o.doBeforeInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeInsertHook function to empty object, but got: %#v", o)
	}
	graduationLevelBeforeInsertHooks = []GraduationLevelHook{}

	AddGraduationLevelHook(boil.AfterInsertHook, graduationLevelAfterInsertHook)
	if err = o.doAfterInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterInsertHook function to empty object, but got: %#v", o)
	}
	graduationLevelAfterInsertHooks = []GraduationLevelHook{}

	AddGraduationLevelHook(boil.AfterSelectHook, graduationLevelAfterSelectHook)
	if err = o.doAfterSelectHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterSelectHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterSelectHook function to empty object, but got: %#v", o)
	}
	graduationLevelAfterSelectHooks = []GraduationLevelHook{}

	AddGraduationLevelHook(boil.BeforeUpdateHook, graduationLevelBeforeUpdateHook)
	if err = o.doBeforeUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpdateHook function to empty object, but got: %#v", o)
	}
	graduationLevelBeforeUpdateHooks = []GraduationLevelHook{}

	AddGraduationLevelHook(boil.AfterUpdateHook, graduationLevelAfterUpdateHook)
	if err = o.doAfterUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpdateHook function to empty object, but got: %#v", o)
	}
	graduationLevelAfterUpdateHooks = []GraduationLevelHook{}

	AddGraduationLevelHook(boil.BeforeDeleteHook, graduationLevelBeforeDeleteHook)
	if err = o.doBeforeDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeDeleteHook function to empty object, but got: %#v", o)
	}
	graduationLevelBeforeDeleteHooks = []GraduationLevelHook{}

	AddGraduationLevelHook(boil.AfterDeleteHook, graduationLevelAfterDeleteHook)
	if err = o.doAfterDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterDeleteHook function to empty object, but got: %#v", o)
	}
	graduationLevelAfterDeleteHooks = []GraduationLevelHook{}

	AddGraduationLevelHook(boil.BeforeUpsertHook, graduationLevelBeforeUpsertHook)
	if err = o.doBeforeUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpsertHook function to empty object, but got: %#v", o)
	}
	graduationLevelBeforeUpsertHooks = []GraduationLevelHook{}

	AddGraduationLevelHook(boil.AfterUpsertHook, graduationLevelAfterUpsertHook)
	if err = o.doAfterUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpsertHook function to empty object, but got: %#v", o)
	}
	graduationLevelAfterUpsertHooks = []GraduationLevelHook{}
}

func testGraduationLevelsInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &GraduationLevel{}
	if err = randomize.Struct(seed, o, graduationLevelDBTypes, true, graduationLevelColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize GraduationLevel struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := GraduationLevels().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testGraduationLevelsInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &GraduationLevel{}
	if err = randomize.Struct(seed, o, graduationLevelDBTypes, true); err != nil {
		t.Errorf("Unable to randomize GraduationLevel struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Whitelist(graduationLevelColumnsWithoutDefault...)); err != nil {
		t.Error(err)
	}

	count, err := GraduationLevels().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testGraduationLevelToManyUsers(t *testing.T) {
	var err error
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a GraduationLevel
	var b, c User

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, graduationLevelDBTypes, true, graduationLevelColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize GraduationLevel struct: %s", err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = randomize.Struct(seed, &b, userDBTypes, false, userColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, userDBTypes, false, userColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}

	queries.Assign(&b.GraduationLevel, a.ID)
	queries.Assign(&c.GraduationLevel, a.ID)
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := a.Users().All(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	bFound, cFound := false, false
	for _, v := range check {
		if queries.Equal(v.GraduationLevel, b.GraduationLevel) {
			bFound = true
		}
		if queries.Equal(v.GraduationLevel, c.GraduationLevel) {
			cFound = true
		}
	}

	if !bFound {
		t.Error("expected to find b")
	}
	if !cFound {
		t.Error("expected to find c")
	}

	slice := GraduationLevelSlice{&a}
	if err = a.L.LoadUsers(ctx, tx, false, (*[]*GraduationLevel)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.Users); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	a.R.Users = nil
	if err = a.L.LoadUsers(ctx, tx, true, &a, nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.Users); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	if t.Failed() {
		t.Logf("%#v", check)
	}
}

func testGraduationLevelToManyAddOpUsers(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a GraduationLevel
	var b, c, d, e User

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, graduationLevelDBTypes, false, strmangle.SetComplement(graduationLevelPrimaryKeyColumns, graduationLevelColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*User{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, userDBTypes, false, strmangle.SetComplement(userPrimaryKeyColumns, userColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	foreignersSplitByInsertion := [][]*User{
		{&b, &c},
		{&d, &e},
	}

	for i, x := range foreignersSplitByInsertion {
		err = a.AddUsers(ctx, tx, i != 0, x...)
		if err != nil {
			t.Fatal(err)
		}

		first := x[0]
		second := x[1]

		if !queries.Equal(a.ID, first.GraduationLevel) {
			t.Error("foreign key was wrong value", a.ID, first.GraduationLevel)
		}
		if !queries.Equal(a.ID, second.GraduationLevel) {
			t.Error("foreign key was wrong value", a.ID, second.GraduationLevel)
		}

		if first.R.UserGraduationLevel != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}
		if second.R.UserGraduationLevel != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}

		if a.R.Users[i*2] != first {
			t.Error("relationship struct slice not set to correct value")
		}
		if a.R.Users[i*2+1] != second {
			t.Error("relationship struct slice not set to correct value")
		}

		count, err := a.Users().Count(ctx, tx)
		if err != nil {
			t.Fatal(err)
		}
		if want := int64((i + 1) * 2); count != want {
			t.Error("want", want, "got", count)
		}
	}
}

func testGraduationLevelToManySetOpUsers(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a GraduationLevel
	var b, c, d, e User

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, graduationLevelDBTypes, false, strmangle.SetComplement(graduationLevelPrimaryKeyColumns, graduationLevelColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*User{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, userDBTypes, false, strmangle.SetComplement(userPrimaryKeyColumns, userColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err = a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	err = a.SetUsers(ctx, tx, false, &b, &c)
	if err != nil {
		t.Fatal(err)
	}

	count, err := a.Users().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	err = a.SetUsers(ctx, tx, true, &d, &e)
	if err != nil {
		t.Fatal(err)
	}

	count, err = a.Users().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	if !queries.IsValuerNil(b.GraduationLevel) {
		t.Error("want b's foreign key value to be nil")
	}
	if !queries.IsValuerNil(c.GraduationLevel) {
		t.Error("want c's foreign key value to be nil")
	}
	if !queries.Equal(a.ID, d.GraduationLevel) {
		t.Error("foreign key was wrong value", a.ID, d.GraduationLevel)
	}
	if !queries.Equal(a.ID, e.GraduationLevel) {
		t.Error("foreign key was wrong value", a.ID, e.GraduationLevel)
	}

	if b.R.UserGraduationLevel != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if c.R.UserGraduationLevel != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if d.R.UserGraduationLevel != &a {
		t.Error("relationship was not added properly to the foreign struct")
	}
	if e.R.UserGraduationLevel != &a {
		t.Error("relationship was not added properly to the foreign struct")
	}

	if a.R.Users[0] != &d {
		t.Error("relationship struct slice not set to correct value")
	}
	if a.R.Users[1] != &e {
		t.Error("relationship struct slice not set to correct value")
	}
}

func testGraduationLevelToManyRemoveOpUsers(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a GraduationLevel
	var b, c, d, e User

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, graduationLevelDBTypes, false, strmangle.SetComplement(graduationLevelPrimaryKeyColumns, graduationLevelColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*User{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, userDBTypes, false, strmangle.SetComplement(userPrimaryKeyColumns, userColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	err = a.AddUsers(ctx, tx, true, foreigners...)
	if err != nil {
		t.Fatal(err)
	}

	count, err := a.Users().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 4 {
		t.Error("count was wrong:", count)
	}

	err = a.RemoveUsers(ctx, tx, foreigners[:2]...)
	if err != nil {
		t.Fatal(err)
	}

	count, err = a.Users().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	if !queries.IsValuerNil(b.GraduationLevel) {
		t.Error("want b's foreign key value to be nil")
	}
	if !queries.IsValuerNil(c.GraduationLevel) {
		t.Error("want c's foreign key value to be nil")
	}

	if b.R.UserGraduationLevel != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if c.R.UserGraduationLevel != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if d.R.UserGraduationLevel != &a {
		t.Error("relationship to a should have been preserved")
	}
	if e.R.UserGraduationLevel != &a {
		t.Error("relationship to a should have been preserved")
	}

	if len(a.R.Users) != 2 {
		t.Error("should have preserved two relationships")
	}

	// Removal doesn't do a stable deletion for performance so we have to flip the order
	if a.R.Users[1] != &d {
		t.Error("relationship to d should have been preserved")
	}
	if a.R.Users[0] != &e {
		t.Error("relationship to e should have been preserved")
	}
}

func testGraduationLevelsReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &GraduationLevel{}
	if err = randomize.Struct(seed, o, graduationLevelDBTypes, true, graduationLevelColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize GraduationLevel struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = o.Reload(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testGraduationLevelsReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &GraduationLevel{}
	if err = randomize.Struct(seed, o, graduationLevelDBTypes, true, graduationLevelColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize GraduationLevel struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := GraduationLevelSlice{o}

	if err = slice.ReloadAll(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testGraduationLevelsSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &GraduationLevel{}
	if err = randomize.Struct(seed, o, graduationLevelDBTypes, true, graduationLevelColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize GraduationLevel struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := GraduationLevels().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	graduationLevelDBTypes = map[string]string{`ID`: `int`, `GraduationLevel`: `varchar`, `Level`: `int`}
	_                      = bytes.MinRead
)

func testGraduationLevelsUpdate(t *testing.T) {
	t.Parallel()

	if 0 == len(graduationLevelPrimaryKeyColumns) {
		t.Skip("Skipping table with no primary key columns")
	}
	if len(graduationLevelAllColumns) == len(graduationLevelPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &GraduationLevel{}
	if err = randomize.Struct(seed, o, graduationLevelDBTypes, true, graduationLevelColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize GraduationLevel struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := GraduationLevels().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, graduationLevelDBTypes, true, graduationLevelPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize GraduationLevel struct: %s", err)
	}

	if rowsAff, err := o.Update(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only affect one row but affected", rowsAff)
	}
}

func testGraduationLevelsSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(graduationLevelAllColumns) == len(graduationLevelPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &GraduationLevel{}
	if err = randomize.Struct(seed, o, graduationLevelDBTypes, true, graduationLevelColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize GraduationLevel struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := GraduationLevels().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, graduationLevelDBTypes, true, graduationLevelPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize GraduationLevel struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(graduationLevelAllColumns, graduationLevelPrimaryKeyColumns) {
		fields = graduationLevelAllColumns
	} else {
		fields = strmangle.SetComplement(
			graduationLevelAllColumns,
			graduationLevelPrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	typ := reflect.TypeOf(o).Elem()
	n := typ.NumField()

	updateMap := M{}
	for _, col := range fields {
		for i := 0; i < n; i++ {
			f := typ.Field(i)
			if f.Tag.Get("boil") == col {
				updateMap[col] = value.Field(i).Interface()
			}
		}
	}

	slice := GraduationLevelSlice{o}
	if rowsAff, err := slice.UpdateAll(ctx, tx, updateMap); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("wanted one record updated but got", rowsAff)
	}
}

func testGraduationLevelsUpsert(t *testing.T) {
	t.Parallel()

	if len(graduationLevelAllColumns) == len(graduationLevelPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}
	if len(mySQLGraduationLevelUniqueColumns) == 0 {
		t.Skip("Skipping table with no unique columns to conflict on")
	}

	seed := randomize.NewSeed()
	var err error
	// Attempt the INSERT side of an UPSERT
	o := GraduationLevel{}
	if err = randomize.Struct(seed, &o, graduationLevelDBTypes, false); err != nil {
		t.Errorf("Unable to randomize GraduationLevel struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Upsert(ctx, tx, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert GraduationLevel: %s", err)
	}

	count, err := GraduationLevels().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}

	// Attempt the UPDATE side of an UPSERT
	if err = randomize.Struct(seed, &o, graduationLevelDBTypes, false, graduationLevelPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize GraduationLevel struct: %s", err)
	}

	if err = o.Upsert(ctx, tx, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert GraduationLevel: %s", err)
	}

	count, err = GraduationLevels().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}
}
