// Code generated by SQLBoiler 4.8.6 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"bytes"
	"context"
	"reflect"
	"testing"

	"github.com/volatiletech/randomize"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/strmangle"
)

var (
	// Relationships sometimes use the reflection helper queries.Equal/queries.Assign
	// so force a package dependency in case they don't.
	_ = queries.Equal
)

func testExams(t *testing.T) {
	t.Parallel()

	query := Exams()

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}

func testExamsSoftDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Exam{}
	if err = randomize.Struct(seed, o, examDBTypes, true, examColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Exam struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := o.Delete(ctx, tx, false); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := Exams().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testExamsQuerySoftDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Exam{}
	if err = randomize.Struct(seed, o, examDBTypes, true, examColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Exam struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := Exams().DeleteAll(ctx, tx, false); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := Exams().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testExamsSliceSoftDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Exam{}
	if err = randomize.Struct(seed, o, examDBTypes, true, examColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Exam struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := ExamSlice{o}

	if rowsAff, err := slice.DeleteAll(ctx, tx, false); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := Exams().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testExamsDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Exam{}
	if err = randomize.Struct(seed, o, examDBTypes, true, examColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Exam struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := o.Delete(ctx, tx, true); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := Exams().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testExamsQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Exam{}
	if err = randomize.Struct(seed, o, examDBTypes, true, examColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Exam struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := Exams().DeleteAll(ctx, tx, true); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := Exams().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testExamsSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Exam{}
	if err = randomize.Struct(seed, o, examDBTypes, true, examColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Exam struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := ExamSlice{o}

	if rowsAff, err := slice.DeleteAll(ctx, tx, true); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := Exams().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testExamsExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Exam{}
	if err = randomize.Struct(seed, o, examDBTypes, true, examColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Exam struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	e, err := ExamExists(ctx, tx, o.ID)
	if err != nil {
		t.Errorf("Unable to check if Exam exists: %s", err)
	}
	if !e {
		t.Errorf("Expected ExamExists to return true, but got false.")
	}
}

func testExamsFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Exam{}
	if err = randomize.Struct(seed, o, examDBTypes, true, examColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Exam struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	examFound, err := FindExam(ctx, tx, o.ID)
	if err != nil {
		t.Error(err)
	}

	if examFound == nil {
		t.Error("want a record, got nil")
	}
}

func testExamsBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Exam{}
	if err = randomize.Struct(seed, o, examDBTypes, true, examColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Exam struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = Exams().Bind(ctx, tx, o); err != nil {
		t.Error(err)
	}
}

func testExamsOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Exam{}
	if err = randomize.Struct(seed, o, examDBTypes, true, examColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Exam struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if x, err := Exams().One(ctx, tx); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testExamsAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	examOne := &Exam{}
	examTwo := &Exam{}
	if err = randomize.Struct(seed, examOne, examDBTypes, false, examColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Exam struct: %s", err)
	}
	if err = randomize.Struct(seed, examTwo, examDBTypes, false, examColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Exam struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = examOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = examTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := Exams().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testExamsCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	examOne := &Exam{}
	examTwo := &Exam{}
	if err = randomize.Struct(seed, examOne, examDBTypes, false, examColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Exam struct: %s", err)
	}
	if err = randomize.Struct(seed, examTwo, examDBTypes, false, examColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Exam struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = examOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = examTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Exams().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}

func examBeforeInsertHook(ctx context.Context, e boil.ContextExecutor, o *Exam) error {
	*o = Exam{}
	return nil
}

func examAfterInsertHook(ctx context.Context, e boil.ContextExecutor, o *Exam) error {
	*o = Exam{}
	return nil
}

func examAfterSelectHook(ctx context.Context, e boil.ContextExecutor, o *Exam) error {
	*o = Exam{}
	return nil
}

func examBeforeUpdateHook(ctx context.Context, e boil.ContextExecutor, o *Exam) error {
	*o = Exam{}
	return nil
}

func examAfterUpdateHook(ctx context.Context, e boil.ContextExecutor, o *Exam) error {
	*o = Exam{}
	return nil
}

func examBeforeDeleteHook(ctx context.Context, e boil.ContextExecutor, o *Exam) error {
	*o = Exam{}
	return nil
}

func examAfterDeleteHook(ctx context.Context, e boil.ContextExecutor, o *Exam) error {
	*o = Exam{}
	return nil
}

func examBeforeUpsertHook(ctx context.Context, e boil.ContextExecutor, o *Exam) error {
	*o = Exam{}
	return nil
}

func examAfterUpsertHook(ctx context.Context, e boil.ContextExecutor, o *Exam) error {
	*o = Exam{}
	return nil
}

func testExamsHooks(t *testing.T) {
	t.Parallel()

	var err error

	ctx := context.Background()
	empty := &Exam{}
	o := &Exam{}

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, o, examDBTypes, false); err != nil {
		t.Errorf("Unable to randomize Exam object: %s", err)
	}

	AddExamHook(boil.BeforeInsertHook, examBeforeInsertHook)
	if err = o.doBeforeInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeInsertHook function to empty object, but got: %#v", o)
	}
	examBeforeInsertHooks = []ExamHook{}

	AddExamHook(boil.AfterInsertHook, examAfterInsertHook)
	if err = o.doAfterInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterInsertHook function to empty object, but got: %#v", o)
	}
	examAfterInsertHooks = []ExamHook{}

	AddExamHook(boil.AfterSelectHook, examAfterSelectHook)
	if err = o.doAfterSelectHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterSelectHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterSelectHook function to empty object, but got: %#v", o)
	}
	examAfterSelectHooks = []ExamHook{}

	AddExamHook(boil.BeforeUpdateHook, examBeforeUpdateHook)
	if err = o.doBeforeUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpdateHook function to empty object, but got: %#v", o)
	}
	examBeforeUpdateHooks = []ExamHook{}

	AddExamHook(boil.AfterUpdateHook, examAfterUpdateHook)
	if err = o.doAfterUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpdateHook function to empty object, but got: %#v", o)
	}
	examAfterUpdateHooks = []ExamHook{}

	AddExamHook(boil.BeforeDeleteHook, examBeforeDeleteHook)
	if err = o.doBeforeDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeDeleteHook function to empty object, but got: %#v", o)
	}
	examBeforeDeleteHooks = []ExamHook{}

	AddExamHook(boil.AfterDeleteHook, examAfterDeleteHook)
	if err = o.doAfterDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterDeleteHook function to empty object, but got: %#v", o)
	}
	examAfterDeleteHooks = []ExamHook{}

	AddExamHook(boil.BeforeUpsertHook, examBeforeUpsertHook)
	if err = o.doBeforeUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpsertHook function to empty object, but got: %#v", o)
	}
	examBeforeUpsertHooks = []ExamHook{}

	AddExamHook(boil.AfterUpsertHook, examAfterUpsertHook)
	if err = o.doAfterUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpsertHook function to empty object, but got: %#v", o)
	}
	examAfterUpsertHooks = []ExamHook{}
}

func testExamsInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Exam{}
	if err = randomize.Struct(seed, o, examDBTypes, true, examColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Exam struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Exams().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testExamsInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Exam{}
	if err = randomize.Struct(seed, o, examDBTypes, true); err != nil {
		t.Errorf("Unable to randomize Exam struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Whitelist(examColumnsWithoutDefault...)); err != nil {
		t.Error(err)
	}

	count, err := Exams().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testExamToManyCertificates(t *testing.T) {
	var err error
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Exam
	var b, c Certificate

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, examDBTypes, true, examColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Exam struct: %s", err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = randomize.Struct(seed, &b, certificateDBTypes, false, certificateColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, certificateDBTypes, false, certificateColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}

	queries.Assign(&b.ExamID, a.ID)
	queries.Assign(&c.ExamID, a.ID)
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := a.Certificates().All(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	bFound, cFound := false, false
	for _, v := range check {
		if queries.Equal(v.ExamID, b.ExamID) {
			bFound = true
		}
		if queries.Equal(v.ExamID, c.ExamID) {
			cFound = true
		}
	}

	if !bFound {
		t.Error("expected to find b")
	}
	if !cFound {
		t.Error("expected to find c")
	}

	slice := ExamSlice{&a}
	if err = a.L.LoadCertificates(ctx, tx, false, (*[]*Exam)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.Certificates); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	a.R.Certificates = nil
	if err = a.L.LoadCertificates(ctx, tx, true, &a, nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.Certificates); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	if t.Failed() {
		t.Logf("%#v", check)
	}
}

func testExamToManyFiles(t *testing.T) {
	var err error
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Exam
	var b, c File

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, examDBTypes, true, examColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Exam struct: %s", err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = randomize.Struct(seed, &b, fileDBTypes, false, fileColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, fileDBTypes, false, fileColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}

	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	_, err = tx.Exec("insert into `exam_has_files` (`exam_id`, `file_id`) values (?, ?)", a.ID, b.ID)
	if err != nil {
		t.Fatal(err)
	}
	_, err = tx.Exec("insert into `exam_has_files` (`exam_id`, `file_id`) values (?, ?)", a.ID, c.ID)
	if err != nil {
		t.Fatal(err)
	}

	check, err := a.Files().All(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	bFound, cFound := false, false
	for _, v := range check {
		if v.ID == b.ID {
			bFound = true
		}
		if v.ID == c.ID {
			cFound = true
		}
	}

	if !bFound {
		t.Error("expected to find b")
	}
	if !cFound {
		t.Error("expected to find c")
	}

	slice := ExamSlice{&a}
	if err = a.L.LoadFiles(ctx, tx, false, (*[]*Exam)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.Files); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	a.R.Files = nil
	if err = a.L.LoadFiles(ctx, tx, true, &a, nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.Files); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	if t.Failed() {
		t.Logf("%#v", check)
	}
}

func testExamToManyUserHasExams(t *testing.T) {
	var err error
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Exam
	var b, c UserHasExam

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, examDBTypes, true, examColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Exam struct: %s", err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = randomize.Struct(seed, &b, userHasExamDBTypes, false, userHasExamColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, userHasExamDBTypes, false, userHasExamColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}

	b.ExamID = a.ID
	c.ExamID = a.ID

	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := a.UserHasExams().All(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	bFound, cFound := false, false
	for _, v := range check {
		if v.ExamID == b.ExamID {
			bFound = true
		}
		if v.ExamID == c.ExamID {
			cFound = true
		}
	}

	if !bFound {
		t.Error("expected to find b")
	}
	if !cFound {
		t.Error("expected to find c")
	}

	slice := ExamSlice{&a}
	if err = a.L.LoadUserHasExams(ctx, tx, false, (*[]*Exam)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.UserHasExams); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	a.R.UserHasExams = nil
	if err = a.L.LoadUserHasExams(ctx, tx, true, &a, nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.UserHasExams); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	if t.Failed() {
		t.Logf("%#v", check)
	}
}

func testExamToManyAddOpCertificates(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Exam
	var b, c, d, e Certificate

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, examDBTypes, false, strmangle.SetComplement(examPrimaryKeyColumns, examColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*Certificate{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, certificateDBTypes, false, strmangle.SetComplement(certificatePrimaryKeyColumns, certificateColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	foreignersSplitByInsertion := [][]*Certificate{
		{&b, &c},
		{&d, &e},
	}

	for i, x := range foreignersSplitByInsertion {
		err = a.AddCertificates(ctx, tx, i != 0, x...)
		if err != nil {
			t.Fatal(err)
		}

		first := x[0]
		second := x[1]

		if !queries.Equal(a.ID, first.ExamID) {
			t.Error("foreign key was wrong value", a.ID, first.ExamID)
		}
		if !queries.Equal(a.ID, second.ExamID) {
			t.Error("foreign key was wrong value", a.ID, second.ExamID)
		}

		if first.R.Exam != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}
		if second.R.Exam != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}

		if a.R.Certificates[i*2] != first {
			t.Error("relationship struct slice not set to correct value")
		}
		if a.R.Certificates[i*2+1] != second {
			t.Error("relationship struct slice not set to correct value")
		}

		count, err := a.Certificates().Count(ctx, tx)
		if err != nil {
			t.Fatal(err)
		}
		if want := int64((i + 1) * 2); count != want {
			t.Error("want", want, "got", count)
		}
	}
}

func testExamToManySetOpCertificates(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Exam
	var b, c, d, e Certificate

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, examDBTypes, false, strmangle.SetComplement(examPrimaryKeyColumns, examColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*Certificate{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, certificateDBTypes, false, strmangle.SetComplement(certificatePrimaryKeyColumns, certificateColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err = a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	err = a.SetCertificates(ctx, tx, false, &b, &c)
	if err != nil {
		t.Fatal(err)
	}

	count, err := a.Certificates().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	err = a.SetCertificates(ctx, tx, true, &d, &e)
	if err != nil {
		t.Fatal(err)
	}

	count, err = a.Certificates().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	if !queries.IsValuerNil(b.ExamID) {
		t.Error("want b's foreign key value to be nil")
	}
	if !queries.IsValuerNil(c.ExamID) {
		t.Error("want c's foreign key value to be nil")
	}
	if !queries.Equal(a.ID, d.ExamID) {
		t.Error("foreign key was wrong value", a.ID, d.ExamID)
	}
	if !queries.Equal(a.ID, e.ExamID) {
		t.Error("foreign key was wrong value", a.ID, e.ExamID)
	}

	if b.R.Exam != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if c.R.Exam != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if d.R.Exam != &a {
		t.Error("relationship was not added properly to the foreign struct")
	}
	if e.R.Exam != &a {
		t.Error("relationship was not added properly to the foreign struct")
	}

	if a.R.Certificates[0] != &d {
		t.Error("relationship struct slice not set to correct value")
	}
	if a.R.Certificates[1] != &e {
		t.Error("relationship struct slice not set to correct value")
	}
}

func testExamToManyRemoveOpCertificates(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Exam
	var b, c, d, e Certificate

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, examDBTypes, false, strmangle.SetComplement(examPrimaryKeyColumns, examColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*Certificate{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, certificateDBTypes, false, strmangle.SetComplement(certificatePrimaryKeyColumns, certificateColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	err = a.AddCertificates(ctx, tx, true, foreigners...)
	if err != nil {
		t.Fatal(err)
	}

	count, err := a.Certificates().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 4 {
		t.Error("count was wrong:", count)
	}

	err = a.RemoveCertificates(ctx, tx, foreigners[:2]...)
	if err != nil {
		t.Fatal(err)
	}

	count, err = a.Certificates().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	if !queries.IsValuerNil(b.ExamID) {
		t.Error("want b's foreign key value to be nil")
	}
	if !queries.IsValuerNil(c.ExamID) {
		t.Error("want c's foreign key value to be nil")
	}

	if b.R.Exam != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if c.R.Exam != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if d.R.Exam != &a {
		t.Error("relationship to a should have been preserved")
	}
	if e.R.Exam != &a {
		t.Error("relationship to a should have been preserved")
	}

	if len(a.R.Certificates) != 2 {
		t.Error("should have preserved two relationships")
	}

	// Removal doesn't do a stable deletion for performance so we have to flip the order
	if a.R.Certificates[1] != &d {
		t.Error("relationship to d should have been preserved")
	}
	if a.R.Certificates[0] != &e {
		t.Error("relationship to e should have been preserved")
	}
}

func testExamToManyAddOpFiles(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Exam
	var b, c, d, e File

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, examDBTypes, false, strmangle.SetComplement(examPrimaryKeyColumns, examColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*File{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, fileDBTypes, false, strmangle.SetComplement(filePrimaryKeyColumns, fileColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	foreignersSplitByInsertion := [][]*File{
		{&b, &c},
		{&d, &e},
	}

	for i, x := range foreignersSplitByInsertion {
		err = a.AddFiles(ctx, tx, i != 0, x...)
		if err != nil {
			t.Fatal(err)
		}

		first := x[0]
		second := x[1]

		if first.R.Exams[0] != &a {
			t.Error("relationship was not added properly to the slice")
		}
		if second.R.Exams[0] != &a {
			t.Error("relationship was not added properly to the slice")
		}

		if a.R.Files[i*2] != first {
			t.Error("relationship struct slice not set to correct value")
		}
		if a.R.Files[i*2+1] != second {
			t.Error("relationship struct slice not set to correct value")
		}

		count, err := a.Files().Count(ctx, tx)
		if err != nil {
			t.Fatal(err)
		}
		if want := int64((i + 1) * 2); count != want {
			t.Error("want", want, "got", count)
		}
	}
}

func testExamToManySetOpFiles(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Exam
	var b, c, d, e File

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, examDBTypes, false, strmangle.SetComplement(examPrimaryKeyColumns, examColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*File{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, fileDBTypes, false, strmangle.SetComplement(filePrimaryKeyColumns, fileColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err = a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	err = a.SetFiles(ctx, tx, false, &b, &c)
	if err != nil {
		t.Fatal(err)
	}

	count, err := a.Files().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	err = a.SetFiles(ctx, tx, true, &d, &e)
	if err != nil {
		t.Fatal(err)
	}

	count, err = a.Files().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	// The following checks cannot be implemented since we have no handle
	// to these when we call Set(). Leaving them here as wishful thinking
	// and to let people know there's dragons.
	//
	// if len(b.R.Exams) != 0 {
	// 	t.Error("relationship was not removed properly from the slice")
	// }
	// if len(c.R.Exams) != 0 {
	// 	t.Error("relationship was not removed properly from the slice")
	// }
	if d.R.Exams[0] != &a {
		t.Error("relationship was not added properly to the slice")
	}
	if e.R.Exams[0] != &a {
		t.Error("relationship was not added properly to the slice")
	}

	if a.R.Files[0] != &d {
		t.Error("relationship struct slice not set to correct value")
	}
	if a.R.Files[1] != &e {
		t.Error("relationship struct slice not set to correct value")
	}
}

func testExamToManyRemoveOpFiles(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Exam
	var b, c, d, e File

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, examDBTypes, false, strmangle.SetComplement(examPrimaryKeyColumns, examColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*File{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, fileDBTypes, false, strmangle.SetComplement(filePrimaryKeyColumns, fileColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	err = a.AddFiles(ctx, tx, true, foreigners...)
	if err != nil {
		t.Fatal(err)
	}

	count, err := a.Files().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 4 {
		t.Error("count was wrong:", count)
	}

	err = a.RemoveFiles(ctx, tx, foreigners[:2]...)
	if err != nil {
		t.Fatal(err)
	}

	count, err = a.Files().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	if len(b.R.Exams) != 0 {
		t.Error("relationship was not removed properly from the slice")
	}
	if len(c.R.Exams) != 0 {
		t.Error("relationship was not removed properly from the slice")
	}
	if d.R.Exams[0] != &a {
		t.Error("relationship was not added properly to the foreign struct")
	}
	if e.R.Exams[0] != &a {
		t.Error("relationship was not added properly to the foreign struct")
	}

	if len(a.R.Files) != 2 {
		t.Error("should have preserved two relationships")
	}

	// Removal doesn't do a stable deletion for performance so we have to flip the order
	if a.R.Files[1] != &d {
		t.Error("relationship to d should have been preserved")
	}
	if a.R.Files[0] != &e {
		t.Error("relationship to e should have been preserved")
	}
}

func testExamToManyAddOpUserHasExams(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Exam
	var b, c, d, e UserHasExam

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, examDBTypes, false, strmangle.SetComplement(examPrimaryKeyColumns, examColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*UserHasExam{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, userHasExamDBTypes, false, strmangle.SetComplement(userHasExamPrimaryKeyColumns, userHasExamColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	foreignersSplitByInsertion := [][]*UserHasExam{
		{&b, &c},
		{&d, &e},
	}

	for i, x := range foreignersSplitByInsertion {
		err = a.AddUserHasExams(ctx, tx, i != 0, x...)
		if err != nil {
			t.Fatal(err)
		}

		first := x[0]
		second := x[1]

		if a.ID != first.ExamID {
			t.Error("foreign key was wrong value", a.ID, first.ExamID)
		}
		if a.ID != second.ExamID {
			t.Error("foreign key was wrong value", a.ID, second.ExamID)
		}

		if first.R.Exam != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}
		if second.R.Exam != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}

		if a.R.UserHasExams[i*2] != first {
			t.Error("relationship struct slice not set to correct value")
		}
		if a.R.UserHasExams[i*2+1] != second {
			t.Error("relationship struct slice not set to correct value")
		}

		count, err := a.UserHasExams().Count(ctx, tx)
		if err != nil {
			t.Fatal(err)
		}
		if want := int64((i + 1) * 2); count != want {
			t.Error("want", want, "got", count)
		}
	}
}
func testExamToOneCourseUsingCourse(t *testing.T) {
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var local Exam
	var foreign Course

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, examDBTypes, false, examColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Exam struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, courseDBTypes, false, courseColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Course struct: %s", err)
	}

	if err := foreign.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	local.CourseID = foreign.ID
	if err := local.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.Course().One(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	if check.ID != foreign.ID {
		t.Errorf("want: %v, got %v", foreign.ID, check.ID)
	}

	slice := ExamSlice{&local}
	if err = local.L.LoadCourse(ctx, tx, false, (*[]*Exam)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Course == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.Course = nil
	if err = local.L.LoadCourse(ctx, tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Course == nil {
		t.Error("struct should have been eager loaded")
	}
}

func testExamToOneUserUsingCreator(t *testing.T) {
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var local Exam
	var foreign User

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, examDBTypes, false, examColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Exam struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, userDBTypes, false, userColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize User struct: %s", err)
	}

	if err := foreign.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	local.CreatorID = foreign.ID
	if err := local.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.Creator().One(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	if check.ID != foreign.ID {
		t.Errorf("want: %v, got %v", foreign.ID, check.ID)
	}

	slice := ExamSlice{&local}
	if err = local.L.LoadCreator(ctx, tx, false, (*[]*Exam)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Creator == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.Creator = nil
	if err = local.L.LoadCreator(ctx, tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Creator == nil {
		t.Error("struct should have been eager loaded")
	}
}

func testExamToOneSetOpCourseUsingCourse(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Exam
	var b, c Course

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, examDBTypes, false, strmangle.SetComplement(examPrimaryKeyColumns, examColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, courseDBTypes, false, strmangle.SetComplement(coursePrimaryKeyColumns, courseColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, courseDBTypes, false, strmangle.SetComplement(coursePrimaryKeyColumns, courseColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*Course{&b, &c} {
		err = a.SetCourse(ctx, tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.Course != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.Exams[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if a.CourseID != x.ID {
			t.Error("foreign key was wrong value", a.CourseID)
		}

		zero := reflect.Zero(reflect.TypeOf(a.CourseID))
		reflect.Indirect(reflect.ValueOf(&a.CourseID)).Set(zero)

		if err = a.Reload(ctx, tx); err != nil {
			t.Fatal("failed to reload", err)
		}

		if a.CourseID != x.ID {
			t.Error("foreign key was wrong value", a.CourseID, x.ID)
		}
	}
}
func testExamToOneSetOpUserUsingCreator(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Exam
	var b, c User

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, examDBTypes, false, strmangle.SetComplement(examPrimaryKeyColumns, examColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, userDBTypes, false, strmangle.SetComplement(userPrimaryKeyColumns, userColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, userDBTypes, false, strmangle.SetComplement(userPrimaryKeyColumns, userColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*User{&b, &c} {
		err = a.SetCreator(ctx, tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.Creator != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.CreatorExams[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if a.CreatorID != x.ID {
			t.Error("foreign key was wrong value", a.CreatorID)
		}

		zero := reflect.Zero(reflect.TypeOf(a.CreatorID))
		reflect.Indirect(reflect.ValueOf(&a.CreatorID)).Set(zero)

		if err = a.Reload(ctx, tx); err != nil {
			t.Fatal("failed to reload", err)
		}

		if a.CreatorID != x.ID {
			t.Error("foreign key was wrong value", a.CreatorID, x.ID)
		}
	}
}

func testExamsReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Exam{}
	if err = randomize.Struct(seed, o, examDBTypes, true, examColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Exam struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = o.Reload(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testExamsReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Exam{}
	if err = randomize.Struct(seed, o, examDBTypes, true, examColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Exam struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := ExamSlice{o}

	if err = slice.ReloadAll(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testExamsSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Exam{}
	if err = randomize.Struct(seed, o, examDBTypes, true, examColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Exam struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := Exams().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	examDBTypes = map[string]string{`ID`: `int`, `Name`: `varchar`, `Description`: `varchar`, `Date`: `timestamp`, `Duration`: `int`, `Online`: `tinyint`, `Location`: `varchar`, `CourseID`: `int`, `CreatorID`: `int`, `Graded`: `tinyint`, `RegisterDeadline`: `timestamp`, `DeregisterDeadline`: `timestamp`, `CreatedAt`: `timestamp`, `UpdatedAt`: `timestamp`, `DeletedAt`: `timestamp`}
	_           = bytes.MinRead
)

func testExamsUpdate(t *testing.T) {
	t.Parallel()

	if 0 == len(examPrimaryKeyColumns) {
		t.Skip("Skipping table with no primary key columns")
	}
	if len(examAllColumns) == len(examPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &Exam{}
	if err = randomize.Struct(seed, o, examDBTypes, true, examColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Exam struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Exams().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, examDBTypes, true, examPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize Exam struct: %s", err)
	}

	if rowsAff, err := o.Update(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only affect one row but affected", rowsAff)
	}
}

func testExamsSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(examAllColumns) == len(examPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &Exam{}
	if err = randomize.Struct(seed, o, examDBTypes, true, examColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Exam struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Exams().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, examDBTypes, true, examPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize Exam struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(examAllColumns, examPrimaryKeyColumns) {
		fields = examAllColumns
	} else {
		fields = strmangle.SetComplement(
			examAllColumns,
			examPrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	typ := reflect.TypeOf(o).Elem()
	n := typ.NumField()

	updateMap := M{}
	for _, col := range fields {
		for i := 0; i < n; i++ {
			f := typ.Field(i)
			if f.Tag.Get("boil") == col {
				updateMap[col] = value.Field(i).Interface()
			}
		}
	}

	slice := ExamSlice{o}
	if rowsAff, err := slice.UpdateAll(ctx, tx, updateMap); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("wanted one record updated but got", rowsAff)
	}
}

func testExamsUpsert(t *testing.T) {
	t.Parallel()

	if len(examAllColumns) == len(examPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}
	if len(mySQLExamUniqueColumns) == 0 {
		t.Skip("Skipping table with no unique columns to conflict on")
	}

	seed := randomize.NewSeed()
	var err error
	// Attempt the INSERT side of an UPSERT
	o := Exam{}
	if err = randomize.Struct(seed, &o, examDBTypes, false); err != nil {
		t.Errorf("Unable to randomize Exam struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Upsert(ctx, tx, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert Exam: %s", err)
	}

	count, err := Exams().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}

	// Attempt the UPDATE side of an UPSERT
	if err = randomize.Struct(seed, &o, examDBTypes, false, examPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize Exam struct: %s", err)
	}

	if err = o.Upsert(ctx, tx, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert Exam: %s", err)
	}

	count, err = Exams().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}
}
