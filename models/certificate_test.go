// Code generated by SQLBoiler 4.8.6 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"bytes"
	"context"
	"reflect"
	"testing"

	"github.com/volatiletech/randomize"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/strmangle"
)

var (
	// Relationships sometimes use the reflection helper queries.Equal/queries.Assign
	// so force a package dependency in case they don't.
	_ = queries.Equal
)

func testCertificates(t *testing.T) {
	t.Parallel()

	query := Certificates()

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}

func testCertificatesSoftDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Certificate{}
	if err = randomize.Struct(seed, o, certificateDBTypes, true, certificateColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Certificate struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := o.Delete(ctx, tx, false); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := Certificates().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testCertificatesQuerySoftDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Certificate{}
	if err = randomize.Struct(seed, o, certificateDBTypes, true, certificateColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Certificate struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := Certificates().DeleteAll(ctx, tx, false); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := Certificates().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testCertificatesSliceSoftDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Certificate{}
	if err = randomize.Struct(seed, o, certificateDBTypes, true, certificateColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Certificate struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := CertificateSlice{o}

	if rowsAff, err := slice.DeleteAll(ctx, tx, false); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := Certificates().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testCertificatesDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Certificate{}
	if err = randomize.Struct(seed, o, certificateDBTypes, true, certificateColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Certificate struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := o.Delete(ctx, tx, true); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := Certificates().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testCertificatesQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Certificate{}
	if err = randomize.Struct(seed, o, certificateDBTypes, true, certificateColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Certificate struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := Certificates().DeleteAll(ctx, tx, true); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := Certificates().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testCertificatesSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Certificate{}
	if err = randomize.Struct(seed, o, certificateDBTypes, true, certificateColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Certificate struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := CertificateSlice{o}

	if rowsAff, err := slice.DeleteAll(ctx, tx, true); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := Certificates().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testCertificatesExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Certificate{}
	if err = randomize.Struct(seed, o, certificateDBTypes, true, certificateColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Certificate struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	e, err := CertificateExists(ctx, tx, o.ID)
	if err != nil {
		t.Errorf("Unable to check if Certificate exists: %s", err)
	}
	if !e {
		t.Errorf("Expected CertificateExists to return true, but got false.")
	}
}

func testCertificatesFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Certificate{}
	if err = randomize.Struct(seed, o, certificateDBTypes, true, certificateColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Certificate struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	certificateFound, err := FindCertificate(ctx, tx, o.ID)
	if err != nil {
		t.Error(err)
	}

	if certificateFound == nil {
		t.Error("want a record, got nil")
	}
}

func testCertificatesBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Certificate{}
	if err = randomize.Struct(seed, o, certificateDBTypes, true, certificateColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Certificate struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = Certificates().Bind(ctx, tx, o); err != nil {
		t.Error(err)
	}
}

func testCertificatesOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Certificate{}
	if err = randomize.Struct(seed, o, certificateDBTypes, true, certificateColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Certificate struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if x, err := Certificates().One(ctx, tx); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testCertificatesAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	certificateOne := &Certificate{}
	certificateTwo := &Certificate{}
	if err = randomize.Struct(seed, certificateOne, certificateDBTypes, false, certificateColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Certificate struct: %s", err)
	}
	if err = randomize.Struct(seed, certificateTwo, certificateDBTypes, false, certificateColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Certificate struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = certificateOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = certificateTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := Certificates().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testCertificatesCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	certificateOne := &Certificate{}
	certificateTwo := &Certificate{}
	if err = randomize.Struct(seed, certificateOne, certificateDBTypes, false, certificateColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Certificate struct: %s", err)
	}
	if err = randomize.Struct(seed, certificateTwo, certificateDBTypes, false, certificateColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Certificate struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = certificateOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = certificateTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Certificates().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}

func certificateBeforeInsertHook(ctx context.Context, e boil.ContextExecutor, o *Certificate) error {
	*o = Certificate{}
	return nil
}

func certificateAfterInsertHook(ctx context.Context, e boil.ContextExecutor, o *Certificate) error {
	*o = Certificate{}
	return nil
}

func certificateAfterSelectHook(ctx context.Context, e boil.ContextExecutor, o *Certificate) error {
	*o = Certificate{}
	return nil
}

func certificateBeforeUpdateHook(ctx context.Context, e boil.ContextExecutor, o *Certificate) error {
	*o = Certificate{}
	return nil
}

func certificateAfterUpdateHook(ctx context.Context, e boil.ContextExecutor, o *Certificate) error {
	*o = Certificate{}
	return nil
}

func certificateBeforeDeleteHook(ctx context.Context, e boil.ContextExecutor, o *Certificate) error {
	*o = Certificate{}
	return nil
}

func certificateAfterDeleteHook(ctx context.Context, e boil.ContextExecutor, o *Certificate) error {
	*o = Certificate{}
	return nil
}

func certificateBeforeUpsertHook(ctx context.Context, e boil.ContextExecutor, o *Certificate) error {
	*o = Certificate{}
	return nil
}

func certificateAfterUpsertHook(ctx context.Context, e boil.ContextExecutor, o *Certificate) error {
	*o = Certificate{}
	return nil
}

func testCertificatesHooks(t *testing.T) {
	t.Parallel()

	var err error

	ctx := context.Background()
	empty := &Certificate{}
	o := &Certificate{}

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, o, certificateDBTypes, false); err != nil {
		t.Errorf("Unable to randomize Certificate object: %s", err)
	}

	AddCertificateHook(boil.BeforeInsertHook, certificateBeforeInsertHook)
	if err = o.doBeforeInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeInsertHook function to empty object, but got: %#v", o)
	}
	certificateBeforeInsertHooks = []CertificateHook{}

	AddCertificateHook(boil.AfterInsertHook, certificateAfterInsertHook)
	if err = o.doAfterInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterInsertHook function to empty object, but got: %#v", o)
	}
	certificateAfterInsertHooks = []CertificateHook{}

	AddCertificateHook(boil.AfterSelectHook, certificateAfterSelectHook)
	if err = o.doAfterSelectHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterSelectHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterSelectHook function to empty object, but got: %#v", o)
	}
	certificateAfterSelectHooks = []CertificateHook{}

	AddCertificateHook(boil.BeforeUpdateHook, certificateBeforeUpdateHook)
	if err = o.doBeforeUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpdateHook function to empty object, but got: %#v", o)
	}
	certificateBeforeUpdateHooks = []CertificateHook{}

	AddCertificateHook(boil.AfterUpdateHook, certificateAfterUpdateHook)
	if err = o.doAfterUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpdateHook function to empty object, but got: %#v", o)
	}
	certificateAfterUpdateHooks = []CertificateHook{}

	AddCertificateHook(boil.BeforeDeleteHook, certificateBeforeDeleteHook)
	if err = o.doBeforeDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeDeleteHook function to empty object, but got: %#v", o)
	}
	certificateBeforeDeleteHooks = []CertificateHook{}

	AddCertificateHook(boil.AfterDeleteHook, certificateAfterDeleteHook)
	if err = o.doAfterDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterDeleteHook function to empty object, but got: %#v", o)
	}
	certificateAfterDeleteHooks = []CertificateHook{}

	AddCertificateHook(boil.BeforeUpsertHook, certificateBeforeUpsertHook)
	if err = o.doBeforeUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpsertHook function to empty object, but got: %#v", o)
	}
	certificateBeforeUpsertHooks = []CertificateHook{}

	AddCertificateHook(boil.AfterUpsertHook, certificateAfterUpsertHook)
	if err = o.doAfterUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpsertHook function to empty object, but got: %#v", o)
	}
	certificateAfterUpsertHooks = []CertificateHook{}
}

func testCertificatesInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Certificate{}
	if err = randomize.Struct(seed, o, certificateDBTypes, true, certificateColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Certificate struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Certificates().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testCertificatesInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Certificate{}
	if err = randomize.Struct(seed, o, certificateDBTypes, true); err != nil {
		t.Errorf("Unable to randomize Certificate struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Whitelist(certificateColumnsWithoutDefault...)); err != nil {
		t.Error(err)
	}

	count, err := Certificates().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testCertificateToManyCourses(t *testing.T) {
	var err error
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Certificate
	var b, c Course

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, certificateDBTypes, true, certificateColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Certificate struct: %s", err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = randomize.Struct(seed, &b, courseDBTypes, false, courseColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, courseDBTypes, false, courseColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}

	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	_, err = tx.Exec("insert into `course_requires_certificate` (`certificate_id`, `course_id`) values (?, ?)", a.ID, b.ID)
	if err != nil {
		t.Fatal(err)
	}
	_, err = tx.Exec("insert into `course_requires_certificate` (`certificate_id`, `course_id`) values (?, ?)", a.ID, c.ID)
	if err != nil {
		t.Fatal(err)
	}

	check, err := a.Courses().All(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	bFound, cFound := false, false
	for _, v := range check {
		if v.ID == b.ID {
			bFound = true
		}
		if v.ID == c.ID {
			cFound = true
		}
	}

	if !bFound {
		t.Error("expected to find b")
	}
	if !cFound {
		t.Error("expected to find c")
	}

	slice := CertificateSlice{&a}
	if err = a.L.LoadCourses(ctx, tx, false, (*[]*Certificate)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.Courses); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	a.R.Courses = nil
	if err = a.L.LoadCourses(ctx, tx, true, &a, nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.Courses); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	if t.Failed() {
		t.Logf("%#v", check)
	}
}

func testCertificateToManyAddOpCourses(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Certificate
	var b, c, d, e Course

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, certificateDBTypes, false, strmangle.SetComplement(certificatePrimaryKeyColumns, certificateColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*Course{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, courseDBTypes, false, strmangle.SetComplement(coursePrimaryKeyColumns, courseColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	foreignersSplitByInsertion := [][]*Course{
		{&b, &c},
		{&d, &e},
	}

	for i, x := range foreignersSplitByInsertion {
		err = a.AddCourses(ctx, tx, i != 0, x...)
		if err != nil {
			t.Fatal(err)
		}

		first := x[0]
		second := x[1]

		if first.R.Certificates[0] != &a {
			t.Error("relationship was not added properly to the slice")
		}
		if second.R.Certificates[0] != &a {
			t.Error("relationship was not added properly to the slice")
		}

		if a.R.Courses[i*2] != first {
			t.Error("relationship struct slice not set to correct value")
		}
		if a.R.Courses[i*2+1] != second {
			t.Error("relationship struct slice not set to correct value")
		}

		count, err := a.Courses().Count(ctx, tx)
		if err != nil {
			t.Fatal(err)
		}
		if want := int64((i + 1) * 2); count != want {
			t.Error("want", want, "got", count)
		}
	}
}

func testCertificateToManySetOpCourses(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Certificate
	var b, c, d, e Course

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, certificateDBTypes, false, strmangle.SetComplement(certificatePrimaryKeyColumns, certificateColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*Course{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, courseDBTypes, false, strmangle.SetComplement(coursePrimaryKeyColumns, courseColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err = a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	err = a.SetCourses(ctx, tx, false, &b, &c)
	if err != nil {
		t.Fatal(err)
	}

	count, err := a.Courses().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	err = a.SetCourses(ctx, tx, true, &d, &e)
	if err != nil {
		t.Fatal(err)
	}

	count, err = a.Courses().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	// The following checks cannot be implemented since we have no handle
	// to these when we call Set(). Leaving them here as wishful thinking
	// and to let people know there's dragons.
	//
	// if len(b.R.Certificates) != 0 {
	// 	t.Error("relationship was not removed properly from the slice")
	// }
	// if len(c.R.Certificates) != 0 {
	// 	t.Error("relationship was not removed properly from the slice")
	// }
	if d.R.Certificates[0] != &a {
		t.Error("relationship was not added properly to the slice")
	}
	if e.R.Certificates[0] != &a {
		t.Error("relationship was not added properly to the slice")
	}

	if a.R.Courses[0] != &d {
		t.Error("relationship struct slice not set to correct value")
	}
	if a.R.Courses[1] != &e {
		t.Error("relationship struct slice not set to correct value")
	}
}

func testCertificateToManyRemoveOpCourses(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Certificate
	var b, c, d, e Course

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, certificateDBTypes, false, strmangle.SetComplement(certificatePrimaryKeyColumns, certificateColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*Course{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, courseDBTypes, false, strmangle.SetComplement(coursePrimaryKeyColumns, courseColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	err = a.AddCourses(ctx, tx, true, foreigners...)
	if err != nil {
		t.Fatal(err)
	}

	count, err := a.Courses().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 4 {
		t.Error("count was wrong:", count)
	}

	err = a.RemoveCourses(ctx, tx, foreigners[:2]...)
	if err != nil {
		t.Fatal(err)
	}

	count, err = a.Courses().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	if len(b.R.Certificates) != 0 {
		t.Error("relationship was not removed properly from the slice")
	}
	if len(c.R.Certificates) != 0 {
		t.Error("relationship was not removed properly from the slice")
	}
	if d.R.Certificates[0] != &a {
		t.Error("relationship was not added properly to the foreign struct")
	}
	if e.R.Certificates[0] != &a {
		t.Error("relationship was not added properly to the foreign struct")
	}

	if len(a.R.Courses) != 2 {
		t.Error("should have preserved two relationships")
	}

	// Removal doesn't do a stable deletion for performance so we have to flip the order
	if a.R.Courses[1] != &d {
		t.Error("relationship to d should have been preserved")
	}
	if a.R.Courses[0] != &e {
		t.Error("relationship to e should have been preserved")
	}
}

func testCertificateToOneCourseUsingLinkedCourse(t *testing.T) {
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var local Certificate
	var foreign Course

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, certificateDBTypes, false, certificateColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Certificate struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, courseDBTypes, false, courseColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Course struct: %s", err)
	}

	if err := foreign.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	local.LinkedCourseID = foreign.ID
	if err := local.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.LinkedCourse().One(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	if check.ID != foreign.ID {
		t.Errorf("want: %v, got %v", foreign.ID, check.ID)
	}

	slice := CertificateSlice{&local}
	if err = local.L.LoadLinkedCourse(ctx, tx, false, (*[]*Certificate)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.LinkedCourse == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.LinkedCourse = nil
	if err = local.L.LoadLinkedCourse(ctx, tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.LinkedCourse == nil {
		t.Error("struct should have been eager loaded")
	}
}

func testCertificateToOneExamUsingExam(t *testing.T) {
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var local Certificate
	var foreign Exam

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, certificateDBTypes, true, certificateColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Certificate struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, examDBTypes, false, examColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Exam struct: %s", err)
	}

	if err := foreign.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	queries.Assign(&local.ExamID, foreign.ID)
	if err := local.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.Exam().One(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	if !queries.Equal(check.ID, foreign.ID) {
		t.Errorf("want: %v, got %v", foreign.ID, check.ID)
	}

	slice := CertificateSlice{&local}
	if err = local.L.LoadExam(ctx, tx, false, (*[]*Certificate)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Exam == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.Exam = nil
	if err = local.L.LoadExam(ctx, tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Exam == nil {
		t.Error("struct should have been eager loaded")
	}
}

func testCertificateToOneUserUsingUser(t *testing.T) {
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var local Certificate
	var foreign User

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, certificateDBTypes, false, certificateColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Certificate struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, userDBTypes, false, userColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize User struct: %s", err)
	}

	if err := foreign.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	local.UserID = foreign.ID
	if err := local.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.User().One(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	if check.ID != foreign.ID {
		t.Errorf("want: %v, got %v", foreign.ID, check.ID)
	}

	slice := CertificateSlice{&local}
	if err = local.L.LoadUser(ctx, tx, false, (*[]*Certificate)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.User == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.User = nil
	if err = local.L.LoadUser(ctx, tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.User == nil {
		t.Error("struct should have been eager loaded")
	}
}

func testCertificateToOneSetOpCourseUsingLinkedCourse(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Certificate
	var b, c Course

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, certificateDBTypes, false, strmangle.SetComplement(certificatePrimaryKeyColumns, certificateColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, courseDBTypes, false, strmangle.SetComplement(coursePrimaryKeyColumns, courseColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, courseDBTypes, false, strmangle.SetComplement(coursePrimaryKeyColumns, courseColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*Course{&b, &c} {
		err = a.SetLinkedCourse(ctx, tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.LinkedCourse != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.LinkedCourseCertificates[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if a.LinkedCourseID != x.ID {
			t.Error("foreign key was wrong value", a.LinkedCourseID)
		}

		zero := reflect.Zero(reflect.TypeOf(a.LinkedCourseID))
		reflect.Indirect(reflect.ValueOf(&a.LinkedCourseID)).Set(zero)

		if err = a.Reload(ctx, tx); err != nil {
			t.Fatal("failed to reload", err)
		}

		if a.LinkedCourseID != x.ID {
			t.Error("foreign key was wrong value", a.LinkedCourseID, x.ID)
		}
	}
}
func testCertificateToOneSetOpExamUsingExam(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Certificate
	var b, c Exam

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, certificateDBTypes, false, strmangle.SetComplement(certificatePrimaryKeyColumns, certificateColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, examDBTypes, false, strmangle.SetComplement(examPrimaryKeyColumns, examColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, examDBTypes, false, strmangle.SetComplement(examPrimaryKeyColumns, examColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*Exam{&b, &c} {
		err = a.SetExam(ctx, tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.Exam != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.Certificates[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if !queries.Equal(a.ExamID, x.ID) {
			t.Error("foreign key was wrong value", a.ExamID)
		}

		zero := reflect.Zero(reflect.TypeOf(a.ExamID))
		reflect.Indirect(reflect.ValueOf(&a.ExamID)).Set(zero)

		if err = a.Reload(ctx, tx); err != nil {
			t.Fatal("failed to reload", err)
		}

		if !queries.Equal(a.ExamID, x.ID) {
			t.Error("foreign key was wrong value", a.ExamID, x.ID)
		}
	}
}

func testCertificateToOneRemoveOpExamUsingExam(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Certificate
	var b Exam

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, certificateDBTypes, false, strmangle.SetComplement(certificatePrimaryKeyColumns, certificateColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, examDBTypes, false, strmangle.SetComplement(examPrimaryKeyColumns, examColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err = a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = a.SetExam(ctx, tx, true, &b); err != nil {
		t.Fatal(err)
	}

	if err = a.RemoveExam(ctx, tx, &b); err != nil {
		t.Error("failed to remove relationship")
	}

	count, err := a.Exam().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 0 {
		t.Error("want no relationships remaining")
	}

	if a.R.Exam != nil {
		t.Error("R struct entry should be nil")
	}

	if !queries.IsValuerNil(a.ExamID) {
		t.Error("foreign key value should be nil")
	}

	if len(b.R.Certificates) != 0 {
		t.Error("failed to remove a from b's relationships")
	}
}

func testCertificateToOneSetOpUserUsingUser(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Certificate
	var b, c User

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, certificateDBTypes, false, strmangle.SetComplement(certificatePrimaryKeyColumns, certificateColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, userDBTypes, false, strmangle.SetComplement(userPrimaryKeyColumns, userColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, userDBTypes, false, strmangle.SetComplement(userPrimaryKeyColumns, userColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*User{&b, &c} {
		err = a.SetUser(ctx, tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.User != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.Certificates[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if a.UserID != x.ID {
			t.Error("foreign key was wrong value", a.UserID)
		}

		zero := reflect.Zero(reflect.TypeOf(a.UserID))
		reflect.Indirect(reflect.ValueOf(&a.UserID)).Set(zero)

		if err = a.Reload(ctx, tx); err != nil {
			t.Fatal("failed to reload", err)
		}

		if a.UserID != x.ID {
			t.Error("foreign key was wrong value", a.UserID, x.ID)
		}
	}
}

func testCertificatesReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Certificate{}
	if err = randomize.Struct(seed, o, certificateDBTypes, true, certificateColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Certificate struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = o.Reload(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testCertificatesReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Certificate{}
	if err = randomize.Struct(seed, o, certificateDBTypes, true, certificateColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Certificate struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := CertificateSlice{o}

	if err = slice.ReloadAll(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testCertificatesSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Certificate{}
	if err = randomize.Struct(seed, o, certificateDBTypes, true, certificateColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Certificate struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := Certificates().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	certificateDBTypes = map[string]string{`ID`: `char`, `UserID`: `int`, `LinkedCourseID`: `int`, `ExamID`: `int`, `CreatedAt`: `timestamp`, `UpdatedAt`: `timestamp`, `DeletedAt`: `timestamp`}
	_                  = bytes.MinRead
)

func testCertificatesUpdate(t *testing.T) {
	t.Parallel()

	if 0 == len(certificatePrimaryKeyColumns) {
		t.Skip("Skipping table with no primary key columns")
	}
	if len(certificateAllColumns) == len(certificatePrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &Certificate{}
	if err = randomize.Struct(seed, o, certificateDBTypes, true, certificateColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Certificate struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Certificates().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, certificateDBTypes, true, certificatePrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize Certificate struct: %s", err)
	}

	if rowsAff, err := o.Update(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only affect one row but affected", rowsAff)
	}
}

func testCertificatesSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(certificateAllColumns) == len(certificatePrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &Certificate{}
	if err = randomize.Struct(seed, o, certificateDBTypes, true, certificateColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Certificate struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Certificates().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, certificateDBTypes, true, certificatePrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize Certificate struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(certificateAllColumns, certificatePrimaryKeyColumns) {
		fields = certificateAllColumns
	} else {
		fields = strmangle.SetComplement(
			certificateAllColumns,
			certificatePrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	typ := reflect.TypeOf(o).Elem()
	n := typ.NumField()

	updateMap := M{}
	for _, col := range fields {
		for i := 0; i < n; i++ {
			f := typ.Field(i)
			if f.Tag.Get("boil") == col {
				updateMap[col] = value.Field(i).Interface()
			}
		}
	}

	slice := CertificateSlice{o}
	if rowsAff, err := slice.UpdateAll(ctx, tx, updateMap); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("wanted one record updated but got", rowsAff)
	}
}

func testCertificatesUpsert(t *testing.T) {
	t.Parallel()

	if len(certificateAllColumns) == len(certificatePrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}
	if len(mySQLCertificateUniqueColumns) == 0 {
		t.Skip("Skipping table with no unique columns to conflict on")
	}

	seed := randomize.NewSeed()
	var err error
	// Attempt the INSERT side of an UPSERT
	o := Certificate{}
	if err = randomize.Struct(seed, &o, certificateDBTypes, false); err != nil {
		t.Errorf("Unable to randomize Certificate struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Upsert(ctx, tx, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert Certificate: %s", err)
	}

	count, err := Certificates().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}

	// Attempt the UPDATE side of an UPSERT
	if err = randomize.Struct(seed, &o, certificateDBTypes, false, certificatePrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize Certificate struct: %s", err)
	}

	if err = o.Upsert(ctx, tx, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert Certificate: %s", err)
	}

	count, err = Certificates().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}
}
