// Code generated by SQLBoiler 4.8.6 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"bytes"
	"context"
	"reflect"
	"testing"

	"github.com/volatiletech/randomize"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/strmangle"
)

var (
	// Relationships sometimes use the reflection helper queries.Equal/queries.Assign
	// so force a package dependency in case they don't.
	_ = queries.Equal
)

func testCourseHasFiles(t *testing.T) {
	t.Parallel()

	query := CourseHasFiles()

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}

func testCourseHasFilesSoftDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &CourseHasFile{}
	if err = randomize.Struct(seed, o, courseHasFileDBTypes, true, courseHasFileColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize CourseHasFile struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := o.Delete(ctx, tx, false); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := CourseHasFiles().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testCourseHasFilesQuerySoftDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &CourseHasFile{}
	if err = randomize.Struct(seed, o, courseHasFileDBTypes, true, courseHasFileColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize CourseHasFile struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := CourseHasFiles().DeleteAll(ctx, tx, false); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := CourseHasFiles().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testCourseHasFilesSliceSoftDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &CourseHasFile{}
	if err = randomize.Struct(seed, o, courseHasFileDBTypes, true, courseHasFileColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize CourseHasFile struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := CourseHasFileSlice{o}

	if rowsAff, err := slice.DeleteAll(ctx, tx, false); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := CourseHasFiles().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testCourseHasFilesDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &CourseHasFile{}
	if err = randomize.Struct(seed, o, courseHasFileDBTypes, true, courseHasFileColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize CourseHasFile struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := o.Delete(ctx, tx, true); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := CourseHasFiles().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testCourseHasFilesQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &CourseHasFile{}
	if err = randomize.Struct(seed, o, courseHasFileDBTypes, true, courseHasFileColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize CourseHasFile struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := CourseHasFiles().DeleteAll(ctx, tx, true); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := CourseHasFiles().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testCourseHasFilesSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &CourseHasFile{}
	if err = randomize.Struct(seed, o, courseHasFileDBTypes, true, courseHasFileColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize CourseHasFile struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := CourseHasFileSlice{o}

	if rowsAff, err := slice.DeleteAll(ctx, tx, true); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := CourseHasFiles().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testCourseHasFilesExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &CourseHasFile{}
	if err = randomize.Struct(seed, o, courseHasFileDBTypes, true, courseHasFileColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize CourseHasFile struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	e, err := CourseHasFileExists(ctx, tx, o.CourseID, o.FileID)
	if err != nil {
		t.Errorf("Unable to check if CourseHasFile exists: %s", err)
	}
	if !e {
		t.Errorf("Expected CourseHasFileExists to return true, but got false.")
	}
}

func testCourseHasFilesFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &CourseHasFile{}
	if err = randomize.Struct(seed, o, courseHasFileDBTypes, true, courseHasFileColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize CourseHasFile struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	courseHasFileFound, err := FindCourseHasFile(ctx, tx, o.CourseID, o.FileID)
	if err != nil {
		t.Error(err)
	}

	if courseHasFileFound == nil {
		t.Error("want a record, got nil")
	}
}

func testCourseHasFilesBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &CourseHasFile{}
	if err = randomize.Struct(seed, o, courseHasFileDBTypes, true, courseHasFileColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize CourseHasFile struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = CourseHasFiles().Bind(ctx, tx, o); err != nil {
		t.Error(err)
	}
}

func testCourseHasFilesOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &CourseHasFile{}
	if err = randomize.Struct(seed, o, courseHasFileDBTypes, true, courseHasFileColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize CourseHasFile struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if x, err := CourseHasFiles().One(ctx, tx); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testCourseHasFilesAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	courseHasFileOne := &CourseHasFile{}
	courseHasFileTwo := &CourseHasFile{}
	if err = randomize.Struct(seed, courseHasFileOne, courseHasFileDBTypes, false, courseHasFileColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize CourseHasFile struct: %s", err)
	}
	if err = randomize.Struct(seed, courseHasFileTwo, courseHasFileDBTypes, false, courseHasFileColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize CourseHasFile struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = courseHasFileOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = courseHasFileTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := CourseHasFiles().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testCourseHasFilesCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	courseHasFileOne := &CourseHasFile{}
	courseHasFileTwo := &CourseHasFile{}
	if err = randomize.Struct(seed, courseHasFileOne, courseHasFileDBTypes, false, courseHasFileColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize CourseHasFile struct: %s", err)
	}
	if err = randomize.Struct(seed, courseHasFileTwo, courseHasFileDBTypes, false, courseHasFileColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize CourseHasFile struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = courseHasFileOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = courseHasFileTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := CourseHasFiles().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}

func courseHasFileBeforeInsertHook(ctx context.Context, e boil.ContextExecutor, o *CourseHasFile) error {
	*o = CourseHasFile{}
	return nil
}

func courseHasFileAfterInsertHook(ctx context.Context, e boil.ContextExecutor, o *CourseHasFile) error {
	*o = CourseHasFile{}
	return nil
}

func courseHasFileAfterSelectHook(ctx context.Context, e boil.ContextExecutor, o *CourseHasFile) error {
	*o = CourseHasFile{}
	return nil
}

func courseHasFileBeforeUpdateHook(ctx context.Context, e boil.ContextExecutor, o *CourseHasFile) error {
	*o = CourseHasFile{}
	return nil
}

func courseHasFileAfterUpdateHook(ctx context.Context, e boil.ContextExecutor, o *CourseHasFile) error {
	*o = CourseHasFile{}
	return nil
}

func courseHasFileBeforeDeleteHook(ctx context.Context, e boil.ContextExecutor, o *CourseHasFile) error {
	*o = CourseHasFile{}
	return nil
}

func courseHasFileAfterDeleteHook(ctx context.Context, e boil.ContextExecutor, o *CourseHasFile) error {
	*o = CourseHasFile{}
	return nil
}

func courseHasFileBeforeUpsertHook(ctx context.Context, e boil.ContextExecutor, o *CourseHasFile) error {
	*o = CourseHasFile{}
	return nil
}

func courseHasFileAfterUpsertHook(ctx context.Context, e boil.ContextExecutor, o *CourseHasFile) error {
	*o = CourseHasFile{}
	return nil
}

func testCourseHasFilesHooks(t *testing.T) {
	t.Parallel()

	var err error

	ctx := context.Background()
	empty := &CourseHasFile{}
	o := &CourseHasFile{}

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, o, courseHasFileDBTypes, false); err != nil {
		t.Errorf("Unable to randomize CourseHasFile object: %s", err)
	}

	AddCourseHasFileHook(boil.BeforeInsertHook, courseHasFileBeforeInsertHook)
	if err = o.doBeforeInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeInsertHook function to empty object, but got: %#v", o)
	}
	courseHasFileBeforeInsertHooks = []CourseHasFileHook{}

	AddCourseHasFileHook(boil.AfterInsertHook, courseHasFileAfterInsertHook)
	if err = o.doAfterInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterInsertHook function to empty object, but got: %#v", o)
	}
	courseHasFileAfterInsertHooks = []CourseHasFileHook{}

	AddCourseHasFileHook(boil.AfterSelectHook, courseHasFileAfterSelectHook)
	if err = o.doAfterSelectHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterSelectHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterSelectHook function to empty object, but got: %#v", o)
	}
	courseHasFileAfterSelectHooks = []CourseHasFileHook{}

	AddCourseHasFileHook(boil.BeforeUpdateHook, courseHasFileBeforeUpdateHook)
	if err = o.doBeforeUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpdateHook function to empty object, but got: %#v", o)
	}
	courseHasFileBeforeUpdateHooks = []CourseHasFileHook{}

	AddCourseHasFileHook(boil.AfterUpdateHook, courseHasFileAfterUpdateHook)
	if err = o.doAfterUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpdateHook function to empty object, but got: %#v", o)
	}
	courseHasFileAfterUpdateHooks = []CourseHasFileHook{}

	AddCourseHasFileHook(boil.BeforeDeleteHook, courseHasFileBeforeDeleteHook)
	if err = o.doBeforeDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeDeleteHook function to empty object, but got: %#v", o)
	}
	courseHasFileBeforeDeleteHooks = []CourseHasFileHook{}

	AddCourseHasFileHook(boil.AfterDeleteHook, courseHasFileAfterDeleteHook)
	if err = o.doAfterDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterDeleteHook function to empty object, but got: %#v", o)
	}
	courseHasFileAfterDeleteHooks = []CourseHasFileHook{}

	AddCourseHasFileHook(boil.BeforeUpsertHook, courseHasFileBeforeUpsertHook)
	if err = o.doBeforeUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpsertHook function to empty object, but got: %#v", o)
	}
	courseHasFileBeforeUpsertHooks = []CourseHasFileHook{}

	AddCourseHasFileHook(boil.AfterUpsertHook, courseHasFileAfterUpsertHook)
	if err = o.doAfterUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpsertHook function to empty object, but got: %#v", o)
	}
	courseHasFileAfterUpsertHooks = []CourseHasFileHook{}
}

func testCourseHasFilesInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &CourseHasFile{}
	if err = randomize.Struct(seed, o, courseHasFileDBTypes, true, courseHasFileColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize CourseHasFile struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := CourseHasFiles().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testCourseHasFilesInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &CourseHasFile{}
	if err = randomize.Struct(seed, o, courseHasFileDBTypes, true); err != nil {
		t.Errorf("Unable to randomize CourseHasFile struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Whitelist(courseHasFileColumnsWithoutDefault...)); err != nil {
		t.Error(err)
	}

	count, err := CourseHasFiles().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testCourseHasFileToOneCourseUsingCourse(t *testing.T) {
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var local CourseHasFile
	var foreign Course

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, courseHasFileDBTypes, false, courseHasFileColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize CourseHasFile struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, courseDBTypes, false, courseColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Course struct: %s", err)
	}

	if err := foreign.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	local.CourseID = foreign.ID
	if err := local.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.Course().One(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	if check.ID != foreign.ID {
		t.Errorf("want: %v, got %v", foreign.ID, check.ID)
	}

	slice := CourseHasFileSlice{&local}
	if err = local.L.LoadCourse(ctx, tx, false, (*[]*CourseHasFile)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Course == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.Course = nil
	if err = local.L.LoadCourse(ctx, tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Course == nil {
		t.Error("struct should have been eager loaded")
	}
}

func testCourseHasFileToOneFileUsingFile(t *testing.T) {
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var local CourseHasFile
	var foreign File

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, courseHasFileDBTypes, false, courseHasFileColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize CourseHasFile struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, fileDBTypes, false, fileColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize File struct: %s", err)
	}

	if err := foreign.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	local.FileID = foreign.ID
	if err := local.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.File().One(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	if check.ID != foreign.ID {
		t.Errorf("want: %v, got %v", foreign.ID, check.ID)
	}

	slice := CourseHasFileSlice{&local}
	if err = local.L.LoadFile(ctx, tx, false, (*[]*CourseHasFile)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.File == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.File = nil
	if err = local.L.LoadFile(ctx, tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.File == nil {
		t.Error("struct should have been eager loaded")
	}
}

func testCourseHasFileToOneSetOpCourseUsingCourse(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a CourseHasFile
	var b, c Course

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, courseHasFileDBTypes, false, strmangle.SetComplement(courseHasFilePrimaryKeyColumns, courseHasFileColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, courseDBTypes, false, strmangle.SetComplement(coursePrimaryKeyColumns, courseColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, courseDBTypes, false, strmangle.SetComplement(coursePrimaryKeyColumns, courseColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*Course{&b, &c} {
		err = a.SetCourse(ctx, tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.Course != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.CourseHasFiles[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if a.CourseID != x.ID {
			t.Error("foreign key was wrong value", a.CourseID)
		}

		if exists, err := CourseHasFileExists(ctx, tx, a.CourseID, a.FileID); err != nil {
			t.Fatal(err)
		} else if !exists {
			t.Error("want 'a' to exist")
		}

	}
}
func testCourseHasFileToOneSetOpFileUsingFile(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a CourseHasFile
	var b, c File

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, courseHasFileDBTypes, false, strmangle.SetComplement(courseHasFilePrimaryKeyColumns, courseHasFileColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, fileDBTypes, false, strmangle.SetComplement(filePrimaryKeyColumns, fileColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, fileDBTypes, false, strmangle.SetComplement(filePrimaryKeyColumns, fileColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*File{&b, &c} {
		err = a.SetFile(ctx, tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.File != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.CourseHasFiles[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if a.FileID != x.ID {
			t.Error("foreign key was wrong value", a.FileID)
		}

		if exists, err := CourseHasFileExists(ctx, tx, a.CourseID, a.FileID); err != nil {
			t.Fatal(err)
		} else if !exists {
			t.Error("want 'a' to exist")
		}

	}
}

func testCourseHasFilesReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &CourseHasFile{}
	if err = randomize.Struct(seed, o, courseHasFileDBTypes, true, courseHasFileColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize CourseHasFile struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = o.Reload(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testCourseHasFilesReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &CourseHasFile{}
	if err = randomize.Struct(seed, o, courseHasFileDBTypes, true, courseHasFileColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize CourseHasFile struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := CourseHasFileSlice{o}

	if err = slice.ReloadAll(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testCourseHasFilesSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &CourseHasFile{}
	if err = randomize.Struct(seed, o, courseHasFileDBTypes, true, courseHasFileColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize CourseHasFile struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := CourseHasFiles().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	courseHasFileDBTypes = map[string]string{`CourseID`: `int`, `FileID`: `int`, `CreatedAt`: `timestamp`, `DeletedAt`: `timestamp`}
	_                    = bytes.MinRead
)

func testCourseHasFilesUpdate(t *testing.T) {
	t.Parallel()

	if 0 == len(courseHasFilePrimaryKeyColumns) {
		t.Skip("Skipping table with no primary key columns")
	}
	if len(courseHasFileAllColumns) == len(courseHasFilePrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &CourseHasFile{}
	if err = randomize.Struct(seed, o, courseHasFileDBTypes, true, courseHasFileColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize CourseHasFile struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := CourseHasFiles().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, courseHasFileDBTypes, true, courseHasFilePrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize CourseHasFile struct: %s", err)
	}

	if rowsAff, err := o.Update(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		// NOTE: it is unknown what causes this issue in learninbay24, will be ignored for now
		t.Error("should only affect one row but affected", rowsAff)
	}
}

func testCourseHasFilesSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(courseHasFileAllColumns) == len(courseHasFilePrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &CourseHasFile{}
	if err = randomize.Struct(seed, o, courseHasFileDBTypes, true, courseHasFileColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize CourseHasFile struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := CourseHasFiles().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, courseHasFileDBTypes, true, courseHasFilePrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize CourseHasFile struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(courseHasFileAllColumns, courseHasFilePrimaryKeyColumns) {
		fields = courseHasFileAllColumns
	} else {
		fields = strmangle.SetComplement(
			courseHasFileAllColumns,
			courseHasFilePrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	typ := reflect.TypeOf(o).Elem()
	n := typ.NumField()

	updateMap := M{}
	for _, col := range fields {
		for i := 0; i < n; i++ {
			f := typ.Field(i)
			if f.Tag.Get("boil") == col {
				updateMap[col] = value.Field(i).Interface()
			}
		}
	}

	slice := CourseHasFileSlice{o}
	if rowsAff, err := slice.UpdateAll(ctx, tx, updateMap); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("wanted one record updated but got", rowsAff)
	}
}

func testCourseHasFilesUpsert(t *testing.T) {
	t.Parallel()

	if len(courseHasFileAllColumns) == len(courseHasFilePrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}
	if len(mySQLCourseHasFileUniqueColumns) == 0 {
		t.Skip("Skipping table with no unique columns to conflict on")
	}

	seed := randomize.NewSeed()
	var err error
	// Attempt the INSERT side of an UPSERT
	o := CourseHasFile{}
	if err = randomize.Struct(seed, &o, courseHasFileDBTypes, false); err != nil {
		t.Errorf("Unable to randomize CourseHasFile struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Upsert(ctx, tx, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert CourseHasFile: %s", err)
	}

	count, err := CourseHasFiles().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}

	// Attempt the UPDATE side of an UPSERT
	if err = randomize.Struct(seed, &o, courseHasFileDBTypes, false, courseHasFilePrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize CourseHasFile struct: %s", err)
	}

	if err = o.Upsert(ctx, tx, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert CourseHasFile: %s", err)
	}

	count, err = CourseHasFiles().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}
}
