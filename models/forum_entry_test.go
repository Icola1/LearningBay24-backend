// Code generated by SQLBoiler 4.8.6 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"bytes"
	"context"
	"reflect"
	"testing"

	"github.com/volatiletech/randomize"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/strmangle"
)

var (
	// Relationships sometimes use the reflection helper queries.Equal/queries.Assign
	// so force a package dependency in case they don't.
	_ = queries.Equal
)

func testForumEntries(t *testing.T) {
	t.Parallel()

	query := ForumEntries()

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}

func testForumEntriesSoftDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &ForumEntry{}
	if err = randomize.Struct(seed, o, forumEntryDBTypes, true, forumEntryColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ForumEntry struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := o.Delete(ctx, tx, false); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := ForumEntries().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testForumEntriesQuerySoftDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &ForumEntry{}
	if err = randomize.Struct(seed, o, forumEntryDBTypes, true, forumEntryColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ForumEntry struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := ForumEntries().DeleteAll(ctx, tx, false); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := ForumEntries().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testForumEntriesSliceSoftDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &ForumEntry{}
	if err = randomize.Struct(seed, o, forumEntryDBTypes, true, forumEntryColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ForumEntry struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := ForumEntrySlice{o}

	if rowsAff, err := slice.DeleteAll(ctx, tx, false); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := ForumEntries().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testForumEntriesDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &ForumEntry{}
	if err = randomize.Struct(seed, o, forumEntryDBTypes, true, forumEntryColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ForumEntry struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := o.Delete(ctx, tx, true); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := ForumEntries().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testForumEntriesQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &ForumEntry{}
	if err = randomize.Struct(seed, o, forumEntryDBTypes, true, forumEntryColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ForumEntry struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := ForumEntries().DeleteAll(ctx, tx, true); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := ForumEntries().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testForumEntriesSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &ForumEntry{}
	if err = randomize.Struct(seed, o, forumEntryDBTypes, true, forumEntryColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ForumEntry struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := ForumEntrySlice{o}

	if rowsAff, err := slice.DeleteAll(ctx, tx, true); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := ForumEntries().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testForumEntriesExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &ForumEntry{}
	if err = randomize.Struct(seed, o, forumEntryDBTypes, true, forumEntryColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ForumEntry struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	e, err := ForumEntryExists(ctx, tx, o.ID)
	if err != nil {
		t.Errorf("Unable to check if ForumEntry exists: %s", err)
	}
	if !e {
		t.Errorf("Expected ForumEntryExists to return true, but got false.")
	}
}

func testForumEntriesFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &ForumEntry{}
	if err = randomize.Struct(seed, o, forumEntryDBTypes, true, forumEntryColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ForumEntry struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	forumEntryFound, err := FindForumEntry(ctx, tx, o.ID)
	if err != nil {
		t.Error(err)
	}

	if forumEntryFound == nil {
		t.Error("want a record, got nil")
	}
}

func testForumEntriesBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &ForumEntry{}
	if err = randomize.Struct(seed, o, forumEntryDBTypes, true, forumEntryColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ForumEntry struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = ForumEntries().Bind(ctx, tx, o); err != nil {
		t.Error(err)
	}
}

func testForumEntriesOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &ForumEntry{}
	if err = randomize.Struct(seed, o, forumEntryDBTypes, true, forumEntryColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ForumEntry struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if x, err := ForumEntries().One(ctx, tx); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testForumEntriesAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	forumEntryOne := &ForumEntry{}
	forumEntryTwo := &ForumEntry{}
	if err = randomize.Struct(seed, forumEntryOne, forumEntryDBTypes, false, forumEntryColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ForumEntry struct: %s", err)
	}
	if err = randomize.Struct(seed, forumEntryTwo, forumEntryDBTypes, false, forumEntryColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ForumEntry struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = forumEntryOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = forumEntryTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := ForumEntries().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testForumEntriesCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	forumEntryOne := &ForumEntry{}
	forumEntryTwo := &ForumEntry{}
	if err = randomize.Struct(seed, forumEntryOne, forumEntryDBTypes, false, forumEntryColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ForumEntry struct: %s", err)
	}
	if err = randomize.Struct(seed, forumEntryTwo, forumEntryDBTypes, false, forumEntryColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ForumEntry struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = forumEntryOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = forumEntryTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := ForumEntries().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}

func forumEntryBeforeInsertHook(ctx context.Context, e boil.ContextExecutor, o *ForumEntry) error {
	*o = ForumEntry{}
	return nil
}

func forumEntryAfterInsertHook(ctx context.Context, e boil.ContextExecutor, o *ForumEntry) error {
	*o = ForumEntry{}
	return nil
}

func forumEntryAfterSelectHook(ctx context.Context, e boil.ContextExecutor, o *ForumEntry) error {
	*o = ForumEntry{}
	return nil
}

func forumEntryBeforeUpdateHook(ctx context.Context, e boil.ContextExecutor, o *ForumEntry) error {
	*o = ForumEntry{}
	return nil
}

func forumEntryAfterUpdateHook(ctx context.Context, e boil.ContextExecutor, o *ForumEntry) error {
	*o = ForumEntry{}
	return nil
}

func forumEntryBeforeDeleteHook(ctx context.Context, e boil.ContextExecutor, o *ForumEntry) error {
	*o = ForumEntry{}
	return nil
}

func forumEntryAfterDeleteHook(ctx context.Context, e boil.ContextExecutor, o *ForumEntry) error {
	*o = ForumEntry{}
	return nil
}

func forumEntryBeforeUpsertHook(ctx context.Context, e boil.ContextExecutor, o *ForumEntry) error {
	*o = ForumEntry{}
	return nil
}

func forumEntryAfterUpsertHook(ctx context.Context, e boil.ContextExecutor, o *ForumEntry) error {
	*o = ForumEntry{}
	return nil
}

func testForumEntriesHooks(t *testing.T) {
	t.Parallel()

	var err error

	ctx := context.Background()
	empty := &ForumEntry{}
	o := &ForumEntry{}

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, o, forumEntryDBTypes, false); err != nil {
		t.Errorf("Unable to randomize ForumEntry object: %s", err)
	}

	AddForumEntryHook(boil.BeforeInsertHook, forumEntryBeforeInsertHook)
	if err = o.doBeforeInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeInsertHook function to empty object, but got: %#v", o)
	}
	forumEntryBeforeInsertHooks = []ForumEntryHook{}

	AddForumEntryHook(boil.AfterInsertHook, forumEntryAfterInsertHook)
	if err = o.doAfterInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterInsertHook function to empty object, but got: %#v", o)
	}
	forumEntryAfterInsertHooks = []ForumEntryHook{}

	AddForumEntryHook(boil.AfterSelectHook, forumEntryAfterSelectHook)
	if err = o.doAfterSelectHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterSelectHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterSelectHook function to empty object, but got: %#v", o)
	}
	forumEntryAfterSelectHooks = []ForumEntryHook{}

	AddForumEntryHook(boil.BeforeUpdateHook, forumEntryBeforeUpdateHook)
	if err = o.doBeforeUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpdateHook function to empty object, but got: %#v", o)
	}
	forumEntryBeforeUpdateHooks = []ForumEntryHook{}

	AddForumEntryHook(boil.AfterUpdateHook, forumEntryAfterUpdateHook)
	if err = o.doAfterUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpdateHook function to empty object, but got: %#v", o)
	}
	forumEntryAfterUpdateHooks = []ForumEntryHook{}

	AddForumEntryHook(boil.BeforeDeleteHook, forumEntryBeforeDeleteHook)
	if err = o.doBeforeDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeDeleteHook function to empty object, but got: %#v", o)
	}
	forumEntryBeforeDeleteHooks = []ForumEntryHook{}

	AddForumEntryHook(boil.AfterDeleteHook, forumEntryAfterDeleteHook)
	if err = o.doAfterDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterDeleteHook function to empty object, but got: %#v", o)
	}
	forumEntryAfterDeleteHooks = []ForumEntryHook{}

	AddForumEntryHook(boil.BeforeUpsertHook, forumEntryBeforeUpsertHook)
	if err = o.doBeforeUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpsertHook function to empty object, but got: %#v", o)
	}
	forumEntryBeforeUpsertHooks = []ForumEntryHook{}

	AddForumEntryHook(boil.AfterUpsertHook, forumEntryAfterUpsertHook)
	if err = o.doAfterUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpsertHook function to empty object, but got: %#v", o)
	}
	forumEntryAfterUpsertHooks = []ForumEntryHook{}
}

func testForumEntriesInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &ForumEntry{}
	if err = randomize.Struct(seed, o, forumEntryDBTypes, true, forumEntryColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ForumEntry struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := ForumEntries().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testForumEntriesInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &ForumEntry{}
	if err = randomize.Struct(seed, o, forumEntryDBTypes, true); err != nil {
		t.Errorf("Unable to randomize ForumEntry struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Whitelist(forumEntryColumnsWithoutDefault...)); err != nil {
		t.Error(err)
	}

	count, err := ForumEntries().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testForumEntryToManyInReplyToForumEntries(t *testing.T) {
	var err error
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a ForumEntry
	var b, c ForumEntry

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, forumEntryDBTypes, true, forumEntryColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ForumEntry struct: %s", err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = randomize.Struct(seed, &b, forumEntryDBTypes, false, forumEntryColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, forumEntryDBTypes, false, forumEntryColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}

	queries.Assign(&b.InReplyTo, a.ID)
	queries.Assign(&c.InReplyTo, a.ID)
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := a.InReplyToForumEntries().All(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	bFound, cFound := false, false
	for _, v := range check {
		if queries.Equal(v.InReplyTo, b.InReplyTo) {
			bFound = true
		}
		if queries.Equal(v.InReplyTo, c.InReplyTo) {
			cFound = true
		}
	}

	if !bFound {
		t.Error("expected to find b")
	}
	if !cFound {
		t.Error("expected to find c")
	}

	slice := ForumEntrySlice{&a}
	if err = a.L.LoadInReplyToForumEntries(ctx, tx, false, (*[]*ForumEntry)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.InReplyToForumEntries); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	a.R.InReplyToForumEntries = nil
	if err = a.L.LoadInReplyToForumEntries(ctx, tx, true, &a, nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.InReplyToForumEntries); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	if t.Failed() {
		t.Logf("%#v", check)
	}
}

func testForumEntryToManyAddOpInReplyToForumEntries(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a ForumEntry
	var b, c, d, e ForumEntry

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, forumEntryDBTypes, false, strmangle.SetComplement(forumEntryPrimaryKeyColumns, forumEntryColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*ForumEntry{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, forumEntryDBTypes, false, strmangle.SetComplement(forumEntryPrimaryKeyColumns, forumEntryColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	foreignersSplitByInsertion := [][]*ForumEntry{
		{&b, &c},
		{&d, &e},
	}

	for i, x := range foreignersSplitByInsertion {
		err = a.AddInReplyToForumEntries(ctx, tx, i != 0, x...)
		if err != nil {
			t.Fatal(err)
		}

		first := x[0]
		second := x[1]

		if !queries.Equal(a.ID, first.InReplyTo) {
			t.Error("foreign key was wrong value", a.ID, first.InReplyTo)
		}
		if !queries.Equal(a.ID, second.InReplyTo) {
			t.Error("foreign key was wrong value", a.ID, second.InReplyTo)
		}

		if first.R.InReplyToForumEntry != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}
		if second.R.InReplyToForumEntry != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}

		if a.R.InReplyToForumEntries[i*2] != first {
			t.Error("relationship struct slice not set to correct value")
		}
		if a.R.InReplyToForumEntries[i*2+1] != second {
			t.Error("relationship struct slice not set to correct value")
		}

		count, err := a.InReplyToForumEntries().Count(ctx, tx)
		if err != nil {
			t.Fatal(err)
		}
		if want := int64((i + 1) * 2); count != want {
			t.Error("want", want, "got", count)
		}
	}
}

func testForumEntryToManySetOpInReplyToForumEntries(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a ForumEntry
	var b, c, d, e ForumEntry

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, forumEntryDBTypes, false, strmangle.SetComplement(forumEntryPrimaryKeyColumns, forumEntryColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*ForumEntry{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, forumEntryDBTypes, false, strmangle.SetComplement(forumEntryPrimaryKeyColumns, forumEntryColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err = a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	err = a.SetInReplyToForumEntries(ctx, tx, false, &b, &c)
	if err != nil {
		t.Fatal(err)
	}

	count, err := a.InReplyToForumEntries().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	err = a.SetInReplyToForumEntries(ctx, tx, true, &d, &e)
	if err != nil {
		t.Fatal(err)
	}

	count, err = a.InReplyToForumEntries().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	if !queries.IsValuerNil(b.InReplyTo) {
		t.Error("want b's foreign key value to be nil")
	}
	if !queries.IsValuerNil(c.InReplyTo) {
		t.Error("want c's foreign key value to be nil")
	}
	if !queries.Equal(a.ID, d.InReplyTo) {
		t.Error("foreign key was wrong value", a.ID, d.InReplyTo)
	}
	if !queries.Equal(a.ID, e.InReplyTo) {
		t.Error("foreign key was wrong value", a.ID, e.InReplyTo)
	}

	if b.R.InReplyToForumEntry != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if c.R.InReplyToForumEntry != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if d.R.InReplyToForumEntry != &a {
		t.Error("relationship was not added properly to the foreign struct")
	}
	if e.R.InReplyToForumEntry != &a {
		t.Error("relationship was not added properly to the foreign struct")
	}

	if a.R.InReplyToForumEntries[0] != &d {
		t.Error("relationship struct slice not set to correct value")
	}
	if a.R.InReplyToForumEntries[1] != &e {
		t.Error("relationship struct slice not set to correct value")
	}
}

func testForumEntryToManyRemoveOpInReplyToForumEntries(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a ForumEntry
	var b, c, d, e ForumEntry

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, forumEntryDBTypes, false, strmangle.SetComplement(forumEntryPrimaryKeyColumns, forumEntryColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*ForumEntry{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, forumEntryDBTypes, false, strmangle.SetComplement(forumEntryPrimaryKeyColumns, forumEntryColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	err = a.AddInReplyToForumEntries(ctx, tx, true, foreigners...)
	if err != nil {
		t.Fatal(err)
	}

	count, err := a.InReplyToForumEntries().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 4 {
		t.Error("count was wrong:", count)
	}

	err = a.RemoveInReplyToForumEntries(ctx, tx, foreigners[:2]...)
	if err != nil {
		t.Fatal(err)
	}

	count, err = a.InReplyToForumEntries().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	if !queries.IsValuerNil(b.InReplyTo) {
		t.Error("want b's foreign key value to be nil")
	}
	if !queries.IsValuerNil(c.InReplyTo) {
		t.Error("want c's foreign key value to be nil")
	}

	if b.R.InReplyToForumEntry != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if c.R.InReplyToForumEntry != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if d.R.InReplyToForumEntry != &a {
		t.Error("relationship to a should have been preserved")
	}
	if e.R.InReplyToForumEntry != &a {
		t.Error("relationship to a should have been preserved")
	}

	if len(a.R.InReplyToForumEntries) != 2 {
		t.Error("should have preserved two relationships")
	}

	// Removal doesn't do a stable deletion for performance so we have to flip the order
	if a.R.InReplyToForumEntries[1] != &d {
		t.Error("relationship to d should have been preserved")
	}
	if a.R.InReplyToForumEntries[0] != &e {
		t.Error("relationship to e should have been preserved")
	}
}

func testForumEntryToOneForumUsingForum(t *testing.T) {
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var local ForumEntry
	var foreign Forum

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, forumEntryDBTypes, false, forumEntryColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ForumEntry struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, forumDBTypes, false, forumColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Forum struct: %s", err)
	}

	if err := foreign.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	local.ForumID = foreign.ID
	if err := local.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.Forum().One(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	if check.ID != foreign.ID {
		t.Errorf("want: %v, got %v", foreign.ID, check.ID)
	}

	slice := ForumEntrySlice{&local}
	if err = local.L.LoadForum(ctx, tx, false, (*[]*ForumEntry)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Forum == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.Forum = nil
	if err = local.L.LoadForum(ctx, tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Forum == nil {
		t.Error("struct should have been eager loaded")
	}
}

func testForumEntryToOneForumEntryUsingInReplyToForumEntry(t *testing.T) {
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var local ForumEntry
	var foreign ForumEntry

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, forumEntryDBTypes, true, forumEntryColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ForumEntry struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, forumEntryDBTypes, false, forumEntryColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ForumEntry struct: %s", err)
	}

	if err := foreign.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	queries.Assign(&local.InReplyTo, foreign.ID)
	if err := local.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.InReplyToForumEntry().One(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	if !queries.Equal(check.ID, foreign.ID) {
		t.Errorf("want: %v, got %v", foreign.ID, check.ID)
	}

	slice := ForumEntrySlice{&local}
	if err = local.L.LoadInReplyToForumEntry(ctx, tx, false, (*[]*ForumEntry)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.InReplyToForumEntry == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.InReplyToForumEntry = nil
	if err = local.L.LoadInReplyToForumEntry(ctx, tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.InReplyToForumEntry == nil {
		t.Error("struct should have been eager loaded")
	}
}

func testForumEntryToOneUserUsingAuthor(t *testing.T) {
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var local ForumEntry
	var foreign User

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, forumEntryDBTypes, false, forumEntryColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ForumEntry struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, userDBTypes, false, userColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize User struct: %s", err)
	}

	if err := foreign.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	local.AuthorID = foreign.ID
	if err := local.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.Author().One(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	if check.ID != foreign.ID {
		t.Errorf("want: %v, got %v", foreign.ID, check.ID)
	}

	slice := ForumEntrySlice{&local}
	if err = local.L.LoadAuthor(ctx, tx, false, (*[]*ForumEntry)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Author == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.Author = nil
	if err = local.L.LoadAuthor(ctx, tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Author == nil {
		t.Error("struct should have been eager loaded")
	}
}

func testForumEntryToOneSetOpForumUsingForum(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a ForumEntry
	var b, c Forum

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, forumEntryDBTypes, false, strmangle.SetComplement(forumEntryPrimaryKeyColumns, forumEntryColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, forumDBTypes, false, strmangle.SetComplement(forumPrimaryKeyColumns, forumColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, forumDBTypes, false, strmangle.SetComplement(forumPrimaryKeyColumns, forumColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*Forum{&b, &c} {
		err = a.SetForum(ctx, tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.Forum != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.ForumEntries[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if a.ForumID != x.ID {
			t.Error("foreign key was wrong value", a.ForumID)
		}

		zero := reflect.Zero(reflect.TypeOf(a.ForumID))
		reflect.Indirect(reflect.ValueOf(&a.ForumID)).Set(zero)

		if err = a.Reload(ctx, tx); err != nil {
			t.Fatal("failed to reload", err)
		}

		if a.ForumID != x.ID {
			t.Error("foreign key was wrong value", a.ForumID, x.ID)
		}
	}
}
func testForumEntryToOneSetOpForumEntryUsingInReplyToForumEntry(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a ForumEntry
	var b, c ForumEntry

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, forumEntryDBTypes, false, strmangle.SetComplement(forumEntryPrimaryKeyColumns, forumEntryColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, forumEntryDBTypes, false, strmangle.SetComplement(forumEntryPrimaryKeyColumns, forumEntryColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, forumEntryDBTypes, false, strmangle.SetComplement(forumEntryPrimaryKeyColumns, forumEntryColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*ForumEntry{&b, &c} {
		err = a.SetInReplyToForumEntry(ctx, tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.InReplyToForumEntry != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.InReplyToForumEntries[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if !queries.Equal(a.InReplyTo, x.ID) {
			t.Error("foreign key was wrong value", a.InReplyTo)
		}

		zero := reflect.Zero(reflect.TypeOf(a.InReplyTo))
		reflect.Indirect(reflect.ValueOf(&a.InReplyTo)).Set(zero)

		if err = a.Reload(ctx, tx); err != nil {
			t.Fatal("failed to reload", err)
		}

		if !queries.Equal(a.InReplyTo, x.ID) {
			t.Error("foreign key was wrong value", a.InReplyTo, x.ID)
		}
	}
}

func testForumEntryToOneRemoveOpForumEntryUsingInReplyToForumEntry(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a ForumEntry
	var b ForumEntry

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, forumEntryDBTypes, false, strmangle.SetComplement(forumEntryPrimaryKeyColumns, forumEntryColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, forumEntryDBTypes, false, strmangle.SetComplement(forumEntryPrimaryKeyColumns, forumEntryColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err = a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = a.SetInReplyToForumEntry(ctx, tx, true, &b); err != nil {
		t.Fatal(err)
	}

	if err = a.RemoveInReplyToForumEntry(ctx, tx, &b); err != nil {
		t.Error("failed to remove relationship")
	}

	count, err := a.InReplyToForumEntry().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 0 {
		t.Error("want no relationships remaining")
	}

	if a.R.InReplyToForumEntry != nil {
		t.Error("R struct entry should be nil")
	}

	if !queries.IsValuerNil(a.InReplyTo) {
		t.Error("foreign key value should be nil")
	}

	if len(b.R.InReplyToForumEntries) != 0 {
		t.Error("failed to remove a from b's relationships")
	}
}

func testForumEntryToOneSetOpUserUsingAuthor(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a ForumEntry
	var b, c User

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, forumEntryDBTypes, false, strmangle.SetComplement(forumEntryPrimaryKeyColumns, forumEntryColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, userDBTypes, false, strmangle.SetComplement(userPrimaryKeyColumns, userColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, userDBTypes, false, strmangle.SetComplement(userPrimaryKeyColumns, userColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*User{&b, &c} {
		err = a.SetAuthor(ctx, tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.Author != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.AuthorForumEntries[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if a.AuthorID != x.ID {
			t.Error("foreign key was wrong value", a.AuthorID)
		}

		zero := reflect.Zero(reflect.TypeOf(a.AuthorID))
		reflect.Indirect(reflect.ValueOf(&a.AuthorID)).Set(zero)

		if err = a.Reload(ctx, tx); err != nil {
			t.Fatal("failed to reload", err)
		}

		if a.AuthorID != x.ID {
			t.Error("foreign key was wrong value", a.AuthorID, x.ID)
		}
	}
}

func testForumEntriesReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &ForumEntry{}
	if err = randomize.Struct(seed, o, forumEntryDBTypes, true, forumEntryColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ForumEntry struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = o.Reload(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testForumEntriesReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &ForumEntry{}
	if err = randomize.Struct(seed, o, forumEntryDBTypes, true, forumEntryColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ForumEntry struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := ForumEntrySlice{o}

	if err = slice.ReloadAll(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testForumEntriesSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &ForumEntry{}
	if err = randomize.Struct(seed, o, forumEntryDBTypes, true, forumEntryColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ForumEntry struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := ForumEntries().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	forumEntryDBTypes = map[string]string{`ID`: `int`, `Subject`: `varchar`, `Content`: `varchar`, `InReplyTo`: `int`, `AuthorID`: `int`, `ForumID`: `int`, `CreatedAt`: `timestamp`, `UpdatedAt`: `timestamp`, `DeletedAt`: `timestamp`}
	_                 = bytes.MinRead
)

func testForumEntriesUpdate(t *testing.T) {
	t.Parallel()

	if 0 == len(forumEntryPrimaryKeyColumns) {
		t.Skip("Skipping table with no primary key columns")
	}
	if len(forumEntryAllColumns) == len(forumEntryPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &ForumEntry{}
	if err = randomize.Struct(seed, o, forumEntryDBTypes, true, forumEntryColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ForumEntry struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := ForumEntries().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, forumEntryDBTypes, true, forumEntryPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize ForumEntry struct: %s", err)
	}

	if rowsAff, err := o.Update(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only affect one row but affected", rowsAff)
	}
}

func testForumEntriesSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(forumEntryAllColumns) == len(forumEntryPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &ForumEntry{}
	if err = randomize.Struct(seed, o, forumEntryDBTypes, true, forumEntryColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ForumEntry struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := ForumEntries().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, forumEntryDBTypes, true, forumEntryPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize ForumEntry struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(forumEntryAllColumns, forumEntryPrimaryKeyColumns) {
		fields = forumEntryAllColumns
	} else {
		fields = strmangle.SetComplement(
			forumEntryAllColumns,
			forumEntryPrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	typ := reflect.TypeOf(o).Elem()
	n := typ.NumField()

	updateMap := M{}
	for _, col := range fields {
		for i := 0; i < n; i++ {
			f := typ.Field(i)
			if f.Tag.Get("boil") == col {
				updateMap[col] = value.Field(i).Interface()
			}
		}
	}

	slice := ForumEntrySlice{o}
	if rowsAff, err := slice.UpdateAll(ctx, tx, updateMap); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("wanted one record updated but got", rowsAff)
	}
}

func testForumEntriesUpsert(t *testing.T) {
	t.Parallel()

	if len(forumEntryAllColumns) == len(forumEntryPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}
	if len(mySQLForumEntryUniqueColumns) == 0 {
		t.Skip("Skipping table with no unique columns to conflict on")
	}

	seed := randomize.NewSeed()
	var err error
	// Attempt the INSERT side of an UPSERT
	o := ForumEntry{}
	if err = randomize.Struct(seed, &o, forumEntryDBTypes, false); err != nil {
		t.Errorf("Unable to randomize ForumEntry struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Upsert(ctx, tx, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert ForumEntry: %s", err)
	}

	count, err := ForumEntries().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}

	// Attempt the UPDATE side of an UPSERT
	if err = randomize.Struct(seed, &o, forumEntryDBTypes, false, forumEntryPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize ForumEntry struct: %s", err)
	}

	if err = o.Upsert(ctx, tx, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert ForumEntry: %s", err)
	}

	count, err = ForumEntries().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}
}
