// Code generated by SQLBoiler 4.8.6 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"bytes"
	"context"
	"reflect"
	"testing"

	"github.com/volatiletech/randomize"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/strmangle"
)

var (
	// Relationships sometimes use the reflection helper queries.Equal/queries.Assign
	// so force a package dependency in case they don't.
	_ = queries.Equal
)

func testCourses(t *testing.T) {
	t.Parallel()

	query := Courses()

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}

func testCoursesSoftDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Course{}
	if err = randomize.Struct(seed, o, courseDBTypes, true, courseColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Course struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := o.Delete(ctx, tx, false); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := Courses().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testCoursesQuerySoftDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Course{}
	if err = randomize.Struct(seed, o, courseDBTypes, true, courseColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Course struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := Courses().DeleteAll(ctx, tx, false); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := Courses().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testCoursesSliceSoftDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Course{}
	if err = randomize.Struct(seed, o, courseDBTypes, true, courseColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Course struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := CourseSlice{o}

	if rowsAff, err := slice.DeleteAll(ctx, tx, false); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := Courses().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testCoursesDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Course{}
	if err = randomize.Struct(seed, o, courseDBTypes, true, courseColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Course struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := o.Delete(ctx, tx, true); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := Courses().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testCoursesQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Course{}
	if err = randomize.Struct(seed, o, courseDBTypes, true, courseColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Course struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := Courses().DeleteAll(ctx, tx, true); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := Courses().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testCoursesSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Course{}
	if err = randomize.Struct(seed, o, courseDBTypes, true, courseColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Course struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := CourseSlice{o}

	if rowsAff, err := slice.DeleteAll(ctx, tx, true); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := Courses().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testCoursesExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Course{}
	if err = randomize.Struct(seed, o, courseDBTypes, true, courseColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Course struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	e, err := CourseExists(ctx, tx, o.ID)
	if err != nil {
		t.Errorf("Unable to check if Course exists: %s", err)
	}
	if !e {
		t.Errorf("Expected CourseExists to return true, but got false.")
	}
}

func testCoursesFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Course{}
	if err = randomize.Struct(seed, o, courseDBTypes, true, courseColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Course struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	courseFound, err := FindCourse(ctx, tx, o.ID)
	if err != nil {
		t.Error(err)
	}

	if courseFound == nil {
		t.Error("want a record, got nil")
	}
}

func testCoursesBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Course{}
	if err = randomize.Struct(seed, o, courseDBTypes, true, courseColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Course struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = Courses().Bind(ctx, tx, o); err != nil {
		t.Error(err)
	}
}

func testCoursesOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Course{}
	if err = randomize.Struct(seed, o, courseDBTypes, true, courseColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Course struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if x, err := Courses().One(ctx, tx); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testCoursesAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	courseOne := &Course{}
	courseTwo := &Course{}
	if err = randomize.Struct(seed, courseOne, courseDBTypes, false, courseColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Course struct: %s", err)
	}
	if err = randomize.Struct(seed, courseTwo, courseDBTypes, false, courseColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Course struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = courseOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = courseTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := Courses().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testCoursesCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	courseOne := &Course{}
	courseTwo := &Course{}
	if err = randomize.Struct(seed, courseOne, courseDBTypes, false, courseColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Course struct: %s", err)
	}
	if err = randomize.Struct(seed, courseTwo, courseDBTypes, false, courseColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Course struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = courseOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = courseTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Courses().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}

func courseBeforeInsertHook(ctx context.Context, e boil.ContextExecutor, o *Course) error {
	*o = Course{}
	return nil
}

func courseAfterInsertHook(ctx context.Context, e boil.ContextExecutor, o *Course) error {
	*o = Course{}
	return nil
}

func courseAfterSelectHook(ctx context.Context, e boil.ContextExecutor, o *Course) error {
	*o = Course{}
	return nil
}

func courseBeforeUpdateHook(ctx context.Context, e boil.ContextExecutor, o *Course) error {
	*o = Course{}
	return nil
}

func courseAfterUpdateHook(ctx context.Context, e boil.ContextExecutor, o *Course) error {
	*o = Course{}
	return nil
}

func courseBeforeDeleteHook(ctx context.Context, e boil.ContextExecutor, o *Course) error {
	*o = Course{}
	return nil
}

func courseAfterDeleteHook(ctx context.Context, e boil.ContextExecutor, o *Course) error {
	*o = Course{}
	return nil
}

func courseBeforeUpsertHook(ctx context.Context, e boil.ContextExecutor, o *Course) error {
	*o = Course{}
	return nil
}

func courseAfterUpsertHook(ctx context.Context, e boil.ContextExecutor, o *Course) error {
	*o = Course{}
	return nil
}

func testCoursesHooks(t *testing.T) {
	t.Parallel()

	var err error

	ctx := context.Background()
	empty := &Course{}
	o := &Course{}

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, o, courseDBTypes, false); err != nil {
		t.Errorf("Unable to randomize Course object: %s", err)
	}

	AddCourseHook(boil.BeforeInsertHook, courseBeforeInsertHook)
	if err = o.doBeforeInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeInsertHook function to empty object, but got: %#v", o)
	}
	courseBeforeInsertHooks = []CourseHook{}

	AddCourseHook(boil.AfterInsertHook, courseAfterInsertHook)
	if err = o.doAfterInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterInsertHook function to empty object, but got: %#v", o)
	}
	courseAfterInsertHooks = []CourseHook{}

	AddCourseHook(boil.AfterSelectHook, courseAfterSelectHook)
	if err = o.doAfterSelectHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterSelectHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterSelectHook function to empty object, but got: %#v", o)
	}
	courseAfterSelectHooks = []CourseHook{}

	AddCourseHook(boil.BeforeUpdateHook, courseBeforeUpdateHook)
	if err = o.doBeforeUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpdateHook function to empty object, but got: %#v", o)
	}
	courseBeforeUpdateHooks = []CourseHook{}

	AddCourseHook(boil.AfterUpdateHook, courseAfterUpdateHook)
	if err = o.doAfterUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpdateHook function to empty object, but got: %#v", o)
	}
	courseAfterUpdateHooks = []CourseHook{}

	AddCourseHook(boil.BeforeDeleteHook, courseBeforeDeleteHook)
	if err = o.doBeforeDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeDeleteHook function to empty object, but got: %#v", o)
	}
	courseBeforeDeleteHooks = []CourseHook{}

	AddCourseHook(boil.AfterDeleteHook, courseAfterDeleteHook)
	if err = o.doAfterDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterDeleteHook function to empty object, but got: %#v", o)
	}
	courseAfterDeleteHooks = []CourseHook{}

	AddCourseHook(boil.BeforeUpsertHook, courseBeforeUpsertHook)
	if err = o.doBeforeUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpsertHook function to empty object, but got: %#v", o)
	}
	courseBeforeUpsertHooks = []CourseHook{}

	AddCourseHook(boil.AfterUpsertHook, courseAfterUpsertHook)
	if err = o.doAfterUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpsertHook function to empty object, but got: %#v", o)
	}
	courseAfterUpsertHooks = []CourseHook{}
}

func testCoursesInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Course{}
	if err = randomize.Struct(seed, o, courseDBTypes, true, courseColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Course struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Courses().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testCoursesInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Course{}
	if err = randomize.Struct(seed, o, courseDBTypes, true); err != nil {
		t.Errorf("Unable to randomize Course struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Whitelist(courseColumnsWithoutDefault...)); err != nil {
		t.Error(err)
	}

	count, err := Courses().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testCourseToManyAppointments(t *testing.T) {
	var err error
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Course
	var b, c Appointment

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, courseDBTypes, true, courseColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Course struct: %s", err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = randomize.Struct(seed, &b, appointmentDBTypes, false, appointmentColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, appointmentDBTypes, false, appointmentColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}

	b.CourseID = a.ID
	c.CourseID = a.ID

	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := a.Appointments().All(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	bFound, cFound := false, false
	for _, v := range check {
		if v.CourseID == b.CourseID {
			bFound = true
		}
		if v.CourseID == c.CourseID {
			cFound = true
		}
	}

	if !bFound {
		t.Error("expected to find b")
	}
	if !cFound {
		t.Error("expected to find c")
	}

	slice := CourseSlice{&a}
	if err = a.L.LoadAppointments(ctx, tx, false, (*[]*Course)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.Appointments); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	a.R.Appointments = nil
	if err = a.L.LoadAppointments(ctx, tx, true, &a, nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.Appointments); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	if t.Failed() {
		t.Logf("%#v", check)
	}
}

func testCourseToManyLinkedCourseCertificates(t *testing.T) {
	var err error
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Course
	var b, c Certificate

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, courseDBTypes, true, courseColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Course struct: %s", err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = randomize.Struct(seed, &b, certificateDBTypes, false, certificateColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, certificateDBTypes, false, certificateColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}

	b.LinkedCourseID = a.ID
	c.LinkedCourseID = a.ID

	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := a.LinkedCourseCertificates().All(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	bFound, cFound := false, false
	for _, v := range check {
		if v.LinkedCourseID == b.LinkedCourseID {
			bFound = true
		}
		if v.LinkedCourseID == c.LinkedCourseID {
			cFound = true
		}
	}

	if !bFound {
		t.Error("expected to find b")
	}
	if !cFound {
		t.Error("expected to find c")
	}

	slice := CourseSlice{&a}
	if err = a.L.LoadLinkedCourseCertificates(ctx, tx, false, (*[]*Course)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.LinkedCourseCertificates); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	a.R.LinkedCourseCertificates = nil
	if err = a.L.LoadLinkedCourseCertificates(ctx, tx, true, &a, nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.LinkedCourseCertificates); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	if t.Failed() {
		t.Logf("%#v", check)
	}
}

func testCourseToManyCourseHasFiles(t *testing.T) {
	var err error
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Course
	var b, c CourseHasFile

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, courseDBTypes, true, courseColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Course struct: %s", err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = randomize.Struct(seed, &b, courseHasFileDBTypes, false, courseHasFileColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, courseHasFileDBTypes, false, courseHasFileColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}

	b.CourseID = a.ID
	c.CourseID = a.ID

	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := a.CourseHasFiles().All(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	bFound, cFound := false, false
	for _, v := range check {
		if v.CourseID == b.CourseID {
			bFound = true
		}
		if v.CourseID == c.CourseID {
			cFound = true
		}
	}

	if !bFound {
		t.Error("expected to find b")
	}
	if !cFound {
		t.Error("expected to find c")
	}

	slice := CourseSlice{&a}
	if err = a.L.LoadCourseHasFiles(ctx, tx, false, (*[]*Course)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.CourseHasFiles); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	a.R.CourseHasFiles = nil
	if err = a.L.LoadCourseHasFiles(ctx, tx, true, &a, nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.CourseHasFiles); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	if t.Failed() {
		t.Logf("%#v", check)
	}
}

func testCourseToManyCertificates(t *testing.T) {
	var err error
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Course
	var b, c Certificate

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, courseDBTypes, true, courseColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Course struct: %s", err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = randomize.Struct(seed, &b, certificateDBTypes, false, certificateColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, certificateDBTypes, false, certificateColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}

	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	_, err = tx.Exec("insert into `course_requires_certificate` (`course_id`, `certificate_id`) values (?, ?)", a.ID, b.ID)
	if err != nil {
		t.Fatal(err)
	}
	_, err = tx.Exec("insert into `course_requires_certificate` (`course_id`, `certificate_id`) values (?, ?)", a.ID, c.ID)
	if err != nil {
		t.Fatal(err)
	}

	check, err := a.Certificates().All(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	bFound, cFound := false, false
	for _, v := range check {
		if v.ID == b.ID {
			bFound = true
		}
		if v.ID == c.ID {
			cFound = true
		}
	}

	if !bFound {
		t.Error("expected to find b")
	}
	if !cFound {
		t.Error("expected to find c")
	}

	slice := CourseSlice{&a}
	if err = a.L.LoadCertificates(ctx, tx, false, (*[]*Course)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.Certificates); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	a.R.Certificates = nil
	if err = a.L.LoadCertificates(ctx, tx, true, &a, nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.Certificates); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	if t.Failed() {
		t.Logf("%#v", check)
	}
}

func testCourseToManyDirectories(t *testing.T) {
	var err error
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Course
	var b, c Directory

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, courseDBTypes, true, courseColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Course struct: %s", err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = randomize.Struct(seed, &b, directoryDBTypes, false, directoryColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, directoryDBTypes, false, directoryColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}

	b.CourseID = a.ID
	c.CourseID = a.ID

	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := a.Directories().All(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	bFound, cFound := false, false
	for _, v := range check {
		if v.CourseID == b.CourseID {
			bFound = true
		}
		if v.CourseID == c.CourseID {
			cFound = true
		}
	}

	if !bFound {
		t.Error("expected to find b")
	}
	if !cFound {
		t.Error("expected to find c")
	}

	slice := CourseSlice{&a}
	if err = a.L.LoadDirectories(ctx, tx, false, (*[]*Course)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.Directories); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	a.R.Directories = nil
	if err = a.L.LoadDirectories(ctx, tx, true, &a, nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.Directories); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	if t.Failed() {
		t.Logf("%#v", check)
	}
}

func testCourseToManyExams(t *testing.T) {
	var err error
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Course
	var b, c Exam

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, courseDBTypes, true, courseColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Course struct: %s", err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = randomize.Struct(seed, &b, examDBTypes, false, examColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, examDBTypes, false, examColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}

	b.CourseID = a.ID
	c.CourseID = a.ID

	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := a.Exams().All(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	bFound, cFound := false, false
	for _, v := range check {
		if v.CourseID == b.CourseID {
			bFound = true
		}
		if v.CourseID == c.CourseID {
			cFound = true
		}
	}

	if !bFound {
		t.Error("expected to find b")
	}
	if !cFound {
		t.Error("expected to find c")
	}

	slice := CourseSlice{&a}
	if err = a.L.LoadExams(ctx, tx, false, (*[]*Course)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.Exams); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	a.R.Exams = nil
	if err = a.L.LoadExams(ctx, tx, true, &a, nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.Exams); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	if t.Failed() {
		t.Logf("%#v", check)
	}
}

func testCourseToManyFieldOfStudyHasCourses(t *testing.T) {
	var err error
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Course
	var b, c FieldOfStudyHasCourse

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, courseDBTypes, true, courseColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Course struct: %s", err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = randomize.Struct(seed, &b, fieldOfStudyHasCourseDBTypes, false, fieldOfStudyHasCourseColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, fieldOfStudyHasCourseDBTypes, false, fieldOfStudyHasCourseColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}

	b.CourseID = a.ID
	c.CourseID = a.ID

	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := a.FieldOfStudyHasCourses().All(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	bFound, cFound := false, false
	for _, v := range check {
		if v.CourseID == b.CourseID {
			bFound = true
		}
		if v.CourseID == c.CourseID {
			cFound = true
		}
	}

	if !bFound {
		t.Error("expected to find b")
	}
	if !cFound {
		t.Error("expected to find c")
	}

	slice := CourseSlice{&a}
	if err = a.L.LoadFieldOfStudyHasCourses(ctx, tx, false, (*[]*Course)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.FieldOfStudyHasCourses); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	a.R.FieldOfStudyHasCourses = nil
	if err = a.L.LoadFieldOfStudyHasCourses(ctx, tx, true, &a, nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.FieldOfStudyHasCourses); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	if t.Failed() {
		t.Logf("%#v", check)
	}
}

func testCourseToManySubmissions(t *testing.T) {
	var err error
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Course
	var b, c Submission

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, courseDBTypes, true, courseColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Course struct: %s", err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = randomize.Struct(seed, &b, submissionDBTypes, false, submissionColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, submissionDBTypes, false, submissionColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}

	b.CourseID = a.ID
	c.CourseID = a.ID

	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := a.Submissions().All(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	bFound, cFound := false, false
	for _, v := range check {
		if v.CourseID == b.CourseID {
			bFound = true
		}
		if v.CourseID == c.CourseID {
			cFound = true
		}
	}

	if !bFound {
		t.Error("expected to find b")
	}
	if !cFound {
		t.Error("expected to find c")
	}

	slice := CourseSlice{&a}
	if err = a.L.LoadSubmissions(ctx, tx, false, (*[]*Course)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.Submissions); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	a.R.Submissions = nil
	if err = a.L.LoadSubmissions(ctx, tx, true, &a, nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.Submissions); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	if t.Failed() {
		t.Logf("%#v", check)
	}
}

func testCourseToManyUserHasCourses(t *testing.T) {
	var err error
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Course
	var b, c UserHasCourse

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, courseDBTypes, true, courseColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Course struct: %s", err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = randomize.Struct(seed, &b, userHasCourseDBTypes, false, userHasCourseColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, userHasCourseDBTypes, false, userHasCourseColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}

	b.CourseID = a.ID
	c.CourseID = a.ID

	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := a.UserHasCourses().All(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	bFound, cFound := false, false
	for _, v := range check {
		if v.CourseID == b.CourseID {
			bFound = true
		}
		if v.CourseID == c.CourseID {
			cFound = true
		}
	}

	if !bFound {
		t.Error("expected to find b")
	}
	if !cFound {
		t.Error("expected to find c")
	}

	slice := CourseSlice{&a}
	if err = a.L.LoadUserHasCourses(ctx, tx, false, (*[]*Course)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.UserHasCourses); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	a.R.UserHasCourses = nil
	if err = a.L.LoadUserHasCourses(ctx, tx, true, &a, nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.UserHasCourses); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	if t.Failed() {
		t.Logf("%#v", check)
	}
}

func testCourseToManyAddOpAppointments(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Course
	var b, c, d, e Appointment

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, courseDBTypes, false, strmangle.SetComplement(coursePrimaryKeyColumns, courseColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*Appointment{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, appointmentDBTypes, false, strmangle.SetComplement(appointmentPrimaryKeyColumns, appointmentColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	foreignersSplitByInsertion := [][]*Appointment{
		{&b, &c},
		{&d, &e},
	}

	for i, x := range foreignersSplitByInsertion {
		err = a.AddAppointments(ctx, tx, i != 0, x...)
		if err != nil {
			t.Fatal(err)
		}

		first := x[0]
		second := x[1]

		if a.ID != first.CourseID {
			t.Error("foreign key was wrong value", a.ID, first.CourseID)
		}
		if a.ID != second.CourseID {
			t.Error("foreign key was wrong value", a.ID, second.CourseID)
		}

		if first.R.Course != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}
		if second.R.Course != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}

		if a.R.Appointments[i*2] != first {
			t.Error("relationship struct slice not set to correct value")
		}
		if a.R.Appointments[i*2+1] != second {
			t.Error("relationship struct slice not set to correct value")
		}

		count, err := a.Appointments().Count(ctx, tx)
		if err != nil {
			t.Fatal(err)
		}
		if want := int64((i + 1) * 2); count != want {
			t.Error("want", want, "got", count)
		}
	}
}
func testCourseToManyAddOpLinkedCourseCertificates(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Course
	var b, c, d, e Certificate

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, courseDBTypes, false, strmangle.SetComplement(coursePrimaryKeyColumns, courseColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*Certificate{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, certificateDBTypes, false, strmangle.SetComplement(certificatePrimaryKeyColumns, certificateColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	foreignersSplitByInsertion := [][]*Certificate{
		{&b, &c},
		{&d, &e},
	}

	for i, x := range foreignersSplitByInsertion {
		err = a.AddLinkedCourseCertificates(ctx, tx, i != 0, x...)
		if err != nil {
			t.Fatal(err)
		}

		first := x[0]
		second := x[1]

		if a.ID != first.LinkedCourseID {
			t.Error("foreign key was wrong value", a.ID, first.LinkedCourseID)
		}
		if a.ID != second.LinkedCourseID {
			t.Error("foreign key was wrong value", a.ID, second.LinkedCourseID)
		}

		if first.R.LinkedCourse != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}
		if second.R.LinkedCourse != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}

		if a.R.LinkedCourseCertificates[i*2] != first {
			t.Error("relationship struct slice not set to correct value")
		}
		if a.R.LinkedCourseCertificates[i*2+1] != second {
			t.Error("relationship struct slice not set to correct value")
		}

		count, err := a.LinkedCourseCertificates().Count(ctx, tx)
		if err != nil {
			t.Fatal(err)
		}
		if want := int64((i + 1) * 2); count != want {
			t.Error("want", want, "got", count)
		}
	}
}
func testCourseToManyAddOpCourseHasFiles(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Course
	var b, c, d, e CourseHasFile

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, courseDBTypes, false, strmangle.SetComplement(coursePrimaryKeyColumns, courseColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*CourseHasFile{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, courseHasFileDBTypes, false, strmangle.SetComplement(courseHasFilePrimaryKeyColumns, courseHasFileColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	foreignersSplitByInsertion := [][]*CourseHasFile{
		{&b, &c},
		{&d, &e},
	}

	for i, x := range foreignersSplitByInsertion {
		err = a.AddCourseHasFiles(ctx, tx, i != 0, x...)
		if err != nil {
			t.Fatal(err)
		}

		first := x[0]
		second := x[1]

		if a.ID != first.CourseID {
			t.Error("foreign key was wrong value", a.ID, first.CourseID)
		}
		if a.ID != second.CourseID {
			t.Error("foreign key was wrong value", a.ID, second.CourseID)
		}

		if first.R.Course != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}
		if second.R.Course != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}

		if a.R.CourseHasFiles[i*2] != first {
			t.Error("relationship struct slice not set to correct value")
		}
		if a.R.CourseHasFiles[i*2+1] != second {
			t.Error("relationship struct slice not set to correct value")
		}

		count, err := a.CourseHasFiles().Count(ctx, tx)
		if err != nil {
			t.Fatal(err)
		}
		if want := int64((i + 1) * 2); count != want {
			t.Error("want", want, "got", count)
		}
	}
}
func testCourseToManyAddOpCertificates(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Course
	var b, c, d, e Certificate

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, courseDBTypes, false, strmangle.SetComplement(coursePrimaryKeyColumns, courseColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*Certificate{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, certificateDBTypes, false, strmangle.SetComplement(certificatePrimaryKeyColumns, certificateColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	foreignersSplitByInsertion := [][]*Certificate{
		{&b, &c},
		{&d, &e},
	}

	for i, x := range foreignersSplitByInsertion {
		err = a.AddCertificates(ctx, tx, i != 0, x...)
		if err != nil {
			t.Fatal(err)
		}

		first := x[0]
		second := x[1]

		if first.R.Courses[0] != &a {
			t.Error("relationship was not added properly to the slice")
		}
		if second.R.Courses[0] != &a {
			t.Error("relationship was not added properly to the slice")
		}

		if a.R.Certificates[i*2] != first {
			t.Error("relationship struct slice not set to correct value")
		}
		if a.R.Certificates[i*2+1] != second {
			t.Error("relationship struct slice not set to correct value")
		}

		count, err := a.Certificates().Count(ctx, tx)
		if err != nil {
			t.Fatal(err)
		}
		if want := int64((i + 1) * 2); count != want {
			t.Error("want", want, "got", count)
		}
	}
}

func testCourseToManySetOpCertificates(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Course
	var b, c, d, e Certificate

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, courseDBTypes, false, strmangle.SetComplement(coursePrimaryKeyColumns, courseColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*Certificate{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, certificateDBTypes, false, strmangle.SetComplement(certificatePrimaryKeyColumns, certificateColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err = a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	err = a.SetCertificates(ctx, tx, false, &b, &c)
	if err != nil {
		t.Fatal(err)
	}

	count, err := a.Certificates().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	err = a.SetCertificates(ctx, tx, true, &d, &e)
	if err != nil {
		t.Fatal(err)
	}

	count, err = a.Certificates().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	// The following checks cannot be implemented since we have no handle
	// to these when we call Set(). Leaving them here as wishful thinking
	// and to let people know there's dragons.
	//
	// if len(b.R.Courses) != 0 {
	// 	t.Error("relationship was not removed properly from the slice")
	// }
	// if len(c.R.Courses) != 0 {
	// 	t.Error("relationship was not removed properly from the slice")
	// }
	if d.R.Courses[0] != &a {
		t.Error("relationship was not added properly to the slice")
	}
	if e.R.Courses[0] != &a {
		t.Error("relationship was not added properly to the slice")
	}

	if a.R.Certificates[0] != &d {
		t.Error("relationship struct slice not set to correct value")
	}
	if a.R.Certificates[1] != &e {
		t.Error("relationship struct slice not set to correct value")
	}
}

func testCourseToManyRemoveOpCertificates(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Course
	var b, c, d, e Certificate

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, courseDBTypes, false, strmangle.SetComplement(coursePrimaryKeyColumns, courseColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*Certificate{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, certificateDBTypes, false, strmangle.SetComplement(certificatePrimaryKeyColumns, certificateColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	err = a.AddCertificates(ctx, tx, true, foreigners...)
	if err != nil {
		t.Fatal(err)
	}

	count, err := a.Certificates().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 4 {
		t.Error("count was wrong:", count)
	}

	err = a.RemoveCertificates(ctx, tx, foreigners[:2]...)
	if err != nil {
		t.Fatal(err)
	}

	count, err = a.Certificates().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	if len(b.R.Courses) != 0 {
		t.Error("relationship was not removed properly from the slice")
	}
	if len(c.R.Courses) != 0 {
		t.Error("relationship was not removed properly from the slice")
	}
	if d.R.Courses[0] != &a {
		t.Error("relationship was not added properly to the foreign struct")
	}
	if e.R.Courses[0] != &a {
		t.Error("relationship was not added properly to the foreign struct")
	}

	if len(a.R.Certificates) != 2 {
		t.Error("should have preserved two relationships")
	}

	// Removal doesn't do a stable deletion for performance so we have to flip the order
	if a.R.Certificates[1] != &d {
		t.Error("relationship to d should have been preserved")
	}
	if a.R.Certificates[0] != &e {
		t.Error("relationship to e should have been preserved")
	}
}

func testCourseToManyAddOpDirectories(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Course
	var b, c, d, e Directory

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, courseDBTypes, false, strmangle.SetComplement(coursePrimaryKeyColumns, courseColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*Directory{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, directoryDBTypes, false, strmangle.SetComplement(directoryPrimaryKeyColumns, directoryColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	foreignersSplitByInsertion := [][]*Directory{
		{&b, &c},
		{&d, &e},
	}

	for i, x := range foreignersSplitByInsertion {
		err = a.AddDirectories(ctx, tx, i != 0, x...)
		if err != nil {
			t.Fatal(err)
		}

		first := x[0]
		second := x[1]

		if a.ID != first.CourseID {
			t.Error("foreign key was wrong value", a.ID, first.CourseID)
		}
		if a.ID != second.CourseID {
			t.Error("foreign key was wrong value", a.ID, second.CourseID)
		}

		if first.R.Course != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}
		if second.R.Course != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}

		if a.R.Directories[i*2] != first {
			t.Error("relationship struct slice not set to correct value")
		}
		if a.R.Directories[i*2+1] != second {
			t.Error("relationship struct slice not set to correct value")
		}

		count, err := a.Directories().Count(ctx, tx)
		if err != nil {
			t.Fatal(err)
		}
		if want := int64((i + 1) * 2); count != want {
			t.Error("want", want, "got", count)
		}
	}
}
func testCourseToManyAddOpExams(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Course
	var b, c, d, e Exam

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, courseDBTypes, false, strmangle.SetComplement(coursePrimaryKeyColumns, courseColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*Exam{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, examDBTypes, false, strmangle.SetComplement(examPrimaryKeyColumns, examColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	foreignersSplitByInsertion := [][]*Exam{
		{&b, &c},
		{&d, &e},
	}

	for i, x := range foreignersSplitByInsertion {
		err = a.AddExams(ctx, tx, i != 0, x...)
		if err != nil {
			t.Fatal(err)
		}

		first := x[0]
		second := x[1]

		if a.ID != first.CourseID {
			t.Error("foreign key was wrong value", a.ID, first.CourseID)
		}
		if a.ID != second.CourseID {
			t.Error("foreign key was wrong value", a.ID, second.CourseID)
		}

		if first.R.Course != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}
		if second.R.Course != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}

		if a.R.Exams[i*2] != first {
			t.Error("relationship struct slice not set to correct value")
		}
		if a.R.Exams[i*2+1] != second {
			t.Error("relationship struct slice not set to correct value")
		}

		count, err := a.Exams().Count(ctx, tx)
		if err != nil {
			t.Fatal(err)
		}
		if want := int64((i + 1) * 2); count != want {
			t.Error("want", want, "got", count)
		}
	}
}
func testCourseToManyAddOpFieldOfStudyHasCourses(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Course
	var b, c, d, e FieldOfStudyHasCourse

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, courseDBTypes, false, strmangle.SetComplement(coursePrimaryKeyColumns, courseColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*FieldOfStudyHasCourse{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, fieldOfStudyHasCourseDBTypes, false, strmangle.SetComplement(fieldOfStudyHasCoursePrimaryKeyColumns, fieldOfStudyHasCourseColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	foreignersSplitByInsertion := [][]*FieldOfStudyHasCourse{
		{&b, &c},
		{&d, &e},
	}

	for i, x := range foreignersSplitByInsertion {
		err = a.AddFieldOfStudyHasCourses(ctx, tx, i != 0, x...)
		if err != nil {
			t.Fatal(err)
		}

		first := x[0]
		second := x[1]

		if a.ID != first.CourseID {
			t.Error("foreign key was wrong value", a.ID, first.CourseID)
		}
		if a.ID != second.CourseID {
			t.Error("foreign key was wrong value", a.ID, second.CourseID)
		}

		if first.R.Course != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}
		if second.R.Course != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}

		if a.R.FieldOfStudyHasCourses[i*2] != first {
			t.Error("relationship struct slice not set to correct value")
		}
		if a.R.FieldOfStudyHasCourses[i*2+1] != second {
			t.Error("relationship struct slice not set to correct value")
		}

		count, err := a.FieldOfStudyHasCourses().Count(ctx, tx)
		if err != nil {
			t.Fatal(err)
		}
		if want := int64((i + 1) * 2); count != want {
			t.Error("want", want, "got", count)
		}
	}
}
func testCourseToManyAddOpSubmissions(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Course
	var b, c, d, e Submission

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, courseDBTypes, false, strmangle.SetComplement(coursePrimaryKeyColumns, courseColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*Submission{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, submissionDBTypes, false, strmangle.SetComplement(submissionPrimaryKeyColumns, submissionColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	foreignersSplitByInsertion := [][]*Submission{
		{&b, &c},
		{&d, &e},
	}

	for i, x := range foreignersSplitByInsertion {
		err = a.AddSubmissions(ctx, tx, i != 0, x...)
		if err != nil {
			t.Fatal(err)
		}

		first := x[0]
		second := x[1]

		if a.ID != first.CourseID {
			t.Error("foreign key was wrong value", a.ID, first.CourseID)
		}
		if a.ID != second.CourseID {
			t.Error("foreign key was wrong value", a.ID, second.CourseID)
		}

		if first.R.Course != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}
		if second.R.Course != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}

		if a.R.Submissions[i*2] != first {
			t.Error("relationship struct slice not set to correct value")
		}
		if a.R.Submissions[i*2+1] != second {
			t.Error("relationship struct slice not set to correct value")
		}

		count, err := a.Submissions().Count(ctx, tx)
		if err != nil {
			t.Fatal(err)
		}
		if want := int64((i + 1) * 2); count != want {
			t.Error("want", want, "got", count)
		}
	}
}
func testCourseToManyAddOpUserHasCourses(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Course
	var b, c, d, e UserHasCourse

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, courseDBTypes, false, strmangle.SetComplement(coursePrimaryKeyColumns, courseColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*UserHasCourse{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, userHasCourseDBTypes, false, strmangle.SetComplement(userHasCoursePrimaryKeyColumns, userHasCourseColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	foreignersSplitByInsertion := [][]*UserHasCourse{
		{&b, &c},
		{&d, &e},
	}

	for i, x := range foreignersSplitByInsertion {
		err = a.AddUserHasCourses(ctx, tx, i != 0, x...)
		if err != nil {
			t.Fatal(err)
		}

		first := x[0]
		second := x[1]

		if a.ID != first.CourseID {
			t.Error("foreign key was wrong value", a.ID, first.CourseID)
		}
		if a.ID != second.CourseID {
			t.Error("foreign key was wrong value", a.ID, second.CourseID)
		}

		if first.R.Course != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}
		if second.R.Course != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}

		if a.R.UserHasCourses[i*2] != first {
			t.Error("relationship struct slice not set to correct value")
		}
		if a.R.UserHasCourses[i*2+1] != second {
			t.Error("relationship struct slice not set to correct value")
		}

		count, err := a.UserHasCourses().Count(ctx, tx)
		if err != nil {
			t.Fatal(err)
		}
		if want := int64((i + 1) * 2); count != want {
			t.Error("want", want, "got", count)
		}
	}
}
func testCourseToOneForumUsingForum(t *testing.T) {
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var local Course
	var foreign Forum

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, courseDBTypes, false, courseColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Course struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, forumDBTypes, false, forumColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Forum struct: %s", err)
	}

	if err := foreign.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	local.ForumID = foreign.ID
	if err := local.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.Forum().One(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	if check.ID != foreign.ID {
		t.Errorf("want: %v, got %v", foreign.ID, check.ID)
	}

	slice := CourseSlice{&local}
	if err = local.L.LoadForum(ctx, tx, false, (*[]*Course)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Forum == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.Forum = nil
	if err = local.L.LoadForum(ctx, tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Forum == nil {
		t.Error("struct should have been eager loaded")
	}
}

func testCourseToOneSetOpForumUsingForum(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Course
	var b, c Forum

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, courseDBTypes, false, strmangle.SetComplement(coursePrimaryKeyColumns, courseColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, forumDBTypes, false, strmangle.SetComplement(forumPrimaryKeyColumns, forumColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, forumDBTypes, false, strmangle.SetComplement(forumPrimaryKeyColumns, forumColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*Forum{&b, &c} {
		err = a.SetForum(ctx, tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.Forum != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.Courses[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if a.ForumID != x.ID {
			t.Error("foreign key was wrong value", a.ForumID)
		}

		zero := reflect.Zero(reflect.TypeOf(a.ForumID))
		reflect.Indirect(reflect.ValueOf(&a.ForumID)).Set(zero)

		if err = a.Reload(ctx, tx); err != nil {
			t.Fatal("failed to reload", err)
		}

		if a.ForumID != x.ID {
			t.Error("foreign key was wrong value", a.ForumID, x.ID)
		}
	}
}

func testCoursesReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Course{}
	if err = randomize.Struct(seed, o, courseDBTypes, true, courseColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Course struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = o.Reload(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testCoursesReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Course{}
	if err = randomize.Struct(seed, o, courseDBTypes, true, courseColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Course struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := CourseSlice{o}

	if err = slice.ReloadAll(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testCoursesSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Course{}
	if err = randomize.Struct(seed, o, courseDBTypes, true, courseColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Course struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := Courses().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	courseDBTypes = map[string]string{`ID`: `int`, `Name`: `varchar`, `Description`: `varchar`, `EnrollKey`: `varchar`, `ForumID`: `int`, `CreatedAt`: `timestamp`, `UpdatedAt`: `timestamp`, `DeletedAt`: `timestamp`}
	_             = bytes.MinRead
)

func testCoursesUpdate(t *testing.T) {
	t.Parallel()

	if 0 == len(coursePrimaryKeyColumns) {
		t.Skip("Skipping table with no primary key columns")
	}
	if len(courseAllColumns) == len(coursePrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &Course{}
	if err = randomize.Struct(seed, o, courseDBTypes, true, courseColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Course struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Courses().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, courseDBTypes, true, coursePrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize Course struct: %s", err)
	}

	if rowsAff, err := o.Update(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only affect one row but affected", rowsAff)
	}
}

func testCoursesSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(courseAllColumns) == len(coursePrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &Course{}
	if err = randomize.Struct(seed, o, courseDBTypes, true, courseColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Course struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Courses().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, courseDBTypes, true, coursePrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize Course struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(courseAllColumns, coursePrimaryKeyColumns) {
		fields = courseAllColumns
	} else {
		fields = strmangle.SetComplement(
			courseAllColumns,
			coursePrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	typ := reflect.TypeOf(o).Elem()
	n := typ.NumField()

	updateMap := M{}
	for _, col := range fields {
		for i := 0; i < n; i++ {
			f := typ.Field(i)
			if f.Tag.Get("boil") == col {
				updateMap[col] = value.Field(i).Interface()
			}
		}
	}

	slice := CourseSlice{o}
	if rowsAff, err := slice.UpdateAll(ctx, tx, updateMap); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("wanted one record updated but got", rowsAff)
	}
}

func testCoursesUpsert(t *testing.T) {
	t.Parallel()

	if len(courseAllColumns) == len(coursePrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}
	if len(mySQLCourseUniqueColumns) == 0 {
		t.Skip("Skipping table with no unique columns to conflict on")
	}

	seed := randomize.NewSeed()
	var err error
	// Attempt the INSERT side of an UPSERT
	o := Course{}
	if err = randomize.Struct(seed, &o, courseDBTypes, false); err != nil {
		t.Errorf("Unable to randomize Course struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Upsert(ctx, tx, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert Course: %s", err)
	}

	count, err := Courses().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}

	// Attempt the UPDATE side of an UPSERT
	if err = randomize.Struct(seed, &o, courseDBTypes, false, coursePrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize Course struct: %s", err)
	}

	if err = o.Upsert(ctx, tx, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert Course: %s", err)
	}

	count, err = Courses().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}
}
