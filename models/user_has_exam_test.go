// Code generated by SQLBoiler 4.8.6 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"bytes"
	"context"
	"reflect"
	"testing"

	"github.com/volatiletech/randomize"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/strmangle"
)

var (
	// Relationships sometimes use the reflection helper queries.Equal/queries.Assign
	// so force a package dependency in case they don't.
	_ = queries.Equal
)

func testUserHasExams(t *testing.T) {
	t.Parallel()

	query := UserHasExams()

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}

func testUserHasExamsSoftDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &UserHasExam{}
	if err = randomize.Struct(seed, o, userHasExamDBTypes, true, userHasExamColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UserHasExam struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := o.Delete(ctx, tx, false); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := UserHasExams().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testUserHasExamsQuerySoftDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &UserHasExam{}
	if err = randomize.Struct(seed, o, userHasExamDBTypes, true, userHasExamColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UserHasExam struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := UserHasExams().DeleteAll(ctx, tx, false); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := UserHasExams().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testUserHasExamsSliceSoftDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &UserHasExam{}
	if err = randomize.Struct(seed, o, userHasExamDBTypes, true, userHasExamColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UserHasExam struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := UserHasExamSlice{o}

	if rowsAff, err := slice.DeleteAll(ctx, tx, false); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := UserHasExams().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testUserHasExamsDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &UserHasExam{}
	if err = randomize.Struct(seed, o, userHasExamDBTypes, true, userHasExamColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UserHasExam struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := o.Delete(ctx, tx, true); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := UserHasExams().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testUserHasExamsQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &UserHasExam{}
	if err = randomize.Struct(seed, o, userHasExamDBTypes, true, userHasExamColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UserHasExam struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := UserHasExams().DeleteAll(ctx, tx, true); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := UserHasExams().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testUserHasExamsSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &UserHasExam{}
	if err = randomize.Struct(seed, o, userHasExamDBTypes, true, userHasExamColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UserHasExam struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := UserHasExamSlice{o}

	if rowsAff, err := slice.DeleteAll(ctx, tx, true); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := UserHasExams().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testUserHasExamsExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &UserHasExam{}
	if err = randomize.Struct(seed, o, userHasExamDBTypes, true, userHasExamColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UserHasExam struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	e, err := UserHasExamExists(ctx, tx, o.UserID, o.ExamID)
	if err != nil {
		t.Errorf("Unable to check if UserHasExam exists: %s", err)
	}
	if !e {
		t.Errorf("Expected UserHasExamExists to return true, but got false.")
	}
}

func testUserHasExamsFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &UserHasExam{}
	if err = randomize.Struct(seed, o, userHasExamDBTypes, true, userHasExamColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UserHasExam struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	userHasExamFound, err := FindUserHasExam(ctx, tx, o.UserID, o.ExamID)
	if err != nil {
		t.Error(err)
	}

	if userHasExamFound == nil {
		t.Error("want a record, got nil")
	}
}

func testUserHasExamsBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &UserHasExam{}
	if err = randomize.Struct(seed, o, userHasExamDBTypes, true, userHasExamColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UserHasExam struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = UserHasExams().Bind(ctx, tx, o); err != nil {
		t.Error(err)
	}
}

func testUserHasExamsOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &UserHasExam{}
	if err = randomize.Struct(seed, o, userHasExamDBTypes, true, userHasExamColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UserHasExam struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if x, err := UserHasExams().One(ctx, tx); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testUserHasExamsAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	userHasExamOne := &UserHasExam{}
	userHasExamTwo := &UserHasExam{}
	if err = randomize.Struct(seed, userHasExamOne, userHasExamDBTypes, false, userHasExamColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UserHasExam struct: %s", err)
	}
	if err = randomize.Struct(seed, userHasExamTwo, userHasExamDBTypes, false, userHasExamColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UserHasExam struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = userHasExamOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = userHasExamTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := UserHasExams().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testUserHasExamsCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	userHasExamOne := &UserHasExam{}
	userHasExamTwo := &UserHasExam{}
	if err = randomize.Struct(seed, userHasExamOne, userHasExamDBTypes, false, userHasExamColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UserHasExam struct: %s", err)
	}
	if err = randomize.Struct(seed, userHasExamTwo, userHasExamDBTypes, false, userHasExamColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UserHasExam struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = userHasExamOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = userHasExamTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := UserHasExams().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}

func userHasExamBeforeInsertHook(ctx context.Context, e boil.ContextExecutor, o *UserHasExam) error {
	*o = UserHasExam{}
	return nil
}

func userHasExamAfterInsertHook(ctx context.Context, e boil.ContextExecutor, o *UserHasExam) error {
	*o = UserHasExam{}
	return nil
}

func userHasExamAfterSelectHook(ctx context.Context, e boil.ContextExecutor, o *UserHasExam) error {
	*o = UserHasExam{}
	return nil
}

func userHasExamBeforeUpdateHook(ctx context.Context, e boil.ContextExecutor, o *UserHasExam) error {
	*o = UserHasExam{}
	return nil
}

func userHasExamAfterUpdateHook(ctx context.Context, e boil.ContextExecutor, o *UserHasExam) error {
	*o = UserHasExam{}
	return nil
}

func userHasExamBeforeDeleteHook(ctx context.Context, e boil.ContextExecutor, o *UserHasExam) error {
	*o = UserHasExam{}
	return nil
}

func userHasExamAfterDeleteHook(ctx context.Context, e boil.ContextExecutor, o *UserHasExam) error {
	*o = UserHasExam{}
	return nil
}

func userHasExamBeforeUpsertHook(ctx context.Context, e boil.ContextExecutor, o *UserHasExam) error {
	*o = UserHasExam{}
	return nil
}

func userHasExamAfterUpsertHook(ctx context.Context, e boil.ContextExecutor, o *UserHasExam) error {
	*o = UserHasExam{}
	return nil
}

func testUserHasExamsHooks(t *testing.T) {
	t.Parallel()

	var err error

	ctx := context.Background()
	empty := &UserHasExam{}
	o := &UserHasExam{}

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, o, userHasExamDBTypes, false); err != nil {
		t.Errorf("Unable to randomize UserHasExam object: %s", err)
	}

	AddUserHasExamHook(boil.BeforeInsertHook, userHasExamBeforeInsertHook)
	if err = o.doBeforeInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeInsertHook function to empty object, but got: %#v", o)
	}
	userHasExamBeforeInsertHooks = []UserHasExamHook{}

	AddUserHasExamHook(boil.AfterInsertHook, userHasExamAfterInsertHook)
	if err = o.doAfterInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterInsertHook function to empty object, but got: %#v", o)
	}
	userHasExamAfterInsertHooks = []UserHasExamHook{}

	AddUserHasExamHook(boil.AfterSelectHook, userHasExamAfterSelectHook)
	if err = o.doAfterSelectHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterSelectHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterSelectHook function to empty object, but got: %#v", o)
	}
	userHasExamAfterSelectHooks = []UserHasExamHook{}

	AddUserHasExamHook(boil.BeforeUpdateHook, userHasExamBeforeUpdateHook)
	if err = o.doBeforeUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpdateHook function to empty object, but got: %#v", o)
	}
	userHasExamBeforeUpdateHooks = []UserHasExamHook{}

	AddUserHasExamHook(boil.AfterUpdateHook, userHasExamAfterUpdateHook)
	if err = o.doAfterUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpdateHook function to empty object, but got: %#v", o)
	}
	userHasExamAfterUpdateHooks = []UserHasExamHook{}

	AddUserHasExamHook(boil.BeforeDeleteHook, userHasExamBeforeDeleteHook)
	if err = o.doBeforeDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeDeleteHook function to empty object, but got: %#v", o)
	}
	userHasExamBeforeDeleteHooks = []UserHasExamHook{}

	AddUserHasExamHook(boil.AfterDeleteHook, userHasExamAfterDeleteHook)
	if err = o.doAfterDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterDeleteHook function to empty object, but got: %#v", o)
	}
	userHasExamAfterDeleteHooks = []UserHasExamHook{}

	AddUserHasExamHook(boil.BeforeUpsertHook, userHasExamBeforeUpsertHook)
	if err = o.doBeforeUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpsertHook function to empty object, but got: %#v", o)
	}
	userHasExamBeforeUpsertHooks = []UserHasExamHook{}

	AddUserHasExamHook(boil.AfterUpsertHook, userHasExamAfterUpsertHook)
	if err = o.doAfterUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpsertHook function to empty object, but got: %#v", o)
	}
	userHasExamAfterUpsertHooks = []UserHasExamHook{}
}

func testUserHasExamsInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &UserHasExam{}
	if err = randomize.Struct(seed, o, userHasExamDBTypes, true, userHasExamColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UserHasExam struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := UserHasExams().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testUserHasExamsInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &UserHasExam{}
	if err = randomize.Struct(seed, o, userHasExamDBTypes, true); err != nil {
		t.Errorf("Unable to randomize UserHasExam struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Whitelist(userHasExamColumnsWithoutDefault...)); err != nil {
		t.Error(err)
	}

	count, err := UserHasExams().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testUserHasExamToOneExamUsingExam(t *testing.T) {
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var local UserHasExam
	var foreign Exam

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, userHasExamDBTypes, false, userHasExamColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UserHasExam struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, examDBTypes, false, examColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Exam struct: %s", err)
	}

	if err := foreign.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	local.ExamID = foreign.ID
	if err := local.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.Exam().One(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	if check.ID != foreign.ID {
		t.Errorf("want: %v, got %v", foreign.ID, check.ID)
	}

	slice := UserHasExamSlice{&local}
	if err = local.L.LoadExam(ctx, tx, false, (*[]*UserHasExam)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Exam == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.Exam = nil
	if err = local.L.LoadExam(ctx, tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Exam == nil {
		t.Error("struct should have been eager loaded")
	}
}

func testUserHasExamToOneUserUsingUser(t *testing.T) {
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var local UserHasExam
	var foreign User

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, userHasExamDBTypes, false, userHasExamColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UserHasExam struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, userDBTypes, false, userColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize User struct: %s", err)
	}

	if err := foreign.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	local.UserID = foreign.ID
	if err := local.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.User().One(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	if check.ID != foreign.ID {
		t.Errorf("want: %v, got %v", foreign.ID, check.ID)
	}

	slice := UserHasExamSlice{&local}
	if err = local.L.LoadUser(ctx, tx, false, (*[]*UserHasExam)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.User == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.User = nil
	if err = local.L.LoadUser(ctx, tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.User == nil {
		t.Error("struct should have been eager loaded")
	}
}

func testUserHasExamToOneSetOpExamUsingExam(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a UserHasExam
	var b, c Exam

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, userHasExamDBTypes, false, strmangle.SetComplement(userHasExamPrimaryKeyColumns, userHasExamColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, examDBTypes, false, strmangle.SetComplement(examPrimaryKeyColumns, examColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, examDBTypes, false, strmangle.SetComplement(examPrimaryKeyColumns, examColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*Exam{&b, &c} {
		err = a.SetExam(ctx, tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.Exam != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.UserHasExams[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if a.ExamID != x.ID {
			t.Error("foreign key was wrong value", a.ExamID)
		}

		if exists, err := UserHasExamExists(ctx, tx, a.UserID, a.ExamID); err != nil {
			t.Fatal(err)
		} else if !exists {
			t.Error("want 'a' to exist")
		}

	}
}
func testUserHasExamToOneSetOpUserUsingUser(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a UserHasExam
	var b, c User

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, userHasExamDBTypes, false, strmangle.SetComplement(userHasExamPrimaryKeyColumns, userHasExamColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, userDBTypes, false, strmangle.SetComplement(userPrimaryKeyColumns, userColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, userDBTypes, false, strmangle.SetComplement(userPrimaryKeyColumns, userColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*User{&b, &c} {
		err = a.SetUser(ctx, tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.User != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.UserHasExams[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if a.UserID != x.ID {
			t.Error("foreign key was wrong value", a.UserID)
		}

		if exists, err := UserHasExamExists(ctx, tx, a.UserID, a.ExamID); err != nil {
			t.Fatal(err)
		} else if !exists {
			t.Error("want 'a' to exist")
		}

	}
}

func testUserHasExamsReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &UserHasExam{}
	if err = randomize.Struct(seed, o, userHasExamDBTypes, true, userHasExamColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UserHasExam struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = o.Reload(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testUserHasExamsReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &UserHasExam{}
	if err = randomize.Struct(seed, o, userHasExamDBTypes, true, userHasExamColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UserHasExam struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := UserHasExamSlice{o}

	if err = slice.ReloadAll(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testUserHasExamsSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &UserHasExam{}
	if err = randomize.Struct(seed, o, userHasExamDBTypes, true, userHasExamColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UserHasExam struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := UserHasExams().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	userHasExamDBTypes = map[string]string{`UserID`: `int`, `ExamID`: `int`, `Attended`: `tinyint`, `Grade`: `int`, `Passed`: `tinyint`, `Feedback`: `varchar`, `CreatedAt`: `timestamp`, `UpdatedAt`: `timestamp`, `DeletedAt`: `timestamp`}
	_                  = bytes.MinRead
)

func testUserHasExamsUpdate(t *testing.T) {
	t.Parallel()

	if 0 == len(userHasExamPrimaryKeyColumns) {
		t.Skip("Skipping table with no primary key columns")
	}
	if len(userHasExamAllColumns) == len(userHasExamPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &UserHasExam{}
	if err = randomize.Struct(seed, o, userHasExamDBTypes, true, userHasExamColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UserHasExam struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := UserHasExams().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, userHasExamDBTypes, true, userHasExamPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize UserHasExam struct: %s", err)
	}

	if rowsAff, err := o.Update(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only affect one row but affected", rowsAff)
	}
}

func testUserHasExamsSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(userHasExamAllColumns) == len(userHasExamPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &UserHasExam{}
	if err = randomize.Struct(seed, o, userHasExamDBTypes, true, userHasExamColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UserHasExam struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := UserHasExams().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, userHasExamDBTypes, true, userHasExamPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize UserHasExam struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(userHasExamAllColumns, userHasExamPrimaryKeyColumns) {
		fields = userHasExamAllColumns
	} else {
		fields = strmangle.SetComplement(
			userHasExamAllColumns,
			userHasExamPrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	typ := reflect.TypeOf(o).Elem()
	n := typ.NumField()

	updateMap := M{}
	for _, col := range fields {
		for i := 0; i < n; i++ {
			f := typ.Field(i)
			if f.Tag.Get("boil") == col {
				updateMap[col] = value.Field(i).Interface()
			}
		}
	}

	slice := UserHasExamSlice{o}
	if rowsAff, err := slice.UpdateAll(ctx, tx, updateMap); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("wanted one record updated but got", rowsAff)
	}
}

func testUserHasExamsUpsert(t *testing.T) {
	t.Parallel()

	if len(userHasExamAllColumns) == len(userHasExamPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}
	if len(mySQLUserHasExamUniqueColumns) == 0 {
		t.Skip("Skipping table with no unique columns to conflict on")
	}

	seed := randomize.NewSeed()
	var err error
	// Attempt the INSERT side of an UPSERT
	o := UserHasExam{}
	if err = randomize.Struct(seed, &o, userHasExamDBTypes, false); err != nil {
		t.Errorf("Unable to randomize UserHasExam struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Upsert(ctx, tx, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert UserHasExam: %s", err)
	}

	count, err := UserHasExams().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}

	// Attempt the UPDATE side of an UPSERT
	if err = randomize.Struct(seed, &o, userHasExamDBTypes, false, userHasExamPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize UserHasExam struct: %s", err)
	}

	if err = o.Upsert(ctx, tx, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert UserHasExam: %s", err)
	}

	count, err = UserHasExams().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}
}
