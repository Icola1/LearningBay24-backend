// Code generated by SQLBoiler 4.8.6 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"bytes"
	"context"
	"reflect"
	"testing"

	"github.com/volatiletech/randomize"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/strmangle"
)

var (
	// Relationships sometimes use the reflection helper queries.Equal/queries.Assign
	// so force a package dependency in case they don't.
	_ = queries.Equal
)

func testAppointments(t *testing.T) {
	t.Parallel()

	query := Appointments()

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}

func testAppointmentsSoftDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Appointment{}
	if err = randomize.Struct(seed, o, appointmentDBTypes, true, appointmentColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Appointment struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := o.Delete(ctx, tx, false); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := Appointments().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testAppointmentsQuerySoftDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Appointment{}
	if err = randomize.Struct(seed, o, appointmentDBTypes, true, appointmentColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Appointment struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := Appointments().DeleteAll(ctx, tx, false); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := Appointments().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testAppointmentsSliceSoftDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Appointment{}
	if err = randomize.Struct(seed, o, appointmentDBTypes, true, appointmentColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Appointment struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := AppointmentSlice{o}

	if rowsAff, err := slice.DeleteAll(ctx, tx, false); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := Appointments().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testAppointmentsDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Appointment{}
	if err = randomize.Struct(seed, o, appointmentDBTypes, true, appointmentColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Appointment struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := o.Delete(ctx, tx, true); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := Appointments().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testAppointmentsQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Appointment{}
	if err = randomize.Struct(seed, o, appointmentDBTypes, true, appointmentColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Appointment struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := Appointments().DeleteAll(ctx, tx, true); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := Appointments().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testAppointmentsSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Appointment{}
	if err = randomize.Struct(seed, o, appointmentDBTypes, true, appointmentColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Appointment struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := AppointmentSlice{o}

	if rowsAff, err := slice.DeleteAll(ctx, tx, true); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := Appointments().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testAppointmentsExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Appointment{}
	if err = randomize.Struct(seed, o, appointmentDBTypes, true, appointmentColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Appointment struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	e, err := AppointmentExists(ctx, tx, o.ID)
	if err != nil {
		t.Errorf("Unable to check if Appointment exists: %s", err)
	}
	if !e {
		t.Errorf("Expected AppointmentExists to return true, but got false.")
	}
}

func testAppointmentsFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Appointment{}
	if err = randomize.Struct(seed, o, appointmentDBTypes, true, appointmentColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Appointment struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	appointmentFound, err := FindAppointment(ctx, tx, o.ID)
	if err != nil {
		t.Error(err)
	}

	if appointmentFound == nil {
		t.Error("want a record, got nil")
	}
}

func testAppointmentsBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Appointment{}
	if err = randomize.Struct(seed, o, appointmentDBTypes, true, appointmentColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Appointment struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = Appointments().Bind(ctx, tx, o); err != nil {
		t.Error(err)
	}
}

func testAppointmentsOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Appointment{}
	if err = randomize.Struct(seed, o, appointmentDBTypes, true, appointmentColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Appointment struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if x, err := Appointments().One(ctx, tx); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testAppointmentsAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	appointmentOne := &Appointment{}
	appointmentTwo := &Appointment{}
	if err = randomize.Struct(seed, appointmentOne, appointmentDBTypes, false, appointmentColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Appointment struct: %s", err)
	}
	if err = randomize.Struct(seed, appointmentTwo, appointmentDBTypes, false, appointmentColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Appointment struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = appointmentOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = appointmentTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := Appointments().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testAppointmentsCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	appointmentOne := &Appointment{}
	appointmentTwo := &Appointment{}
	if err = randomize.Struct(seed, appointmentOne, appointmentDBTypes, false, appointmentColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Appointment struct: %s", err)
	}
	if err = randomize.Struct(seed, appointmentTwo, appointmentDBTypes, false, appointmentColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Appointment struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = appointmentOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = appointmentTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Appointments().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}

func appointmentBeforeInsertHook(ctx context.Context, e boil.ContextExecutor, o *Appointment) error {
	*o = Appointment{}
	return nil
}

func appointmentAfterInsertHook(ctx context.Context, e boil.ContextExecutor, o *Appointment) error {
	*o = Appointment{}
	return nil
}

func appointmentAfterSelectHook(ctx context.Context, e boil.ContextExecutor, o *Appointment) error {
	*o = Appointment{}
	return nil
}

func appointmentBeforeUpdateHook(ctx context.Context, e boil.ContextExecutor, o *Appointment) error {
	*o = Appointment{}
	return nil
}

func appointmentAfterUpdateHook(ctx context.Context, e boil.ContextExecutor, o *Appointment) error {
	*o = Appointment{}
	return nil
}

func appointmentBeforeDeleteHook(ctx context.Context, e boil.ContextExecutor, o *Appointment) error {
	*o = Appointment{}
	return nil
}

func appointmentAfterDeleteHook(ctx context.Context, e boil.ContextExecutor, o *Appointment) error {
	*o = Appointment{}
	return nil
}

func appointmentBeforeUpsertHook(ctx context.Context, e boil.ContextExecutor, o *Appointment) error {
	*o = Appointment{}
	return nil
}

func appointmentAfterUpsertHook(ctx context.Context, e boil.ContextExecutor, o *Appointment) error {
	*o = Appointment{}
	return nil
}

func testAppointmentsHooks(t *testing.T) {
	t.Parallel()

	var err error

	ctx := context.Background()
	empty := &Appointment{}
	o := &Appointment{}

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, o, appointmentDBTypes, false); err != nil {
		t.Errorf("Unable to randomize Appointment object: %s", err)
	}

	AddAppointmentHook(boil.BeforeInsertHook, appointmentBeforeInsertHook)
	if err = o.doBeforeInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeInsertHook function to empty object, but got: %#v", o)
	}
	appointmentBeforeInsertHooks = []AppointmentHook{}

	AddAppointmentHook(boil.AfterInsertHook, appointmentAfterInsertHook)
	if err = o.doAfterInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterInsertHook function to empty object, but got: %#v", o)
	}
	appointmentAfterInsertHooks = []AppointmentHook{}

	AddAppointmentHook(boil.AfterSelectHook, appointmentAfterSelectHook)
	if err = o.doAfterSelectHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterSelectHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterSelectHook function to empty object, but got: %#v", o)
	}
	appointmentAfterSelectHooks = []AppointmentHook{}

	AddAppointmentHook(boil.BeforeUpdateHook, appointmentBeforeUpdateHook)
	if err = o.doBeforeUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpdateHook function to empty object, but got: %#v", o)
	}
	appointmentBeforeUpdateHooks = []AppointmentHook{}

	AddAppointmentHook(boil.AfterUpdateHook, appointmentAfterUpdateHook)
	if err = o.doAfterUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpdateHook function to empty object, but got: %#v", o)
	}
	appointmentAfterUpdateHooks = []AppointmentHook{}

	AddAppointmentHook(boil.BeforeDeleteHook, appointmentBeforeDeleteHook)
	if err = o.doBeforeDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeDeleteHook function to empty object, but got: %#v", o)
	}
	appointmentBeforeDeleteHooks = []AppointmentHook{}

	AddAppointmentHook(boil.AfterDeleteHook, appointmentAfterDeleteHook)
	if err = o.doAfterDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterDeleteHook function to empty object, but got: %#v", o)
	}
	appointmentAfterDeleteHooks = []AppointmentHook{}

	AddAppointmentHook(boil.BeforeUpsertHook, appointmentBeforeUpsertHook)
	if err = o.doBeforeUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpsertHook function to empty object, but got: %#v", o)
	}
	appointmentBeforeUpsertHooks = []AppointmentHook{}

	AddAppointmentHook(boil.AfterUpsertHook, appointmentAfterUpsertHook)
	if err = o.doAfterUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpsertHook function to empty object, but got: %#v", o)
	}
	appointmentAfterUpsertHooks = []AppointmentHook{}
}

func testAppointmentsInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Appointment{}
	if err = randomize.Struct(seed, o, appointmentDBTypes, true, appointmentColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Appointment struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Appointments().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testAppointmentsInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Appointment{}
	if err = randomize.Struct(seed, o, appointmentDBTypes, true); err != nil {
		t.Errorf("Unable to randomize Appointment struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Whitelist(appointmentColumnsWithoutDefault...)); err != nil {
		t.Error(err)
	}

	count, err := Appointments().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testAppointmentToOneCourseUsingCourse(t *testing.T) {
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var local Appointment
	var foreign Course

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, appointmentDBTypes, false, appointmentColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Appointment struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, courseDBTypes, false, courseColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Course struct: %s", err)
	}

	if err := foreign.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	local.CourseID = foreign.ID
	if err := local.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.Course().One(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	if check.ID != foreign.ID {
		t.Errorf("want: %v, got %v", foreign.ID, check.ID)
	}

	slice := AppointmentSlice{&local}
	if err = local.L.LoadCourse(ctx, tx, false, (*[]*Appointment)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Course == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.Course = nil
	if err = local.L.LoadCourse(ctx, tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Course == nil {
		t.Error("struct should have been eager loaded")
	}
}

func testAppointmentToOneSetOpCourseUsingCourse(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Appointment
	var b, c Course

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, appointmentDBTypes, false, strmangle.SetComplement(appointmentPrimaryKeyColumns, appointmentColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, courseDBTypes, false, strmangle.SetComplement(coursePrimaryKeyColumns, courseColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, courseDBTypes, false, strmangle.SetComplement(coursePrimaryKeyColumns, courseColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*Course{&b, &c} {
		err = a.SetCourse(ctx, tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.Course != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.Appointments[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if a.CourseID != x.ID {
			t.Error("foreign key was wrong value", a.CourseID)
		}

		zero := reflect.Zero(reflect.TypeOf(a.CourseID))
		reflect.Indirect(reflect.ValueOf(&a.CourseID)).Set(zero)

		if err = a.Reload(ctx, tx); err != nil {
			t.Fatal("failed to reload", err)
		}

		if a.CourseID != x.ID {
			t.Error("foreign key was wrong value", a.CourseID, x.ID)
		}
	}
}

func testAppointmentsReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Appointment{}
	if err = randomize.Struct(seed, o, appointmentDBTypes, true, appointmentColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Appointment struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = o.Reload(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testAppointmentsReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Appointment{}
	if err = randomize.Struct(seed, o, appointmentDBTypes, true, appointmentColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Appointment struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := AppointmentSlice{o}

	if err = slice.ReloadAll(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testAppointmentsSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Appointment{}
	if err = randomize.Struct(seed, o, appointmentDBTypes, true, appointmentColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Appointment struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := Appointments().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	appointmentDBTypes = map[string]string{`ID`: `int`, `Date`: `timestamp`, `Location`: `varchar`, `Online`: `tinyint`, `CourseID`: `int`, `CreatedAt`: `timestamp`, `UpdatedAt`: `timestamp`, `DeletedAt`: `timestamp`}
	_                  = bytes.MinRead
)

func testAppointmentsUpdate(t *testing.T) {
	t.Parallel()

	if 0 == len(appointmentPrimaryKeyColumns) {
		t.Skip("Skipping table with no primary key columns")
	}
	if len(appointmentAllColumns) == len(appointmentPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &Appointment{}
	if err = randomize.Struct(seed, o, appointmentDBTypes, true, appointmentColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Appointment struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Appointments().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, appointmentDBTypes, true, appointmentPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize Appointment struct: %s", err)
	}

	if rowsAff, err := o.Update(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only affect one row but affected", rowsAff)
	}
}

func testAppointmentsSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(appointmentAllColumns) == len(appointmentPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &Appointment{}
	if err = randomize.Struct(seed, o, appointmentDBTypes, true, appointmentColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Appointment struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Appointments().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, appointmentDBTypes, true, appointmentPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize Appointment struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(appointmentAllColumns, appointmentPrimaryKeyColumns) {
		fields = appointmentAllColumns
	} else {
		fields = strmangle.SetComplement(
			appointmentAllColumns,
			appointmentPrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	typ := reflect.TypeOf(o).Elem()
	n := typ.NumField()

	updateMap := M{}
	for _, col := range fields {
		for i := 0; i < n; i++ {
			f := typ.Field(i)
			if f.Tag.Get("boil") == col {
				updateMap[col] = value.Field(i).Interface()
			}
		}
	}

	slice := AppointmentSlice{o}
	if rowsAff, err := slice.UpdateAll(ctx, tx, updateMap); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("wanted one record updated but got", rowsAff)
	}
}

func testAppointmentsUpsert(t *testing.T) {
	t.Parallel()

	if len(appointmentAllColumns) == len(appointmentPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}
	if len(mySQLAppointmentUniqueColumns) == 0 {
		t.Skip("Skipping table with no unique columns to conflict on")
	}

	seed := randomize.NewSeed()
	var err error
	// Attempt the INSERT side of an UPSERT
	o := Appointment{}
	if err = randomize.Struct(seed, &o, appointmentDBTypes, false); err != nil {
		t.Errorf("Unable to randomize Appointment struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Upsert(ctx, tx, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert Appointment: %s", err)
	}

	count, err := Appointments().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}

	// Attempt the UPDATE side of an UPSERT
	if err = randomize.Struct(seed, &o, appointmentDBTypes, false, appointmentPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize Appointment struct: %s", err)
	}

	if err = o.Upsert(ctx, tx, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert Appointment: %s", err)
	}

	count, err = Appointments().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}
}
