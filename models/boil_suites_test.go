// Code generated by SQLBoiler 4.8.6 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import "testing"

// This test suite runs each operation test in parallel.
// Example, if your database has 3 tables, the suite will run:
// table1, table2 and table3 Delete in parallel
// table1, table2 and table3 Insert in parallel, and so forth.
// It does NOT run each operation group in parallel.
// Separating the tests thusly grants avoidance of Postgres deadlocks.
func TestParent(t *testing.T) {
	t.Run("Appointments", testAppointments)
	t.Run("Certificates", testCertificates)
	t.Run("Courses", testCourses)
	t.Run("CourseHasFiles", testCourseHasFiles)
	t.Run("Directories", testDirectories)
	t.Run("Exams", testExams)
	t.Run("FieldOfStudies", testFieldOfStudies)
	t.Run("FieldOfStudyHasCourses", testFieldOfStudyHasCourses)
	t.Run("Files", testFiles)
	t.Run("Forums", testForums)
	t.Run("ForumEntries", testForumEntries)
	t.Run("GraduationLevels", testGraduationLevels)
	t.Run("Languages", testLanguages)
	t.Run("Notifications", testNotifications)
	t.Run("Roles", testRoles)
	t.Run("Submissions", testSubmissions)
	t.Run("Users", testUsers)
	t.Run("UserHasCourses", testUserHasCourses)
	t.Run("UserHasExams", testUserHasExams)
	t.Run("UserSubmissions", testUserSubmissions)
}

func TestSoftDelete(t *testing.T) {
	t.Run("Appointments", testAppointmentsSoftDelete)
	t.Run("Certificates", testCertificatesSoftDelete)
	t.Run("Courses", testCoursesSoftDelete)
	t.Run("CourseHasFiles", testCourseHasFilesSoftDelete)
	t.Run("Directories", testDirectoriesSoftDelete)
	t.Run("Exams", testExamsSoftDelete)
	t.Run("FieldOfStudies", testFieldOfStudiesSoftDelete)
	t.Run("Files", testFilesSoftDelete)
	t.Run("Forums", testForumsSoftDelete)
	t.Run("ForumEntries", testForumEntriesSoftDelete)
	t.Run("Notifications", testNotificationsSoftDelete)
	t.Run("Roles", testRolesSoftDelete)
	t.Run("Submissions", testSubmissionsSoftDelete)
	t.Run("Users", testUsersSoftDelete)
	t.Run("UserHasCourses", testUserHasCoursesSoftDelete)
	t.Run("UserHasExams", testUserHasExamsSoftDelete)
	t.Run("UserSubmissions", testUserSubmissionsSoftDelete)
}

func TestQuerySoftDeleteAll(t *testing.T) {
	t.Run("Appointments", testAppointmentsQuerySoftDeleteAll)
	t.Run("Certificates", testCertificatesQuerySoftDeleteAll)
	t.Run("Courses", testCoursesQuerySoftDeleteAll)
	t.Run("CourseHasFiles", testCourseHasFilesQuerySoftDeleteAll)
	t.Run("Directories", testDirectoriesQuerySoftDeleteAll)
	t.Run("Exams", testExamsQuerySoftDeleteAll)
	t.Run("FieldOfStudies", testFieldOfStudiesQuerySoftDeleteAll)
	t.Run("Files", testFilesQuerySoftDeleteAll)
	t.Run("Forums", testForumsQuerySoftDeleteAll)
	t.Run("ForumEntries", testForumEntriesQuerySoftDeleteAll)
	t.Run("Notifications", testNotificationsQuerySoftDeleteAll)
	t.Run("Roles", testRolesQuerySoftDeleteAll)
	t.Run("Submissions", testSubmissionsQuerySoftDeleteAll)
	t.Run("Users", testUsersQuerySoftDeleteAll)
	t.Run("UserHasCourses", testUserHasCoursesQuerySoftDeleteAll)
	t.Run("UserHasExams", testUserHasExamsQuerySoftDeleteAll)
	t.Run("UserSubmissions", testUserSubmissionsQuerySoftDeleteAll)
}

func TestSliceSoftDeleteAll(t *testing.T) {
	t.Run("Appointments", testAppointmentsSliceSoftDeleteAll)
	t.Run("Certificates", testCertificatesSliceSoftDeleteAll)
	t.Run("Courses", testCoursesSliceSoftDeleteAll)
	t.Run("CourseHasFiles", testCourseHasFilesSliceSoftDeleteAll)
	t.Run("Directories", testDirectoriesSliceSoftDeleteAll)
	t.Run("Exams", testExamsSliceSoftDeleteAll)
	t.Run("FieldOfStudies", testFieldOfStudiesSliceSoftDeleteAll)
	t.Run("Files", testFilesSliceSoftDeleteAll)
	t.Run("Forums", testForumsSliceSoftDeleteAll)
	t.Run("ForumEntries", testForumEntriesSliceSoftDeleteAll)
	t.Run("Notifications", testNotificationsSliceSoftDeleteAll)
	t.Run("Roles", testRolesSliceSoftDeleteAll)
	t.Run("Submissions", testSubmissionsSliceSoftDeleteAll)
	t.Run("Users", testUsersSliceSoftDeleteAll)
	t.Run("UserHasCourses", testUserHasCoursesSliceSoftDeleteAll)
	t.Run("UserHasExams", testUserHasExamsSliceSoftDeleteAll)
	t.Run("UserSubmissions", testUserSubmissionsSliceSoftDeleteAll)
}

func TestDelete(t *testing.T) {
	t.Run("Appointments", testAppointmentsDelete)
	t.Run("Certificates", testCertificatesDelete)
	t.Run("Courses", testCoursesDelete)
	t.Run("CourseHasFiles", testCourseHasFilesDelete)
	t.Run("Directories", testDirectoriesDelete)
	t.Run("Exams", testExamsDelete)
	t.Run("FieldOfStudies", testFieldOfStudiesDelete)
	t.Run("FieldOfStudyHasCourses", testFieldOfStudyHasCoursesDelete)
	t.Run("Files", testFilesDelete)
	t.Run("Forums", testForumsDelete)
	t.Run("ForumEntries", testForumEntriesDelete)
	t.Run("GraduationLevels", testGraduationLevelsDelete)
	t.Run("Languages", testLanguagesDelete)
	t.Run("Notifications", testNotificationsDelete)
	t.Run("Roles", testRolesDelete)
	t.Run("Submissions", testSubmissionsDelete)
	t.Run("Users", testUsersDelete)
	t.Run("UserHasCourses", testUserHasCoursesDelete)
	t.Run("UserHasExams", testUserHasExamsDelete)
	t.Run("UserSubmissions", testUserSubmissionsDelete)
}

func TestQueryDeleteAll(t *testing.T) {
	t.Run("Appointments", testAppointmentsQueryDeleteAll)
	t.Run("Certificates", testCertificatesQueryDeleteAll)
	t.Run("Courses", testCoursesQueryDeleteAll)
	t.Run("CourseHasFiles", testCourseHasFilesQueryDeleteAll)
	t.Run("Directories", testDirectoriesQueryDeleteAll)
	t.Run("Exams", testExamsQueryDeleteAll)
	t.Run("FieldOfStudies", testFieldOfStudiesQueryDeleteAll)
	t.Run("FieldOfStudyHasCourses", testFieldOfStudyHasCoursesQueryDeleteAll)
	t.Run("Files", testFilesQueryDeleteAll)
	t.Run("Forums", testForumsQueryDeleteAll)
	t.Run("ForumEntries", testForumEntriesQueryDeleteAll)
	t.Run("GraduationLevels", testGraduationLevelsQueryDeleteAll)
	t.Run("Languages", testLanguagesQueryDeleteAll)
	t.Run("Notifications", testNotificationsQueryDeleteAll)
	t.Run("Roles", testRolesQueryDeleteAll)
	t.Run("Submissions", testSubmissionsQueryDeleteAll)
	t.Run("Users", testUsersQueryDeleteAll)
	t.Run("UserHasCourses", testUserHasCoursesQueryDeleteAll)
	t.Run("UserHasExams", testUserHasExamsQueryDeleteAll)
	t.Run("UserSubmissions", testUserSubmissionsQueryDeleteAll)
}

func TestSliceDeleteAll(t *testing.T) {
	t.Run("Appointments", testAppointmentsSliceDeleteAll)
	t.Run("Certificates", testCertificatesSliceDeleteAll)
	t.Run("Courses", testCoursesSliceDeleteAll)
	t.Run("CourseHasFiles", testCourseHasFilesSliceDeleteAll)
	t.Run("Directories", testDirectoriesSliceDeleteAll)
	t.Run("Exams", testExamsSliceDeleteAll)
	t.Run("FieldOfStudies", testFieldOfStudiesSliceDeleteAll)
	t.Run("FieldOfStudyHasCourses", testFieldOfStudyHasCoursesSliceDeleteAll)
	t.Run("Files", testFilesSliceDeleteAll)
	t.Run("Forums", testForumsSliceDeleteAll)
	t.Run("ForumEntries", testForumEntriesSliceDeleteAll)
	t.Run("GraduationLevels", testGraduationLevelsSliceDeleteAll)
	t.Run("Languages", testLanguagesSliceDeleteAll)
	t.Run("Notifications", testNotificationsSliceDeleteAll)
	t.Run("Roles", testRolesSliceDeleteAll)
	t.Run("Submissions", testSubmissionsSliceDeleteAll)
	t.Run("Users", testUsersSliceDeleteAll)
	t.Run("UserHasCourses", testUserHasCoursesSliceDeleteAll)
	t.Run("UserHasExams", testUserHasExamsSliceDeleteAll)
	t.Run("UserSubmissions", testUserSubmissionsSliceDeleteAll)
}

func TestExists(t *testing.T) {
	t.Run("Appointments", testAppointmentsExists)
	t.Run("Certificates", testCertificatesExists)
	t.Run("Courses", testCoursesExists)
	t.Run("CourseHasFiles", testCourseHasFilesExists)
	t.Run("Directories", testDirectoriesExists)
	t.Run("Exams", testExamsExists)
	t.Run("FieldOfStudies", testFieldOfStudiesExists)
	t.Run("FieldOfStudyHasCourses", testFieldOfStudyHasCoursesExists)
	t.Run("Files", testFilesExists)
	t.Run("Forums", testForumsExists)
	t.Run("ForumEntries", testForumEntriesExists)
	t.Run("GraduationLevels", testGraduationLevelsExists)
	t.Run("Languages", testLanguagesExists)
	t.Run("Notifications", testNotificationsExists)
	t.Run("Roles", testRolesExists)
	t.Run("Submissions", testSubmissionsExists)
	t.Run("Users", testUsersExists)
	t.Run("UserHasCourses", testUserHasCoursesExists)
	t.Run("UserHasExams", testUserHasExamsExists)
	t.Run("UserSubmissions", testUserSubmissionsExists)
}

func TestFind(t *testing.T) {
	t.Run("Appointments", testAppointmentsFind)
	t.Run("Certificates", testCertificatesFind)
	t.Run("Courses", testCoursesFind)
	t.Run("CourseHasFiles", testCourseHasFilesFind)
	t.Run("Directories", testDirectoriesFind)
	t.Run("Exams", testExamsFind)
	t.Run("FieldOfStudies", testFieldOfStudiesFind)
	t.Run("FieldOfStudyHasCourses", testFieldOfStudyHasCoursesFind)
	t.Run("Files", testFilesFind)
	t.Run("Forums", testForumsFind)
	t.Run("ForumEntries", testForumEntriesFind)
	t.Run("GraduationLevels", testGraduationLevelsFind)
	t.Run("Languages", testLanguagesFind)
	t.Run("Notifications", testNotificationsFind)
	t.Run("Roles", testRolesFind)
	t.Run("Submissions", testSubmissionsFind)
	t.Run("Users", testUsersFind)
	t.Run("UserHasCourses", testUserHasCoursesFind)
	t.Run("UserHasExams", testUserHasExamsFind)
	t.Run("UserSubmissions", testUserSubmissionsFind)
}

func TestBind(t *testing.T) {
	t.Run("Appointments", testAppointmentsBind)
	t.Run("Certificates", testCertificatesBind)
	t.Run("Courses", testCoursesBind)
	t.Run("CourseHasFiles", testCourseHasFilesBind)
	t.Run("Directories", testDirectoriesBind)
	t.Run("Exams", testExamsBind)
	t.Run("FieldOfStudies", testFieldOfStudiesBind)
	t.Run("FieldOfStudyHasCourses", testFieldOfStudyHasCoursesBind)
	t.Run("Files", testFilesBind)
	t.Run("Forums", testForumsBind)
	t.Run("ForumEntries", testForumEntriesBind)
	t.Run("GraduationLevels", testGraduationLevelsBind)
	t.Run("Languages", testLanguagesBind)
	t.Run("Notifications", testNotificationsBind)
	t.Run("Roles", testRolesBind)
	t.Run("Submissions", testSubmissionsBind)
	t.Run("Users", testUsersBind)
	t.Run("UserHasCourses", testUserHasCoursesBind)
	t.Run("UserHasExams", testUserHasExamsBind)
	t.Run("UserSubmissions", testUserSubmissionsBind)
}

func TestOne(t *testing.T) {
	t.Run("Appointments", testAppointmentsOne)
	t.Run("Certificates", testCertificatesOne)
	t.Run("Courses", testCoursesOne)
	t.Run("CourseHasFiles", testCourseHasFilesOne)
	t.Run("Directories", testDirectoriesOne)
	t.Run("Exams", testExamsOne)
	t.Run("FieldOfStudies", testFieldOfStudiesOne)
	t.Run("FieldOfStudyHasCourses", testFieldOfStudyHasCoursesOne)
	t.Run("Files", testFilesOne)
	t.Run("Forums", testForumsOne)
	t.Run("ForumEntries", testForumEntriesOne)
	t.Run("GraduationLevels", testGraduationLevelsOne)
	t.Run("Languages", testLanguagesOne)
	t.Run("Notifications", testNotificationsOne)
	t.Run("Roles", testRolesOne)
	t.Run("Submissions", testSubmissionsOne)
	t.Run("Users", testUsersOne)
	t.Run("UserHasCourses", testUserHasCoursesOne)
	t.Run("UserHasExams", testUserHasExamsOne)
	t.Run("UserSubmissions", testUserSubmissionsOne)
}

func TestAll(t *testing.T) {
	t.Run("Appointments", testAppointmentsAll)
	t.Run("Certificates", testCertificatesAll)
	t.Run("Courses", testCoursesAll)
	t.Run("CourseHasFiles", testCourseHasFilesAll)
	t.Run("Directories", testDirectoriesAll)
	t.Run("Exams", testExamsAll)
	t.Run("FieldOfStudies", testFieldOfStudiesAll)
	t.Run("FieldOfStudyHasCourses", testFieldOfStudyHasCoursesAll)
	t.Run("Files", testFilesAll)
	t.Run("Forums", testForumsAll)
	t.Run("ForumEntries", testForumEntriesAll)
	t.Run("GraduationLevels", testGraduationLevelsAll)
	t.Run("Languages", testLanguagesAll)
	t.Run("Notifications", testNotificationsAll)
	t.Run("Roles", testRolesAll)
	t.Run("Submissions", testSubmissionsAll)
	t.Run("Users", testUsersAll)
	t.Run("UserHasCourses", testUserHasCoursesAll)
	t.Run("UserHasExams", testUserHasExamsAll)
	t.Run("UserSubmissions", testUserSubmissionsAll)
}

func TestCount(t *testing.T) {
	t.Run("Appointments", testAppointmentsCount)
	t.Run("Certificates", testCertificatesCount)
	t.Run("Courses", testCoursesCount)
	t.Run("CourseHasFiles", testCourseHasFilesCount)
	t.Run("Directories", testDirectoriesCount)
	t.Run("Exams", testExamsCount)
	t.Run("FieldOfStudies", testFieldOfStudiesCount)
	t.Run("FieldOfStudyHasCourses", testFieldOfStudyHasCoursesCount)
	t.Run("Files", testFilesCount)
	t.Run("Forums", testForumsCount)
	t.Run("ForumEntries", testForumEntriesCount)
	t.Run("GraduationLevels", testGraduationLevelsCount)
	t.Run("Languages", testLanguagesCount)
	t.Run("Notifications", testNotificationsCount)
	t.Run("Roles", testRolesCount)
	t.Run("Submissions", testSubmissionsCount)
	t.Run("Users", testUsersCount)
	t.Run("UserHasCourses", testUserHasCoursesCount)
	t.Run("UserHasExams", testUserHasExamsCount)
	t.Run("UserSubmissions", testUserSubmissionsCount)
}

func TestHooks(t *testing.T) {
	t.Run("Appointments", testAppointmentsHooks)
	t.Run("Certificates", testCertificatesHooks)
	t.Run("Courses", testCoursesHooks)
	t.Run("CourseHasFiles", testCourseHasFilesHooks)
	t.Run("Directories", testDirectoriesHooks)
	t.Run("Exams", testExamsHooks)
	t.Run("FieldOfStudies", testFieldOfStudiesHooks)
	t.Run("FieldOfStudyHasCourses", testFieldOfStudyHasCoursesHooks)
	t.Run("Files", testFilesHooks)
	t.Run("Forums", testForumsHooks)
	t.Run("ForumEntries", testForumEntriesHooks)
	t.Run("GraduationLevels", testGraduationLevelsHooks)
	t.Run("Languages", testLanguagesHooks)
	t.Run("Notifications", testNotificationsHooks)
	t.Run("Roles", testRolesHooks)
	t.Run("Submissions", testSubmissionsHooks)
	t.Run("Users", testUsersHooks)
	t.Run("UserHasCourses", testUserHasCoursesHooks)
	t.Run("UserHasExams", testUserHasExamsHooks)
	t.Run("UserSubmissions", testUserSubmissionsHooks)
}

func TestInsert(t *testing.T) {
	t.Run("Appointments", testAppointmentsInsert)
	t.Run("Appointments", testAppointmentsInsertWhitelist)
	t.Run("Certificates", testCertificatesInsert)
	t.Run("Certificates", testCertificatesInsertWhitelist)
	t.Run("Courses", testCoursesInsert)
	t.Run("Courses", testCoursesInsertWhitelist)
	t.Run("CourseHasFiles", testCourseHasFilesInsert)
	t.Run("CourseHasFiles", testCourseHasFilesInsertWhitelist)
	t.Run("Directories", testDirectoriesInsert)
	t.Run("Directories", testDirectoriesInsertWhitelist)
	t.Run("Exams", testExamsInsert)
	t.Run("Exams", testExamsInsertWhitelist)
	t.Run("FieldOfStudies", testFieldOfStudiesInsert)
	t.Run("FieldOfStudies", testFieldOfStudiesInsertWhitelist)
	t.Run("FieldOfStudyHasCourses", testFieldOfStudyHasCoursesInsert)
	t.Run("FieldOfStudyHasCourses", testFieldOfStudyHasCoursesInsertWhitelist)
	t.Run("Files", testFilesInsert)
	t.Run("Files", testFilesInsertWhitelist)
	t.Run("Forums", testForumsInsert)
	t.Run("Forums", testForumsInsertWhitelist)
	t.Run("ForumEntries", testForumEntriesInsert)
	t.Run("ForumEntries", testForumEntriesInsertWhitelist)
	t.Run("GraduationLevels", testGraduationLevelsInsert)
	t.Run("GraduationLevels", testGraduationLevelsInsertWhitelist)
	t.Run("Languages", testLanguagesInsert)
	t.Run("Languages", testLanguagesInsertWhitelist)
	t.Run("Notifications", testNotificationsInsert)
	t.Run("Notifications", testNotificationsInsertWhitelist)
	t.Run("Roles", testRolesInsert)
	t.Run("Roles", testRolesInsertWhitelist)
	t.Run("Submissions", testSubmissionsInsert)
	t.Run("Submissions", testSubmissionsInsertWhitelist)
	t.Run("Users", testUsersInsert)
	t.Run("Users", testUsersInsertWhitelist)
	t.Run("UserHasCourses", testUserHasCoursesInsert)
	t.Run("UserHasCourses", testUserHasCoursesInsertWhitelist)
	t.Run("UserHasExams", testUserHasExamsInsert)
	t.Run("UserHasExams", testUserHasExamsInsertWhitelist)
	t.Run("UserSubmissions", testUserSubmissionsInsert)
	t.Run("UserSubmissions", testUserSubmissionsInsertWhitelist)
}

// TestToOne tests cannot be run in parallel
// or deadlocks can occur.
func TestToOne(t *testing.T) {
	t.Run("AppointmentToCourseUsingCourse", testAppointmentToOneCourseUsingCourse)
	t.Run("CertificateToCourseUsingLinkedCourse", testCertificateToOneCourseUsingLinkedCourse)
	t.Run("CertificateToExamUsingExam", testCertificateToOneExamUsingExam)
	t.Run("CertificateToUserUsingUser", testCertificateToOneUserUsingUser)
	t.Run("CourseToForumUsingForum", testCourseToOneForumUsingForum)
	t.Run("CourseHasFileToCourseUsingCourse", testCourseHasFileToOneCourseUsingCourse)
	t.Run("CourseHasFileToFileUsingFile", testCourseHasFileToOneFileUsingFile)
	t.Run("DirectoryToCourseUsingCourse", testDirectoryToOneCourseUsingCourse)
	t.Run("ExamToCourseUsingCourse", testExamToOneCourseUsingCourse)
	t.Run("ExamToUserUsingCreator", testExamToOneUserUsingCreator)
	t.Run("FieldOfStudyHasCourseToCourseUsingCourse", testFieldOfStudyHasCourseToOneCourseUsingCourse)
	t.Run("FieldOfStudyHasCourseToFieldOfStudyUsingFieldOfStudy", testFieldOfStudyHasCourseToOneFieldOfStudyUsingFieldOfStudy)
	t.Run("FileToUserUsingUploader", testFileToOneUserUsingUploader)
	t.Run("ForumEntryToForumUsingForum", testForumEntryToOneForumUsingForum)
	t.Run("ForumEntryToForumEntryUsingInReplyToForumEntry", testForumEntryToOneForumEntryUsingInReplyToForumEntry)
	t.Run("ForumEntryToUserUsingAuthor", testForumEntryToOneUserUsingAuthor)
	t.Run("NotificationToUserUsingUserTo", testNotificationToOneUserUsingUserTo)
	t.Run("SubmissionToCourseUsingCourse", testSubmissionToOneCourseUsingCourse)
	t.Run("UserToFileUsingProfilePictureFile", testUserToOneFileUsingProfilePictureFile)
	t.Run("UserToGraduationLevelUsingUserGraduationLevel", testUserToOneGraduationLevelUsingUserGraduationLevel)
	t.Run("UserToLanguageUsingPreferredLanguage", testUserToOneLanguageUsingPreferredLanguage)
	t.Run("UserToRoleUsingRole", testUserToOneRoleUsingRole)
	t.Run("UserHasCourseToCourseUsingCourse", testUserHasCourseToOneCourseUsingCourse)
	t.Run("UserHasCourseToRoleUsingRole", testUserHasCourseToOneRoleUsingRole)
	t.Run("UserHasCourseToUserUsingUser", testUserHasCourseToOneUserUsingUser)
	t.Run("UserHasExamToExamUsingExam", testUserHasExamToOneExamUsingExam)
	t.Run("UserHasExamToUserUsingUser", testUserHasExamToOneUserUsingUser)
	t.Run("UserSubmissionToUserUsingSubmitter", testUserSubmissionToOneUserUsingSubmitter)
	t.Run("UserSubmissionToSubmissionUsingSubmission", testUserSubmissionToOneSubmissionUsingSubmission)
}

// TestOneToOne tests cannot be run in parallel
// or deadlocks can occur.
func TestOneToOne(t *testing.T) {}

// TestToMany tests cannot be run in parallel
// or deadlocks can occur.
func TestToMany(t *testing.T) {
	t.Run("CertificateToCourses", testCertificateToManyCourses)
	t.Run("CourseToAppointments", testCourseToManyAppointments)
	t.Run("CourseToLinkedCourseCertificates", testCourseToManyLinkedCourseCertificates)
	t.Run("CourseToCourseHasFiles", testCourseToManyCourseHasFiles)
	t.Run("CourseToCertificates", testCourseToManyCertificates)
	t.Run("CourseToDirectories", testCourseToManyDirectories)
	t.Run("CourseToExams", testCourseToManyExams)
	t.Run("CourseToFieldOfStudyHasCourses", testCourseToManyFieldOfStudyHasCourses)
	t.Run("CourseToSubmissions", testCourseToManySubmissions)
	t.Run("CourseToUserHasCourses", testCourseToManyUserHasCourses)
	t.Run("DirectoryToFiles", testDirectoryToManyFiles)
	t.Run("ExamToCertificates", testExamToManyCertificates)
	t.Run("ExamToFiles", testExamToManyFiles)
	t.Run("ExamToUserHasExams", testExamToManyUserHasExams)
	t.Run("FieldOfStudyToFieldOfStudyHasCourses", testFieldOfStudyToManyFieldOfStudyHasCourses)
	t.Run("FieldOfStudyToUsers", testFieldOfStudyToManyUsers)
	t.Run("FileToCourseHasFiles", testFileToManyCourseHasFiles)
	t.Run("FileToDirectories", testFileToManyDirectories)
	t.Run("FileToExams", testFileToManyExams)
	t.Run("FileToSubmissions", testFileToManySubmissions)
	t.Run("FileToProfilePictureUsers", testFileToManyProfilePictureUsers)
	t.Run("FileToUserSubmissions", testFileToManyUserSubmissions)
	t.Run("ForumToCourses", testForumToManyCourses)
	t.Run("ForumToForumEntries", testForumToManyForumEntries)
	t.Run("ForumEntryToInReplyToForumEntries", testForumEntryToManyInReplyToForumEntries)
	t.Run("GraduationLevelToUsers", testGraduationLevelToManyUsers)
	t.Run("LanguageToPreferredLanguageUsers", testLanguageToManyPreferredLanguageUsers)
	t.Run("RoleToUsers", testRoleToManyUsers)
	t.Run("RoleToUserHasCourses", testRoleToManyUserHasCourses)
	t.Run("SubmissionToFiles", testSubmissionToManyFiles)
	t.Run("SubmissionToUserSubmissions", testSubmissionToManyUserSubmissions)
	t.Run("UserToCertificates", testUserToManyCertificates)
	t.Run("UserToCreatorExams", testUserToManyCreatorExams)
	t.Run("UserToUploaderFiles", testUserToManyUploaderFiles)
	t.Run("UserToAuthorForumEntries", testUserToManyAuthorForumEntries)
	t.Run("UserToUserToNotifications", testUserToManyUserToNotifications)
	t.Run("UserToUserHasCourses", testUserToManyUserHasCourses)
	t.Run("UserToUserHasExams", testUserToManyUserHasExams)
	t.Run("UserToFieldOfStudies", testUserToManyFieldOfStudies)
	t.Run("UserToSubmitterUserSubmissions", testUserToManySubmitterUserSubmissions)
	t.Run("UserSubmissionToFiles", testUserSubmissionToManyFiles)
}

// TestToOneSet tests cannot be run in parallel
// or deadlocks can occur.
func TestToOneSet(t *testing.T) {
	t.Run("AppointmentToCourseUsingAppointments", testAppointmentToOneSetOpCourseUsingCourse)
	t.Run("CertificateToCourseUsingLinkedCourseCertificates", testCertificateToOneSetOpCourseUsingLinkedCourse)
	t.Run("CertificateToExamUsingCertificates", testCertificateToOneSetOpExamUsingExam)
	t.Run("CertificateToUserUsingCertificates", testCertificateToOneSetOpUserUsingUser)
	t.Run("CourseToForumUsingCourses", testCourseToOneSetOpForumUsingForum)
	t.Run("CourseHasFileToCourseUsingCourseHasFiles", testCourseHasFileToOneSetOpCourseUsingCourse)
	t.Run("CourseHasFileToFileUsingCourseHasFiles", testCourseHasFileToOneSetOpFileUsingFile)
	t.Run("DirectoryToCourseUsingDirectories", testDirectoryToOneSetOpCourseUsingCourse)
	t.Run("ExamToCourseUsingExams", testExamToOneSetOpCourseUsingCourse)
	t.Run("ExamToUserUsingCreatorExams", testExamToOneSetOpUserUsingCreator)
	t.Run("FieldOfStudyHasCourseToCourseUsingFieldOfStudyHasCourses", testFieldOfStudyHasCourseToOneSetOpCourseUsingCourse)
	t.Run("FieldOfStudyHasCourseToFieldOfStudyUsingFieldOfStudyHasCourses", testFieldOfStudyHasCourseToOneSetOpFieldOfStudyUsingFieldOfStudy)
	t.Run("FileToUserUsingUploaderFiles", testFileToOneSetOpUserUsingUploader)
	t.Run("ForumEntryToForumUsingForumEntries", testForumEntryToOneSetOpForumUsingForum)
	t.Run("ForumEntryToForumEntryUsingInReplyToForumEntries", testForumEntryToOneSetOpForumEntryUsingInReplyToForumEntry)
	t.Run("ForumEntryToUserUsingAuthorForumEntries", testForumEntryToOneSetOpUserUsingAuthor)
	t.Run("NotificationToUserUsingUserToNotifications", testNotificationToOneSetOpUserUsingUserTo)
	t.Run("SubmissionToCourseUsingSubmissions", testSubmissionToOneSetOpCourseUsingCourse)
	t.Run("UserToFileUsingProfilePictureUsers", testUserToOneSetOpFileUsingProfilePictureFile)
	t.Run("UserToGraduationLevelUsingUsers", testUserToOneSetOpGraduationLevelUsingUserGraduationLevel)
	t.Run("UserToLanguageUsingPreferredLanguageUsers", testUserToOneSetOpLanguageUsingPreferredLanguage)
	t.Run("UserToRoleUsingUsers", testUserToOneSetOpRoleUsingRole)
	t.Run("UserHasCourseToCourseUsingUserHasCourses", testUserHasCourseToOneSetOpCourseUsingCourse)
	t.Run("UserHasCourseToRoleUsingUserHasCourses", testUserHasCourseToOneSetOpRoleUsingRole)
	t.Run("UserHasCourseToUserUsingUserHasCourses", testUserHasCourseToOneSetOpUserUsingUser)
	t.Run("UserHasExamToExamUsingUserHasExams", testUserHasExamToOneSetOpExamUsingExam)
	t.Run("UserHasExamToUserUsingUserHasExams", testUserHasExamToOneSetOpUserUsingUser)
	t.Run("UserSubmissionToUserUsingSubmitterUserSubmissions", testUserSubmissionToOneSetOpUserUsingSubmitter)
	t.Run("UserSubmissionToSubmissionUsingUserSubmissions", testUserSubmissionToOneSetOpSubmissionUsingSubmission)
}

// TestToOneRemove tests cannot be run in parallel
// or deadlocks can occur.
func TestToOneRemove(t *testing.T) {
	t.Run("CertificateToExamUsingCertificates", testCertificateToOneRemoveOpExamUsingExam)
	t.Run("ForumEntryToForumEntryUsingInReplyToForumEntries", testForumEntryToOneRemoveOpForumEntryUsingInReplyToForumEntry)
	t.Run("UserToFileUsingProfilePictureUsers", testUserToOneRemoveOpFileUsingProfilePictureFile)
	t.Run("UserToGraduationLevelUsingUsers", testUserToOneRemoveOpGraduationLevelUsingUserGraduationLevel)
}

// TestOneToOneSet tests cannot be run in parallel
// or deadlocks can occur.
func TestOneToOneSet(t *testing.T) {}

// TestOneToOneRemove tests cannot be run in parallel
// or deadlocks can occur.
func TestOneToOneRemove(t *testing.T) {}

// TestToManyAdd tests cannot be run in parallel
// or deadlocks can occur.
func TestToManyAdd(t *testing.T) {
	t.Run("CertificateToCourses", testCertificateToManyAddOpCourses)
	t.Run("CourseToAppointments", testCourseToManyAddOpAppointments)
	t.Run("CourseToLinkedCourseCertificates", testCourseToManyAddOpLinkedCourseCertificates)
	t.Run("CourseToCourseHasFiles", testCourseToManyAddOpCourseHasFiles)
	t.Run("CourseToCertificates", testCourseToManyAddOpCertificates)
	t.Run("CourseToDirectories", testCourseToManyAddOpDirectories)
	t.Run("CourseToExams", testCourseToManyAddOpExams)
	t.Run("CourseToFieldOfStudyHasCourses", testCourseToManyAddOpFieldOfStudyHasCourses)
	t.Run("CourseToSubmissions", testCourseToManyAddOpSubmissions)
	t.Run("CourseToUserHasCourses", testCourseToManyAddOpUserHasCourses)
	t.Run("DirectoryToFiles", testDirectoryToManyAddOpFiles)
	t.Run("ExamToCertificates", testExamToManyAddOpCertificates)
	t.Run("ExamToFiles", testExamToManyAddOpFiles)
	t.Run("ExamToUserHasExams", testExamToManyAddOpUserHasExams)
	t.Run("FieldOfStudyToFieldOfStudyHasCourses", testFieldOfStudyToManyAddOpFieldOfStudyHasCourses)
	t.Run("FieldOfStudyToUsers", testFieldOfStudyToManyAddOpUsers)
	t.Run("FileToCourseHasFiles", testFileToManyAddOpCourseHasFiles)
	t.Run("FileToDirectories", testFileToManyAddOpDirectories)
	t.Run("FileToExams", testFileToManyAddOpExams)
	t.Run("FileToSubmissions", testFileToManyAddOpSubmissions)
	t.Run("FileToProfilePictureUsers", testFileToManyAddOpProfilePictureUsers)
	t.Run("FileToUserSubmissions", testFileToManyAddOpUserSubmissions)
	t.Run("ForumToCourses", testForumToManyAddOpCourses)
	t.Run("ForumToForumEntries", testForumToManyAddOpForumEntries)
	t.Run("ForumEntryToInReplyToForumEntries", testForumEntryToManyAddOpInReplyToForumEntries)
	t.Run("GraduationLevelToUsers", testGraduationLevelToManyAddOpUsers)
	t.Run("LanguageToPreferredLanguageUsers", testLanguageToManyAddOpPreferredLanguageUsers)
	t.Run("RoleToUsers", testRoleToManyAddOpUsers)
	t.Run("RoleToUserHasCourses", testRoleToManyAddOpUserHasCourses)
	t.Run("SubmissionToFiles", testSubmissionToManyAddOpFiles)
	t.Run("SubmissionToUserSubmissions", testSubmissionToManyAddOpUserSubmissions)
	t.Run("UserToCertificates", testUserToManyAddOpCertificates)
	t.Run("UserToCreatorExams", testUserToManyAddOpCreatorExams)
	t.Run("UserToUploaderFiles", testUserToManyAddOpUploaderFiles)
	t.Run("UserToAuthorForumEntries", testUserToManyAddOpAuthorForumEntries)
	t.Run("UserToUserToNotifications", testUserToManyAddOpUserToNotifications)
	t.Run("UserToUserHasCourses", testUserToManyAddOpUserHasCourses)
	t.Run("UserToUserHasExams", testUserToManyAddOpUserHasExams)
	t.Run("UserToFieldOfStudies", testUserToManyAddOpFieldOfStudies)
	t.Run("UserToSubmitterUserSubmissions", testUserToManyAddOpSubmitterUserSubmissions)
	t.Run("UserSubmissionToFiles", testUserSubmissionToManyAddOpFiles)
}

// TestToManySet tests cannot be run in parallel
// or deadlocks can occur.
func TestToManySet(t *testing.T) {
	t.Run("CertificateToCourses", testCertificateToManySetOpCourses)
	t.Run("CourseToCertificates", testCourseToManySetOpCertificates)
	t.Run("DirectoryToFiles", testDirectoryToManySetOpFiles)
	t.Run("ExamToCertificates", testExamToManySetOpCertificates)
	t.Run("ExamToFiles", testExamToManySetOpFiles)
	t.Run("FieldOfStudyToUsers", testFieldOfStudyToManySetOpUsers)
	t.Run("FileToDirectories", testFileToManySetOpDirectories)
	t.Run("FileToExams", testFileToManySetOpExams)
	t.Run("FileToSubmissions", testFileToManySetOpSubmissions)
	t.Run("FileToProfilePictureUsers", testFileToManySetOpProfilePictureUsers)
	t.Run("FileToUserSubmissions", testFileToManySetOpUserSubmissions)
	t.Run("ForumEntryToInReplyToForumEntries", testForumEntryToManySetOpInReplyToForumEntries)
	t.Run("GraduationLevelToUsers", testGraduationLevelToManySetOpUsers)
	t.Run("SubmissionToFiles", testSubmissionToManySetOpFiles)
	t.Run("UserToFieldOfStudies", testUserToManySetOpFieldOfStudies)
	t.Run("UserSubmissionToFiles", testUserSubmissionToManySetOpFiles)
}

// TestToManyRemove tests cannot be run in parallel
// or deadlocks can occur.
func TestToManyRemove(t *testing.T) {
	t.Run("CertificateToCourses", testCertificateToManyRemoveOpCourses)
	t.Run("CourseToCertificates", testCourseToManyRemoveOpCertificates)
	t.Run("DirectoryToFiles", testDirectoryToManyRemoveOpFiles)
	t.Run("ExamToCertificates", testExamToManyRemoveOpCertificates)
	t.Run("ExamToFiles", testExamToManyRemoveOpFiles)
	t.Run("FieldOfStudyToUsers", testFieldOfStudyToManyRemoveOpUsers)
	t.Run("FileToDirectories", testFileToManyRemoveOpDirectories)
	t.Run("FileToExams", testFileToManyRemoveOpExams)
	t.Run("FileToSubmissions", testFileToManyRemoveOpSubmissions)
	t.Run("FileToProfilePictureUsers", testFileToManyRemoveOpProfilePictureUsers)
	t.Run("FileToUserSubmissions", testFileToManyRemoveOpUserSubmissions)
	t.Run("ForumEntryToInReplyToForumEntries", testForumEntryToManyRemoveOpInReplyToForumEntries)
	t.Run("GraduationLevelToUsers", testGraduationLevelToManyRemoveOpUsers)
	t.Run("SubmissionToFiles", testSubmissionToManyRemoveOpFiles)
	t.Run("UserToFieldOfStudies", testUserToManyRemoveOpFieldOfStudies)
	t.Run("UserSubmissionToFiles", testUserSubmissionToManyRemoveOpFiles)
}

func TestReload(t *testing.T) {
	t.Run("Appointments", testAppointmentsReload)
	t.Run("Certificates", testCertificatesReload)
	t.Run("Courses", testCoursesReload)
	t.Run("CourseHasFiles", testCourseHasFilesReload)
	t.Run("Directories", testDirectoriesReload)
	t.Run("Exams", testExamsReload)
	t.Run("FieldOfStudies", testFieldOfStudiesReload)
	t.Run("FieldOfStudyHasCourses", testFieldOfStudyHasCoursesReload)
	t.Run("Files", testFilesReload)
	t.Run("Forums", testForumsReload)
	t.Run("ForumEntries", testForumEntriesReload)
	t.Run("GraduationLevels", testGraduationLevelsReload)
	t.Run("Languages", testLanguagesReload)
	t.Run("Notifications", testNotificationsReload)
	t.Run("Roles", testRolesReload)
	t.Run("Submissions", testSubmissionsReload)
	t.Run("Users", testUsersReload)
	t.Run("UserHasCourses", testUserHasCoursesReload)
	t.Run("UserHasExams", testUserHasExamsReload)
	t.Run("UserSubmissions", testUserSubmissionsReload)
}

func TestReloadAll(t *testing.T) {
	t.Run("Appointments", testAppointmentsReloadAll)
	t.Run("Certificates", testCertificatesReloadAll)
	t.Run("Courses", testCoursesReloadAll)
	t.Run("CourseHasFiles", testCourseHasFilesReloadAll)
	t.Run("Directories", testDirectoriesReloadAll)
	t.Run("Exams", testExamsReloadAll)
	t.Run("FieldOfStudies", testFieldOfStudiesReloadAll)
	t.Run("FieldOfStudyHasCourses", testFieldOfStudyHasCoursesReloadAll)
	t.Run("Files", testFilesReloadAll)
	t.Run("Forums", testForumsReloadAll)
	t.Run("ForumEntries", testForumEntriesReloadAll)
	t.Run("GraduationLevels", testGraduationLevelsReloadAll)
	t.Run("Languages", testLanguagesReloadAll)
	t.Run("Notifications", testNotificationsReloadAll)
	t.Run("Roles", testRolesReloadAll)
	t.Run("Submissions", testSubmissionsReloadAll)
	t.Run("Users", testUsersReloadAll)
	t.Run("UserHasCourses", testUserHasCoursesReloadAll)
	t.Run("UserHasExams", testUserHasExamsReloadAll)
	t.Run("UserSubmissions", testUserSubmissionsReloadAll)
}

func TestSelect(t *testing.T) {
	t.Run("Appointments", testAppointmentsSelect)
	t.Run("Certificates", testCertificatesSelect)
	t.Run("Courses", testCoursesSelect)
	t.Run("CourseHasFiles", testCourseHasFilesSelect)
	t.Run("Directories", testDirectoriesSelect)
	t.Run("Exams", testExamsSelect)
	t.Run("FieldOfStudies", testFieldOfStudiesSelect)
	t.Run("FieldOfStudyHasCourses", testFieldOfStudyHasCoursesSelect)
	t.Run("Files", testFilesSelect)
	t.Run("Forums", testForumsSelect)
	t.Run("ForumEntries", testForumEntriesSelect)
	t.Run("GraduationLevels", testGraduationLevelsSelect)
	t.Run("Languages", testLanguagesSelect)
	t.Run("Notifications", testNotificationsSelect)
	t.Run("Roles", testRolesSelect)
	t.Run("Submissions", testSubmissionsSelect)
	t.Run("Users", testUsersSelect)
	t.Run("UserHasCourses", testUserHasCoursesSelect)
	t.Run("UserHasExams", testUserHasExamsSelect)
	t.Run("UserSubmissions", testUserSubmissionsSelect)
}

func TestUpdate(t *testing.T) {
	t.Run("Appointments", testAppointmentsUpdate)
	t.Run("Certificates", testCertificatesUpdate)
	t.Run("Courses", testCoursesUpdate)
	t.Run("CourseHasFiles", testCourseHasFilesUpdate)
	t.Run("Directories", testDirectoriesUpdate)
	t.Run("Exams", testExamsUpdate)
	t.Run("FieldOfStudies", testFieldOfStudiesUpdate)
	t.Run("FieldOfStudyHasCourses", testFieldOfStudyHasCoursesUpdate)
	t.Run("Files", testFilesUpdate)
	t.Run("Forums", testForumsUpdate)
	t.Run("ForumEntries", testForumEntriesUpdate)
	t.Run("GraduationLevels", testGraduationLevelsUpdate)
	t.Run("Languages", testLanguagesUpdate)
	t.Run("Notifications", testNotificationsUpdate)
	t.Run("Roles", testRolesUpdate)
	t.Run("Submissions", testSubmissionsUpdate)
	t.Run("Users", testUsersUpdate)
	t.Run("UserHasCourses", testUserHasCoursesUpdate)
	t.Run("UserHasExams", testUserHasExamsUpdate)
	t.Run("UserSubmissions", testUserSubmissionsUpdate)
}

func TestSliceUpdateAll(t *testing.T) {
	t.Run("Appointments", testAppointmentsSliceUpdateAll)
	t.Run("Certificates", testCertificatesSliceUpdateAll)
	t.Run("Courses", testCoursesSliceUpdateAll)
	t.Run("CourseHasFiles", testCourseHasFilesSliceUpdateAll)
	t.Run("Directories", testDirectoriesSliceUpdateAll)
	t.Run("Exams", testExamsSliceUpdateAll)
	t.Run("FieldOfStudies", testFieldOfStudiesSliceUpdateAll)
	t.Run("FieldOfStudyHasCourses", testFieldOfStudyHasCoursesSliceUpdateAll)
	t.Run("Files", testFilesSliceUpdateAll)
	t.Run("Forums", testForumsSliceUpdateAll)
	t.Run("ForumEntries", testForumEntriesSliceUpdateAll)
	t.Run("GraduationLevels", testGraduationLevelsSliceUpdateAll)
	t.Run("Languages", testLanguagesSliceUpdateAll)
	t.Run("Notifications", testNotificationsSliceUpdateAll)
	t.Run("Roles", testRolesSliceUpdateAll)
	t.Run("Submissions", testSubmissionsSliceUpdateAll)
	t.Run("Users", testUsersSliceUpdateAll)
	t.Run("UserHasCourses", testUserHasCoursesSliceUpdateAll)
	t.Run("UserHasExams", testUserHasExamsSliceUpdateAll)
	t.Run("UserSubmissions", testUserSubmissionsSliceUpdateAll)
}
