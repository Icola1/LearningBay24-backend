// Code generated by SQLBoiler 4.8.6 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"bytes"
	"context"
	"reflect"
	"testing"

	"github.com/volatiletech/randomize"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/strmangle"
)

var (
	// Relationships sometimes use the reflection helper queries.Equal/queries.Assign
	// so force a package dependency in case they don't.
	_ = queries.Equal
)

func testFieldOfStudies(t *testing.T) {
	t.Parallel()

	query := FieldOfStudies()

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}

func testFieldOfStudiesSoftDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &FieldOfStudy{}
	if err = randomize.Struct(seed, o, fieldOfStudyDBTypes, true, fieldOfStudyColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize FieldOfStudy struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := o.Delete(ctx, tx, false); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := FieldOfStudies().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testFieldOfStudiesQuerySoftDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &FieldOfStudy{}
	if err = randomize.Struct(seed, o, fieldOfStudyDBTypes, true, fieldOfStudyColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize FieldOfStudy struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := FieldOfStudies().DeleteAll(ctx, tx, false); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := FieldOfStudies().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testFieldOfStudiesSliceSoftDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &FieldOfStudy{}
	if err = randomize.Struct(seed, o, fieldOfStudyDBTypes, true, fieldOfStudyColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize FieldOfStudy struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := FieldOfStudySlice{o}

	if rowsAff, err := slice.DeleteAll(ctx, tx, false); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := FieldOfStudies().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testFieldOfStudiesDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &FieldOfStudy{}
	if err = randomize.Struct(seed, o, fieldOfStudyDBTypes, true, fieldOfStudyColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize FieldOfStudy struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := o.Delete(ctx, tx, true); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := FieldOfStudies().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testFieldOfStudiesQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &FieldOfStudy{}
	if err = randomize.Struct(seed, o, fieldOfStudyDBTypes, true, fieldOfStudyColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize FieldOfStudy struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := FieldOfStudies().DeleteAll(ctx, tx, true); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := FieldOfStudies().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testFieldOfStudiesSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &FieldOfStudy{}
	if err = randomize.Struct(seed, o, fieldOfStudyDBTypes, true, fieldOfStudyColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize FieldOfStudy struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := FieldOfStudySlice{o}

	if rowsAff, err := slice.DeleteAll(ctx, tx, true); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := FieldOfStudies().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testFieldOfStudiesExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &FieldOfStudy{}
	if err = randomize.Struct(seed, o, fieldOfStudyDBTypes, true, fieldOfStudyColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize FieldOfStudy struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	e, err := FieldOfStudyExists(ctx, tx, o.ID)
	if err != nil {
		t.Errorf("Unable to check if FieldOfStudy exists: %s", err)
	}
	if !e {
		t.Errorf("Expected FieldOfStudyExists to return true, but got false.")
	}
}

func testFieldOfStudiesFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &FieldOfStudy{}
	if err = randomize.Struct(seed, o, fieldOfStudyDBTypes, true, fieldOfStudyColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize FieldOfStudy struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	fieldOfStudyFound, err := FindFieldOfStudy(ctx, tx, o.ID)
	if err != nil {
		t.Error(err)
	}

	if fieldOfStudyFound == nil {
		t.Error("want a record, got nil")
	}
}

func testFieldOfStudiesBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &FieldOfStudy{}
	if err = randomize.Struct(seed, o, fieldOfStudyDBTypes, true, fieldOfStudyColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize FieldOfStudy struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = FieldOfStudies().Bind(ctx, tx, o); err != nil {
		t.Error(err)
	}
}

func testFieldOfStudiesOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &FieldOfStudy{}
	if err = randomize.Struct(seed, o, fieldOfStudyDBTypes, true, fieldOfStudyColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize FieldOfStudy struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if x, err := FieldOfStudies().One(ctx, tx); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testFieldOfStudiesAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	fieldOfStudyOne := &FieldOfStudy{}
	fieldOfStudyTwo := &FieldOfStudy{}
	if err = randomize.Struct(seed, fieldOfStudyOne, fieldOfStudyDBTypes, false, fieldOfStudyColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize FieldOfStudy struct: %s", err)
	}
	if err = randomize.Struct(seed, fieldOfStudyTwo, fieldOfStudyDBTypes, false, fieldOfStudyColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize FieldOfStudy struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = fieldOfStudyOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = fieldOfStudyTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := FieldOfStudies().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testFieldOfStudiesCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	fieldOfStudyOne := &FieldOfStudy{}
	fieldOfStudyTwo := &FieldOfStudy{}
	if err = randomize.Struct(seed, fieldOfStudyOne, fieldOfStudyDBTypes, false, fieldOfStudyColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize FieldOfStudy struct: %s", err)
	}
	if err = randomize.Struct(seed, fieldOfStudyTwo, fieldOfStudyDBTypes, false, fieldOfStudyColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize FieldOfStudy struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = fieldOfStudyOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = fieldOfStudyTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := FieldOfStudies().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}

func fieldOfStudyBeforeInsertHook(ctx context.Context, e boil.ContextExecutor, o *FieldOfStudy) error {
	*o = FieldOfStudy{}
	return nil
}

func fieldOfStudyAfterInsertHook(ctx context.Context, e boil.ContextExecutor, o *FieldOfStudy) error {
	*o = FieldOfStudy{}
	return nil
}

func fieldOfStudyAfterSelectHook(ctx context.Context, e boil.ContextExecutor, o *FieldOfStudy) error {
	*o = FieldOfStudy{}
	return nil
}

func fieldOfStudyBeforeUpdateHook(ctx context.Context, e boil.ContextExecutor, o *FieldOfStudy) error {
	*o = FieldOfStudy{}
	return nil
}

func fieldOfStudyAfterUpdateHook(ctx context.Context, e boil.ContextExecutor, o *FieldOfStudy) error {
	*o = FieldOfStudy{}
	return nil
}

func fieldOfStudyBeforeDeleteHook(ctx context.Context, e boil.ContextExecutor, o *FieldOfStudy) error {
	*o = FieldOfStudy{}
	return nil
}

func fieldOfStudyAfterDeleteHook(ctx context.Context, e boil.ContextExecutor, o *FieldOfStudy) error {
	*o = FieldOfStudy{}
	return nil
}

func fieldOfStudyBeforeUpsertHook(ctx context.Context, e boil.ContextExecutor, o *FieldOfStudy) error {
	*o = FieldOfStudy{}
	return nil
}

func fieldOfStudyAfterUpsertHook(ctx context.Context, e boil.ContextExecutor, o *FieldOfStudy) error {
	*o = FieldOfStudy{}
	return nil
}

func testFieldOfStudiesHooks(t *testing.T) {
	t.Parallel()

	var err error

	ctx := context.Background()
	empty := &FieldOfStudy{}
	o := &FieldOfStudy{}

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, o, fieldOfStudyDBTypes, false); err != nil {
		t.Errorf("Unable to randomize FieldOfStudy object: %s", err)
	}

	AddFieldOfStudyHook(boil.BeforeInsertHook, fieldOfStudyBeforeInsertHook)
	if err = o.doBeforeInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeInsertHook function to empty object, but got: %#v", o)
	}
	fieldOfStudyBeforeInsertHooks = []FieldOfStudyHook{}

	AddFieldOfStudyHook(boil.AfterInsertHook, fieldOfStudyAfterInsertHook)
	if err = o.doAfterInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterInsertHook function to empty object, but got: %#v", o)
	}
	fieldOfStudyAfterInsertHooks = []FieldOfStudyHook{}

	AddFieldOfStudyHook(boil.AfterSelectHook, fieldOfStudyAfterSelectHook)
	if err = o.doAfterSelectHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterSelectHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterSelectHook function to empty object, but got: %#v", o)
	}
	fieldOfStudyAfterSelectHooks = []FieldOfStudyHook{}

	AddFieldOfStudyHook(boil.BeforeUpdateHook, fieldOfStudyBeforeUpdateHook)
	if err = o.doBeforeUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpdateHook function to empty object, but got: %#v", o)
	}
	fieldOfStudyBeforeUpdateHooks = []FieldOfStudyHook{}

	AddFieldOfStudyHook(boil.AfterUpdateHook, fieldOfStudyAfterUpdateHook)
	if err = o.doAfterUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpdateHook function to empty object, but got: %#v", o)
	}
	fieldOfStudyAfterUpdateHooks = []FieldOfStudyHook{}

	AddFieldOfStudyHook(boil.BeforeDeleteHook, fieldOfStudyBeforeDeleteHook)
	if err = o.doBeforeDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeDeleteHook function to empty object, but got: %#v", o)
	}
	fieldOfStudyBeforeDeleteHooks = []FieldOfStudyHook{}

	AddFieldOfStudyHook(boil.AfterDeleteHook, fieldOfStudyAfterDeleteHook)
	if err = o.doAfterDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterDeleteHook function to empty object, but got: %#v", o)
	}
	fieldOfStudyAfterDeleteHooks = []FieldOfStudyHook{}

	AddFieldOfStudyHook(boil.BeforeUpsertHook, fieldOfStudyBeforeUpsertHook)
	if err = o.doBeforeUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpsertHook function to empty object, but got: %#v", o)
	}
	fieldOfStudyBeforeUpsertHooks = []FieldOfStudyHook{}

	AddFieldOfStudyHook(boil.AfterUpsertHook, fieldOfStudyAfterUpsertHook)
	if err = o.doAfterUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpsertHook function to empty object, but got: %#v", o)
	}
	fieldOfStudyAfterUpsertHooks = []FieldOfStudyHook{}
}

func testFieldOfStudiesInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &FieldOfStudy{}
	if err = randomize.Struct(seed, o, fieldOfStudyDBTypes, true, fieldOfStudyColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize FieldOfStudy struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := FieldOfStudies().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testFieldOfStudiesInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &FieldOfStudy{}
	if err = randomize.Struct(seed, o, fieldOfStudyDBTypes, true); err != nil {
		t.Errorf("Unable to randomize FieldOfStudy struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Whitelist(fieldOfStudyColumnsWithoutDefault...)); err != nil {
		t.Error(err)
	}

	count, err := FieldOfStudies().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testFieldOfStudyToManyFieldOfStudyHasCourses(t *testing.T) {
	var err error
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a FieldOfStudy
	var b, c FieldOfStudyHasCourse

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, fieldOfStudyDBTypes, true, fieldOfStudyColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize FieldOfStudy struct: %s", err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = randomize.Struct(seed, &b, fieldOfStudyHasCourseDBTypes, false, fieldOfStudyHasCourseColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, fieldOfStudyHasCourseDBTypes, false, fieldOfStudyHasCourseColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}

	b.FieldOfStudyID = a.ID
	c.FieldOfStudyID = a.ID

	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := a.FieldOfStudyHasCourses().All(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	bFound, cFound := false, false
	for _, v := range check {
		if v.FieldOfStudyID == b.FieldOfStudyID {
			bFound = true
		}
		if v.FieldOfStudyID == c.FieldOfStudyID {
			cFound = true
		}
	}

	if !bFound {
		t.Error("expected to find b")
	}
	if !cFound {
		t.Error("expected to find c")
	}

	slice := FieldOfStudySlice{&a}
	if err = a.L.LoadFieldOfStudyHasCourses(ctx, tx, false, (*[]*FieldOfStudy)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.FieldOfStudyHasCourses); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	a.R.FieldOfStudyHasCourses = nil
	if err = a.L.LoadFieldOfStudyHasCourses(ctx, tx, true, &a, nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.FieldOfStudyHasCourses); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	if t.Failed() {
		t.Logf("%#v", check)
	}
}

func testFieldOfStudyToManyUsers(t *testing.T) {
	var err error
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a FieldOfStudy
	var b, c User

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, fieldOfStudyDBTypes, true, fieldOfStudyColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize FieldOfStudy struct: %s", err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = randomize.Struct(seed, &b, userDBTypes, false, userColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, userDBTypes, false, userColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}

	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	_, err = tx.Exec("insert into `user_has_field_of_study` (`field_of_study_id`, `user_id`) values (?, ?)", a.ID, b.ID)
	if err != nil {
		t.Fatal(err)
	}
	_, err = tx.Exec("insert into `user_has_field_of_study` (`field_of_study_id`, `user_id`) values (?, ?)", a.ID, c.ID)
	if err != nil {
		t.Fatal(err)
	}

	check, err := a.Users().All(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	bFound, cFound := false, false
	for _, v := range check {
		if v.ID == b.ID {
			bFound = true
		}
		if v.ID == c.ID {
			cFound = true
		}
	}

	if !bFound {
		t.Error("expected to find b")
	}
	if !cFound {
		t.Error("expected to find c")
	}

	slice := FieldOfStudySlice{&a}
	if err = a.L.LoadUsers(ctx, tx, false, (*[]*FieldOfStudy)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.Users); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	a.R.Users = nil
	if err = a.L.LoadUsers(ctx, tx, true, &a, nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.Users); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	if t.Failed() {
		t.Logf("%#v", check)
	}
}

func testFieldOfStudyToManyAddOpFieldOfStudyHasCourses(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a FieldOfStudy
	var b, c, d, e FieldOfStudyHasCourse

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, fieldOfStudyDBTypes, false, strmangle.SetComplement(fieldOfStudyPrimaryKeyColumns, fieldOfStudyColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*FieldOfStudyHasCourse{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, fieldOfStudyHasCourseDBTypes, false, strmangle.SetComplement(fieldOfStudyHasCoursePrimaryKeyColumns, fieldOfStudyHasCourseColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	foreignersSplitByInsertion := [][]*FieldOfStudyHasCourse{
		{&b, &c},
		{&d, &e},
	}

	for i, x := range foreignersSplitByInsertion {
		err = a.AddFieldOfStudyHasCourses(ctx, tx, i != 0, x...)
		if err != nil {
			t.Fatal(err)
		}

		first := x[0]
		second := x[1]

		if a.ID != first.FieldOfStudyID {
			t.Error("foreign key was wrong value", a.ID, first.FieldOfStudyID)
		}
		if a.ID != second.FieldOfStudyID {
			t.Error("foreign key was wrong value", a.ID, second.FieldOfStudyID)
		}

		if first.R.FieldOfStudy != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}
		if second.R.FieldOfStudy != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}

		if a.R.FieldOfStudyHasCourses[i*2] != first {
			t.Error("relationship struct slice not set to correct value")
		}
		if a.R.FieldOfStudyHasCourses[i*2+1] != second {
			t.Error("relationship struct slice not set to correct value")
		}

		count, err := a.FieldOfStudyHasCourses().Count(ctx, tx)
		if err != nil {
			t.Fatal(err)
		}
		if want := int64((i + 1) * 2); count != want {
			t.Error("want", want, "got", count)
		}
	}
}
func testFieldOfStudyToManyAddOpUsers(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a FieldOfStudy
	var b, c, d, e User

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, fieldOfStudyDBTypes, false, strmangle.SetComplement(fieldOfStudyPrimaryKeyColumns, fieldOfStudyColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*User{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, userDBTypes, false, strmangle.SetComplement(userPrimaryKeyColumns, userColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	foreignersSplitByInsertion := [][]*User{
		{&b, &c},
		{&d, &e},
	}

	for i, x := range foreignersSplitByInsertion {
		err = a.AddUsers(ctx, tx, i != 0, x...)
		if err != nil {
			t.Fatal(err)
		}

		first := x[0]
		second := x[1]

		if first.R.FieldOfStudies[0] != &a {
			t.Error("relationship was not added properly to the slice")
		}
		if second.R.FieldOfStudies[0] != &a {
			t.Error("relationship was not added properly to the slice")
		}

		if a.R.Users[i*2] != first {
			t.Error("relationship struct slice not set to correct value")
		}
		if a.R.Users[i*2+1] != second {
			t.Error("relationship struct slice not set to correct value")
		}

		count, err := a.Users().Count(ctx, tx)
		if err != nil {
			t.Fatal(err)
		}
		if want := int64((i + 1) * 2); count != want {
			t.Error("want", want, "got", count)
		}
	}
}

func testFieldOfStudyToManySetOpUsers(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a FieldOfStudy
	var b, c, d, e User

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, fieldOfStudyDBTypes, false, strmangle.SetComplement(fieldOfStudyPrimaryKeyColumns, fieldOfStudyColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*User{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, userDBTypes, false, strmangle.SetComplement(userPrimaryKeyColumns, userColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err = a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	err = a.SetUsers(ctx, tx, false, &b, &c)
	if err != nil {
		t.Fatal(err)
	}

	count, err := a.Users().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	err = a.SetUsers(ctx, tx, true, &d, &e)
	if err != nil {
		t.Fatal(err)
	}

	count, err = a.Users().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	// The following checks cannot be implemented since we have no handle
	// to these when we call Set(). Leaving them here as wishful thinking
	// and to let people know there's dragons.
	//
	// if len(b.R.FieldOfStudies) != 0 {
	// 	t.Error("relationship was not removed properly from the slice")
	// }
	// if len(c.R.FieldOfStudies) != 0 {
	// 	t.Error("relationship was not removed properly from the slice")
	// }
	if d.R.FieldOfStudies[0] != &a {
		t.Error("relationship was not added properly to the slice")
	}
	if e.R.FieldOfStudies[0] != &a {
		t.Error("relationship was not added properly to the slice")
	}

	if a.R.Users[0] != &d {
		t.Error("relationship struct slice not set to correct value")
	}
	if a.R.Users[1] != &e {
		t.Error("relationship struct slice not set to correct value")
	}
}

func testFieldOfStudyToManyRemoveOpUsers(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a FieldOfStudy
	var b, c, d, e User

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, fieldOfStudyDBTypes, false, strmangle.SetComplement(fieldOfStudyPrimaryKeyColumns, fieldOfStudyColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*User{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, userDBTypes, false, strmangle.SetComplement(userPrimaryKeyColumns, userColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	err = a.AddUsers(ctx, tx, true, foreigners...)
	if err != nil {
		t.Fatal(err)
	}

	count, err := a.Users().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 4 {
		t.Error("count was wrong:", count)
	}

	err = a.RemoveUsers(ctx, tx, foreigners[:2]...)
	if err != nil {
		t.Fatal(err)
	}

	count, err = a.Users().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	if len(b.R.FieldOfStudies) != 0 {
		t.Error("relationship was not removed properly from the slice")
	}
	if len(c.R.FieldOfStudies) != 0 {
		t.Error("relationship was not removed properly from the slice")
	}
	if d.R.FieldOfStudies[0] != &a {
		t.Error("relationship was not added properly to the foreign struct")
	}
	if e.R.FieldOfStudies[0] != &a {
		t.Error("relationship was not added properly to the foreign struct")
	}

	if len(a.R.Users) != 2 {
		t.Error("should have preserved two relationships")
	}

	// Removal doesn't do a stable deletion for performance so we have to flip the order
	if a.R.Users[1] != &d {
		t.Error("relationship to d should have been preserved")
	}
	if a.R.Users[0] != &e {
		t.Error("relationship to e should have been preserved")
	}
}

func testFieldOfStudiesReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &FieldOfStudy{}
	if err = randomize.Struct(seed, o, fieldOfStudyDBTypes, true, fieldOfStudyColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize FieldOfStudy struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = o.Reload(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testFieldOfStudiesReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &FieldOfStudy{}
	if err = randomize.Struct(seed, o, fieldOfStudyDBTypes, true, fieldOfStudyColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize FieldOfStudy struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := FieldOfStudySlice{o}

	if err = slice.ReloadAll(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testFieldOfStudiesSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &FieldOfStudy{}
	if err = randomize.Struct(seed, o, fieldOfStudyDBTypes, true, fieldOfStudyColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize FieldOfStudy struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := FieldOfStudies().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	fieldOfStudyDBTypes = map[string]string{`ID`: `int`, `Name`: `varchar`, `Semesters`: `varchar`, `CreatedAt`: `timestamp`, `UpdatedAt`: `timestamp`, `DeletedAt`: `timestamp`}
	_                   = bytes.MinRead
)

func testFieldOfStudiesUpdate(t *testing.T) {
	t.Parallel()

	if 0 == len(fieldOfStudyPrimaryKeyColumns) {
		t.Skip("Skipping table with no primary key columns")
	}
	if len(fieldOfStudyAllColumns) == len(fieldOfStudyPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &FieldOfStudy{}
	if err = randomize.Struct(seed, o, fieldOfStudyDBTypes, true, fieldOfStudyColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize FieldOfStudy struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := FieldOfStudies().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, fieldOfStudyDBTypes, true, fieldOfStudyPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize FieldOfStudy struct: %s", err)
	}

	if rowsAff, err := o.Update(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only affect one row but affected", rowsAff)
	}
}

func testFieldOfStudiesSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(fieldOfStudyAllColumns) == len(fieldOfStudyPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &FieldOfStudy{}
	if err = randomize.Struct(seed, o, fieldOfStudyDBTypes, true, fieldOfStudyColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize FieldOfStudy struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := FieldOfStudies().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, fieldOfStudyDBTypes, true, fieldOfStudyPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize FieldOfStudy struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(fieldOfStudyAllColumns, fieldOfStudyPrimaryKeyColumns) {
		fields = fieldOfStudyAllColumns
	} else {
		fields = strmangle.SetComplement(
			fieldOfStudyAllColumns,
			fieldOfStudyPrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	typ := reflect.TypeOf(o).Elem()
	n := typ.NumField()

	updateMap := M{}
	for _, col := range fields {
		for i := 0; i < n; i++ {
			f := typ.Field(i)
			if f.Tag.Get("boil") == col {
				updateMap[col] = value.Field(i).Interface()
			}
		}
	}

	slice := FieldOfStudySlice{o}
	if rowsAff, err := slice.UpdateAll(ctx, tx, updateMap); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("wanted one record updated but got", rowsAff)
	}
}

func testFieldOfStudiesUpsert(t *testing.T) {
	t.Parallel()

	if len(fieldOfStudyAllColumns) == len(fieldOfStudyPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}
	if len(mySQLFieldOfStudyUniqueColumns) == 0 {
		t.Skip("Skipping table with no unique columns to conflict on")
	}

	seed := randomize.NewSeed()
	var err error
	// Attempt the INSERT side of an UPSERT
	o := FieldOfStudy{}
	if err = randomize.Struct(seed, &o, fieldOfStudyDBTypes, false); err != nil {
		t.Errorf("Unable to randomize FieldOfStudy struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Upsert(ctx, tx, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert FieldOfStudy: %s", err)
	}

	count, err := FieldOfStudies().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}

	// Attempt the UPDATE side of an UPSERT
	if err = randomize.Struct(seed, &o, fieldOfStudyDBTypes, false, fieldOfStudyPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize FieldOfStudy struct: %s", err)
	}

	if err = o.Upsert(ctx, tx, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert FieldOfStudy: %s", err)
	}

	count, err = FieldOfStudies().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}
}
